
tdse-tp2_01-model_integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003894  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  080039a0  080039a0  000049a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dd0  08003dd0  00005098  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003dd0  08003dd0  00004dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003dd8  08003dd8  00005098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dd8  08003dd8  00004dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ddc  08003ddc  00004ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  08003de0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000098  08003e78  00005098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08003e78  0000539c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000807d  00000000  00000000  000050c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dd5  00000000  00000000  0000d13e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000730  00000000  00000000  0000ef18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000557  00000000  00000000  0000f648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185c1  00000000  00000000  0000fb9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9ec  00000000  00000000  00028160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008358d  00000000  00000000  00033b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b70d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026b4  00000000  00000000  000b711c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000b97d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	08003988 	.word	0x08003988

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	08003988 	.word	0x08003988

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000160:	f002 fa5c 	bl	800261c <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 f9e2 	bl	800052c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f809 	bl	800017e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f872 	bl	8000254 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000170:	f000 f846 	bl	8000200 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	/* Application Init */
	app_init();
 8000174:	f001 f9c8 	bl	8001508 <app_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* Application Update */
	  app_update();
 8000178:	f001 fa7c 	bl	8001674 <app_update>
 800017c:	e7fc      	b.n	8000178 <main+0x1c>

0800017e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017e:	b580      	push	{r7, lr}
 8000180:	b090      	sub	sp, #64	@ 0x40
 8000182:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000184:	f107 0318 	add.w	r3, r7, #24
 8000188:	2228      	movs	r2, #40	@ 0x28
 800018a:	2100      	movs	r1, #0
 800018c:	4618      	mov	r0, r3
 800018e:	f002 fccc 	bl	8002b2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000192:	1d3b      	adds	r3, r7, #4
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	609a      	str	r2, [r3, #8]
 800019c:	60da      	str	r2, [r3, #12]
 800019e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001a0:	2302      	movs	r3, #2
 80001a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a4:	2301      	movs	r3, #1
 80001a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001a8:	2310      	movs	r3, #16
 80001aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ac:	2302      	movs	r3, #2
 80001ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001b0:	2300      	movs	r3, #0
 80001b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001b4:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80001b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	4618      	mov	r0, r3
 80001c0:	f000 fcb4 	bl	8000b2c <HAL_RCC_OscConfig>
 80001c4:	4603      	mov	r3, r0
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d001      	beq.n	80001ce <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001ca:	f000 f8a9 	bl	8000320 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ce:	230f      	movs	r3, #15
 80001d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d2:	2302      	movs	r3, #2
 80001d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d6:	2300      	movs	r3, #0
 80001d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2102      	movs	r1, #2
 80001e8:	4618      	mov	r0, r3
 80001ea:	f000 ff21 	bl	8001030 <HAL_RCC_ClockConfig>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80001f4:	f000 f894 	bl	8000320 <Error_Handler>
  }
}
 80001f8:	bf00      	nop
 80001fa:	3740      	adds	r7, #64	@ 0x40
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}

08000200 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000204:	4b11      	ldr	r3, [pc, #68]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000206:	4a12      	ldr	r2, [pc, #72]	@ (8000250 <MX_USART2_UART_Init+0x50>)
 8000208:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800020a:	4b10      	ldr	r3, [pc, #64]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 800020c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000210:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000212:	4b0e      	ldr	r3, [pc, #56]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000214:	2200      	movs	r2, #0
 8000216:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000218:	4b0c      	ldr	r3, [pc, #48]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 800021a:	2200      	movs	r2, #0
 800021c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800021e:	4b0b      	ldr	r3, [pc, #44]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000220:	2200      	movs	r2, #0
 8000222:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000224:	4b09      	ldr	r3, [pc, #36]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000226:	220c      	movs	r2, #12
 8000228:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800022a:	4b08      	ldr	r3, [pc, #32]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 800022c:	2200      	movs	r2, #0
 800022e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000230:	4b06      	ldr	r3, [pc, #24]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000232:	2200      	movs	r2, #0
 8000234:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000236:	4805      	ldr	r0, [pc, #20]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000238:	f001 f888 	bl	800134c <HAL_UART_Init>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000242:	f000 f86d 	bl	8000320 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000246:	bf00      	nop
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	200000b4 	.word	0x200000b4
 8000250:	40004400 	.word	0x40004400

08000254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800025a:	f107 0310 	add.w	r3, r7, #16
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000268:	4b29      	ldr	r3, [pc, #164]	@ (8000310 <MX_GPIO_Init+0xbc>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	4a28      	ldr	r2, [pc, #160]	@ (8000310 <MX_GPIO_Init+0xbc>)
 800026e:	f043 0310 	orr.w	r3, r3, #16
 8000272:	6193      	str	r3, [r2, #24]
 8000274:	4b26      	ldr	r3, [pc, #152]	@ (8000310 <MX_GPIO_Init+0xbc>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	f003 0310 	and.w	r3, r3, #16
 800027c:	60fb      	str	r3, [r7, #12]
 800027e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000280:	4b23      	ldr	r3, [pc, #140]	@ (8000310 <MX_GPIO_Init+0xbc>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	4a22      	ldr	r2, [pc, #136]	@ (8000310 <MX_GPIO_Init+0xbc>)
 8000286:	f043 0320 	orr.w	r3, r3, #32
 800028a:	6193      	str	r3, [r2, #24]
 800028c:	4b20      	ldr	r3, [pc, #128]	@ (8000310 <MX_GPIO_Init+0xbc>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	f003 0320 	and.w	r3, r3, #32
 8000294:	60bb      	str	r3, [r7, #8]
 8000296:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000298:	4b1d      	ldr	r3, [pc, #116]	@ (8000310 <MX_GPIO_Init+0xbc>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	4a1c      	ldr	r2, [pc, #112]	@ (8000310 <MX_GPIO_Init+0xbc>)
 800029e:	f043 0304 	orr.w	r3, r3, #4
 80002a2:	6193      	str	r3, [r2, #24]
 80002a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000310 <MX_GPIO_Init+0xbc>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	f003 0304 	and.w	r3, r3, #4
 80002ac:	607b      	str	r3, [r7, #4]
 80002ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002b0:	4b17      	ldr	r3, [pc, #92]	@ (8000310 <MX_GPIO_Init+0xbc>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a16      	ldr	r2, [pc, #88]	@ (8000310 <MX_GPIO_Init+0xbc>)
 80002b6:	f043 0308 	orr.w	r3, r3, #8
 80002ba:	6193      	str	r3, [r2, #24]
 80002bc:	4b14      	ldr	r3, [pc, #80]	@ (8000310 <MX_GPIO_Init+0xbc>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	f003 0308 	and.w	r3, r3, #8
 80002c4:	603b      	str	r3, [r7, #0]
 80002c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002c8:	2200      	movs	r2, #0
 80002ca:	2120      	movs	r1, #32
 80002cc:	4811      	ldr	r0, [pc, #68]	@ (8000314 <MX_GPIO_Init+0xc0>)
 80002ce:	f000 fc14 	bl	8000afa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000318 <MX_GPIO_Init+0xc4>)
 80002da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002dc:	2300      	movs	r3, #0
 80002de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002e0:	f107 0310 	add.w	r3, r7, #16
 80002e4:	4619      	mov	r1, r3
 80002e6:	480d      	ldr	r0, [pc, #52]	@ (800031c <MX_GPIO_Init+0xc8>)
 80002e8:	f000 fa6c 	bl	80007c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002ec:	2320      	movs	r3, #32
 80002ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f0:	2301      	movs	r3, #1
 80002f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f4:	2300      	movs	r3, #0
 80002f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f8:	2302      	movs	r3, #2
 80002fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80002fc:	f107 0310 	add.w	r3, r7, #16
 8000300:	4619      	mov	r1, r3
 8000302:	4804      	ldr	r0, [pc, #16]	@ (8000314 <MX_GPIO_Init+0xc0>)
 8000304:	f000 fa5e 	bl	80007c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000308:	bf00      	nop
 800030a:	3720      	adds	r7, #32
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	40021000 	.word	0x40021000
 8000314:	40010800 	.word	0x40010800
 8000318:	10110000 	.word	0x10110000
 800031c:	40011000 	.word	0x40011000

08000320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000324:	b672      	cpsid	i
}
 8000326:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000328:	bf00      	nop
 800032a:	e7fd      	b.n	8000328 <Error_Handler+0x8>

0800032c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000332:	4b15      	ldr	r3, [pc, #84]	@ (8000388 <HAL_MspInit+0x5c>)
 8000334:	699b      	ldr	r3, [r3, #24]
 8000336:	4a14      	ldr	r2, [pc, #80]	@ (8000388 <HAL_MspInit+0x5c>)
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	6193      	str	r3, [r2, #24]
 800033e:	4b12      	ldr	r3, [pc, #72]	@ (8000388 <HAL_MspInit+0x5c>)
 8000340:	699b      	ldr	r3, [r3, #24]
 8000342:	f003 0301 	and.w	r3, r3, #1
 8000346:	60bb      	str	r3, [r7, #8]
 8000348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800034a:	4b0f      	ldr	r3, [pc, #60]	@ (8000388 <HAL_MspInit+0x5c>)
 800034c:	69db      	ldr	r3, [r3, #28]
 800034e:	4a0e      	ldr	r2, [pc, #56]	@ (8000388 <HAL_MspInit+0x5c>)
 8000350:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000354:	61d3      	str	r3, [r2, #28]
 8000356:	4b0c      	ldr	r3, [pc, #48]	@ (8000388 <HAL_MspInit+0x5c>)
 8000358:	69db      	ldr	r3, [r3, #28]
 800035a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000362:	4b0a      	ldr	r3, [pc, #40]	@ (800038c <HAL_MspInit+0x60>)
 8000364:	685b      	ldr	r3, [r3, #4]
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800036e:	60fb      	str	r3, [r7, #12]
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000376:	60fb      	str	r3, [r7, #12]
 8000378:	4a04      	ldr	r2, [pc, #16]	@ (800038c <HAL_MspInit+0x60>)
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800037e:	bf00      	nop
 8000380:	3714      	adds	r7, #20
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr
 8000388:	40021000 	.word	0x40021000
 800038c:	40010000 	.word	0x40010000

08000390 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000398:	f107 0310 	add.w	r3, r7, #16
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	605a      	str	r2, [r3, #4]
 80003a2:	609a      	str	r2, [r3, #8]
 80003a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a15      	ldr	r2, [pc, #84]	@ (8000400 <HAL_UART_MspInit+0x70>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d123      	bne.n	80003f8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80003b0:	4b14      	ldr	r3, [pc, #80]	@ (8000404 <HAL_UART_MspInit+0x74>)
 80003b2:	69db      	ldr	r3, [r3, #28]
 80003b4:	4a13      	ldr	r2, [pc, #76]	@ (8000404 <HAL_UART_MspInit+0x74>)
 80003b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003ba:	61d3      	str	r3, [r2, #28]
 80003bc:	4b11      	ldr	r3, [pc, #68]	@ (8000404 <HAL_UART_MspInit+0x74>)
 80003be:	69db      	ldr	r3, [r3, #28]
 80003c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003c4:	60fb      	str	r3, [r7, #12]
 80003c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000404 <HAL_UART_MspInit+0x74>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000404 <HAL_UART_MspInit+0x74>)
 80003ce:	f043 0304 	orr.w	r3, r3, #4
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000404 <HAL_UART_MspInit+0x74>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0304 	and.w	r3, r3, #4
 80003dc:	60bb      	str	r3, [r7, #8]
 80003de:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80003e0:	230c      	movs	r3, #12
 80003e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003e4:	2302      	movs	r3, #2
 80003e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e8:	2302      	movs	r3, #2
 80003ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ec:	f107 0310 	add.w	r3, r7, #16
 80003f0:	4619      	mov	r1, r3
 80003f2:	4805      	ldr	r0, [pc, #20]	@ (8000408 <HAL_UART_MspInit+0x78>)
 80003f4:	f000 f9e6 	bl	80007c4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80003f8:	bf00      	nop
 80003fa:	3720      	adds	r7, #32
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	40004400 	.word	0x40004400
 8000404:	40021000 	.word	0x40021000
 8000408:	40010800 	.word	0x40010800

0800040c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000410:	bf00      	nop
 8000412:	e7fd      	b.n	8000410 <NMI_Handler+0x4>

08000414 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000418:	bf00      	nop
 800041a:	e7fd      	b.n	8000418 <HardFault_Handler+0x4>

0800041c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000420:	bf00      	nop
 8000422:	e7fd      	b.n	8000420 <MemManage_Handler+0x4>

08000424 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000428:	bf00      	nop
 800042a:	e7fd      	b.n	8000428 <BusFault_Handler+0x4>

0800042c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000430:	bf00      	nop
 8000432:	e7fd      	b.n	8000430 <UsageFault_Handler+0x4>

08000434 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr

08000440 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr

0800044c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr

08000458 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800045c:	f000 f8ac 	bl	80005b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  	HAL_SYSTICK_IRQHandler();
 8000460:	f000 f9a9 	bl	80007b6 <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 8000464:	bf00      	nop
 8000466:	bd80      	pop	{r7, pc}

08000468 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000470:	4a14      	ldr	r2, [pc, #80]	@ (80004c4 <_sbrk+0x5c>)
 8000472:	4b15      	ldr	r3, [pc, #84]	@ (80004c8 <_sbrk+0x60>)
 8000474:	1ad3      	subs	r3, r2, r3
 8000476:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000478:	697b      	ldr	r3, [r7, #20]
 800047a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800047c:	4b13      	ldr	r3, [pc, #76]	@ (80004cc <_sbrk+0x64>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d102      	bne.n	800048a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000484:	4b11      	ldr	r3, [pc, #68]	@ (80004cc <_sbrk+0x64>)
 8000486:	4a12      	ldr	r2, [pc, #72]	@ (80004d0 <_sbrk+0x68>)
 8000488:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800048a:	4b10      	ldr	r3, [pc, #64]	@ (80004cc <_sbrk+0x64>)
 800048c:	681a      	ldr	r2, [r3, #0]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4413      	add	r3, r2
 8000492:	693a      	ldr	r2, [r7, #16]
 8000494:	429a      	cmp	r2, r3
 8000496:	d207      	bcs.n	80004a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000498:	f002 fb96 	bl	8002bc8 <__errno>
 800049c:	4603      	mov	r3, r0
 800049e:	220c      	movs	r2, #12
 80004a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004a2:	f04f 33ff 	mov.w	r3, #4294967295
 80004a6:	e009      	b.n	80004bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004a8:	4b08      	ldr	r3, [pc, #32]	@ (80004cc <_sbrk+0x64>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004ae:	4b07      	ldr	r3, [pc, #28]	@ (80004cc <_sbrk+0x64>)
 80004b0:	681a      	ldr	r2, [r3, #0]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4413      	add	r3, r2
 80004b6:	4a05      	ldr	r2, [pc, #20]	@ (80004cc <_sbrk+0x64>)
 80004b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004ba:	68fb      	ldr	r3, [r7, #12]
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3718      	adds	r7, #24
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	20005000 	.word	0x20005000
 80004c8:	00000400 	.word	0x00000400
 80004cc:	200000fc 	.word	0x200000fc
 80004d0:	200003a0 	.word	0x200003a0

080004d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr

080004e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004e0:	f7ff fff8 	bl	80004d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e4:	480b      	ldr	r0, [pc, #44]	@ (8000514 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004e6:	490c      	ldr	r1, [pc, #48]	@ (8000518 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004e8:	4a0c      	ldr	r2, [pc, #48]	@ (800051c <LoopFillZerobss+0x16>)
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ec:	e002      	b.n	80004f4 <LoopCopyDataInit>

080004ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f2:	3304      	adds	r3, #4

080004f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f8:	d3f9      	bcc.n	80004ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fa:	4a09      	ldr	r2, [pc, #36]	@ (8000520 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004fc:	4c09      	ldr	r4, [pc, #36]	@ (8000524 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000500:	e001      	b.n	8000506 <LoopFillZerobss>

08000502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000504:	3204      	adds	r2, #4

08000506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000508:	d3fb      	bcc.n	8000502 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800050a:	f002 fb63 	bl	8002bd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800050e:	f7ff fe25 	bl	800015c <main>
  bx lr
 8000512:	4770      	bx	lr
  ldr r0, =_sdata
 8000514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000518:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800051c:	08003de0 	.word	0x08003de0
  ldr r2, =_sbss
 8000520:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000524:	2000039c 	.word	0x2000039c

08000528 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000528:	e7fe      	b.n	8000528 <ADC1_2_IRQHandler>
	...

0800052c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000530:	4b08      	ldr	r3, [pc, #32]	@ (8000554 <HAL_Init+0x28>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a07      	ldr	r2, [pc, #28]	@ (8000554 <HAL_Init+0x28>)
 8000536:	f043 0310 	orr.w	r3, r3, #16
 800053a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f907 	bl	8000750 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	200f      	movs	r0, #15
 8000544:	f000 f808 	bl	8000558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f7ff fef0 	bl	800032c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40022000 	.word	0x40022000

08000558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000560:	4b12      	ldr	r3, [pc, #72]	@ (80005ac <HAL_InitTick+0x54>)
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	4b12      	ldr	r3, [pc, #72]	@ (80005b0 <HAL_InitTick+0x58>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	4619      	mov	r1, r3
 800056a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800056e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000572:	fbb2 f3f3 	udiv	r3, r2, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f911 	bl	800079e <HAL_SYSTICK_Config>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000582:	2301      	movs	r3, #1
 8000584:	e00e      	b.n	80005a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b0f      	cmp	r3, #15
 800058a:	d80a      	bhi.n	80005a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800058c:	2200      	movs	r2, #0
 800058e:	6879      	ldr	r1, [r7, #4]
 8000590:	f04f 30ff 	mov.w	r0, #4294967295
 8000594:	f000 f8e7 	bl	8000766 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000598:	4a06      	ldr	r2, [pc, #24]	@ (80005b4 <HAL_InitTick+0x5c>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059e:	2300      	movs	r3, #0
 80005a0:	e000      	b.n	80005a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000000 	.word	0x20000000
 80005b0:	20000008 	.word	0x20000008
 80005b4:	20000004 	.word	0x20000004

080005b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005bc:	4b05      	ldr	r3, [pc, #20]	@ (80005d4 <HAL_IncTick+0x1c>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b05      	ldr	r3, [pc, #20]	@ (80005d8 <HAL_IncTick+0x20>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	4a03      	ldr	r2, [pc, #12]	@ (80005d8 <HAL_IncTick+0x20>)
 80005ca:	6013      	str	r3, [r2, #0]
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr
 80005d4:	20000008 	.word	0x20000008
 80005d8:	20000100 	.word	0x20000100

080005dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return uwTick;
 80005e0:	4b02      	ldr	r3, [pc, #8]	@ (80005ec <HAL_GetTick+0x10>)
 80005e2:	681b      	ldr	r3, [r3, #0]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr
 80005ec:	20000100 	.word	0x20000100

080005f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000618:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800061c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	@ (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	@ (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	6039      	str	r1, [r7, #0]
 800065e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000664:	2b00      	cmp	r3, #0
 8000666:	db0a      	blt.n	800067e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	b2da      	uxtb	r2, r3
 800066c:	490c      	ldr	r1, [pc, #48]	@ (80006a0 <__NVIC_SetPriority+0x4c>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	0112      	lsls	r2, r2, #4
 8000674:	b2d2      	uxtb	r2, r2
 8000676:	440b      	add	r3, r1
 8000678:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800067c:	e00a      	b.n	8000694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	b2da      	uxtb	r2, r3
 8000682:	4908      	ldr	r1, [pc, #32]	@ (80006a4 <__NVIC_SetPriority+0x50>)
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	f003 030f 	and.w	r3, r3, #15
 800068a:	3b04      	subs	r3, #4
 800068c:	0112      	lsls	r2, r2, #4
 800068e:	b2d2      	uxtb	r2, r2
 8000690:	440b      	add	r3, r1
 8000692:	761a      	strb	r2, [r3, #24]
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	e000e100 	.word	0xe000e100
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b089      	sub	sp, #36	@ 0x24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006bc:	69fb      	ldr	r3, [r7, #28]
 80006be:	f1c3 0307 	rsb	r3, r3, #7
 80006c2:	2b04      	cmp	r3, #4
 80006c4:	bf28      	it	cs
 80006c6:	2304      	movcs	r3, #4
 80006c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	3304      	adds	r3, #4
 80006ce:	2b06      	cmp	r3, #6
 80006d0:	d902      	bls.n	80006d8 <NVIC_EncodePriority+0x30>
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	3b03      	subs	r3, #3
 80006d6:	e000      	b.n	80006da <NVIC_EncodePriority+0x32>
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006dc:	f04f 32ff 	mov.w	r2, #4294967295
 80006e0:	69bb      	ldr	r3, [r7, #24]
 80006e2:	fa02 f303 	lsl.w	r3, r2, r3
 80006e6:	43da      	mvns	r2, r3
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	401a      	ands	r2, r3
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f0:	f04f 31ff 	mov.w	r1, #4294967295
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	fa01 f303 	lsl.w	r3, r1, r3
 80006fa:	43d9      	mvns	r1, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000700:	4313      	orrs	r3, r2
         );
}
 8000702:	4618      	mov	r0, r3
 8000704:	3724      	adds	r7, #36	@ 0x24
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr

0800070c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	3b01      	subs	r3, #1
 8000718:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800071c:	d301      	bcc.n	8000722 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800071e:	2301      	movs	r3, #1
 8000720:	e00f      	b.n	8000742 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000722:	4a0a      	ldr	r2, [pc, #40]	@ (800074c <SysTick_Config+0x40>)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3b01      	subs	r3, #1
 8000728:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800072a:	210f      	movs	r1, #15
 800072c:	f04f 30ff 	mov.w	r0, #4294967295
 8000730:	f7ff ff90 	bl	8000654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000734:	4b05      	ldr	r3, [pc, #20]	@ (800074c <SysTick_Config+0x40>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800073a:	4b04      	ldr	r3, [pc, #16]	@ (800074c <SysTick_Config+0x40>)
 800073c:	2207      	movs	r2, #7
 800073e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000740:	2300      	movs	r3, #0
}
 8000742:	4618      	mov	r0, r3
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	e000e010 	.word	0xe000e010

08000750 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f7ff ff49 	bl	80005f0 <__NVIC_SetPriorityGrouping>
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000766:	b580      	push	{r7, lr}
 8000768:	b086      	sub	sp, #24
 800076a:	af00      	add	r7, sp, #0
 800076c:	4603      	mov	r3, r0
 800076e:	60b9      	str	r1, [r7, #8]
 8000770:	607a      	str	r2, [r7, #4]
 8000772:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000778:	f7ff ff5e 	bl	8000638 <__NVIC_GetPriorityGrouping>
 800077c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	68b9      	ldr	r1, [r7, #8]
 8000782:	6978      	ldr	r0, [r7, #20]
 8000784:	f7ff ff90 	bl	80006a8 <NVIC_EncodePriority>
 8000788:	4602      	mov	r2, r0
 800078a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800078e:	4611      	mov	r1, r2
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff ff5f 	bl	8000654 <__NVIC_SetPriority>
}
 8000796:	bf00      	nop
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b082      	sub	sp, #8
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f7ff ffb0 	bl	800070c <SysTick_Config>
 80007ac:	4603      	mov	r3, r0
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80007ba:	f000 ffc1 	bl	8001740 <HAL_SYSTICK_Callback>
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b08b      	sub	sp, #44	@ 0x2c
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80007d2:	2300      	movs	r3, #0
 80007d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007d6:	e169      	b.n	8000aac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80007d8:	2201      	movs	r2, #1
 80007da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007dc:	fa02 f303 	lsl.w	r3, r2, r3
 80007e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	69fa      	ldr	r2, [r7, #28]
 80007e8:	4013      	ands	r3, r2
 80007ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007ec:	69ba      	ldr	r2, [r7, #24]
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	f040 8158 	bne.w	8000aa6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	4a9a      	ldr	r2, [pc, #616]	@ (8000a64 <HAL_GPIO_Init+0x2a0>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d05e      	beq.n	80008be <HAL_GPIO_Init+0xfa>
 8000800:	4a98      	ldr	r2, [pc, #608]	@ (8000a64 <HAL_GPIO_Init+0x2a0>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d875      	bhi.n	80008f2 <HAL_GPIO_Init+0x12e>
 8000806:	4a98      	ldr	r2, [pc, #608]	@ (8000a68 <HAL_GPIO_Init+0x2a4>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d058      	beq.n	80008be <HAL_GPIO_Init+0xfa>
 800080c:	4a96      	ldr	r2, [pc, #600]	@ (8000a68 <HAL_GPIO_Init+0x2a4>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d86f      	bhi.n	80008f2 <HAL_GPIO_Init+0x12e>
 8000812:	4a96      	ldr	r2, [pc, #600]	@ (8000a6c <HAL_GPIO_Init+0x2a8>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d052      	beq.n	80008be <HAL_GPIO_Init+0xfa>
 8000818:	4a94      	ldr	r2, [pc, #592]	@ (8000a6c <HAL_GPIO_Init+0x2a8>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d869      	bhi.n	80008f2 <HAL_GPIO_Init+0x12e>
 800081e:	4a94      	ldr	r2, [pc, #592]	@ (8000a70 <HAL_GPIO_Init+0x2ac>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d04c      	beq.n	80008be <HAL_GPIO_Init+0xfa>
 8000824:	4a92      	ldr	r2, [pc, #584]	@ (8000a70 <HAL_GPIO_Init+0x2ac>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d863      	bhi.n	80008f2 <HAL_GPIO_Init+0x12e>
 800082a:	4a92      	ldr	r2, [pc, #584]	@ (8000a74 <HAL_GPIO_Init+0x2b0>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d046      	beq.n	80008be <HAL_GPIO_Init+0xfa>
 8000830:	4a90      	ldr	r2, [pc, #576]	@ (8000a74 <HAL_GPIO_Init+0x2b0>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d85d      	bhi.n	80008f2 <HAL_GPIO_Init+0x12e>
 8000836:	2b12      	cmp	r3, #18
 8000838:	d82a      	bhi.n	8000890 <HAL_GPIO_Init+0xcc>
 800083a:	2b12      	cmp	r3, #18
 800083c:	d859      	bhi.n	80008f2 <HAL_GPIO_Init+0x12e>
 800083e:	a201      	add	r2, pc, #4	@ (adr r2, 8000844 <HAL_GPIO_Init+0x80>)
 8000840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000844:	080008bf 	.word	0x080008bf
 8000848:	08000899 	.word	0x08000899
 800084c:	080008ab 	.word	0x080008ab
 8000850:	080008ed 	.word	0x080008ed
 8000854:	080008f3 	.word	0x080008f3
 8000858:	080008f3 	.word	0x080008f3
 800085c:	080008f3 	.word	0x080008f3
 8000860:	080008f3 	.word	0x080008f3
 8000864:	080008f3 	.word	0x080008f3
 8000868:	080008f3 	.word	0x080008f3
 800086c:	080008f3 	.word	0x080008f3
 8000870:	080008f3 	.word	0x080008f3
 8000874:	080008f3 	.word	0x080008f3
 8000878:	080008f3 	.word	0x080008f3
 800087c:	080008f3 	.word	0x080008f3
 8000880:	080008f3 	.word	0x080008f3
 8000884:	080008f3 	.word	0x080008f3
 8000888:	080008a1 	.word	0x080008a1
 800088c:	080008b5 	.word	0x080008b5
 8000890:	4a79      	ldr	r2, [pc, #484]	@ (8000a78 <HAL_GPIO_Init+0x2b4>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d013      	beq.n	80008be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000896:	e02c      	b.n	80008f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	623b      	str	r3, [r7, #32]
          break;
 800089e:	e029      	b.n	80008f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	3304      	adds	r3, #4
 80008a6:	623b      	str	r3, [r7, #32]
          break;
 80008a8:	e024      	b.n	80008f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	68db      	ldr	r3, [r3, #12]
 80008ae:	3308      	adds	r3, #8
 80008b0:	623b      	str	r3, [r7, #32]
          break;
 80008b2:	e01f      	b.n	80008f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	330c      	adds	r3, #12
 80008ba:	623b      	str	r3, [r7, #32]
          break;
 80008bc:	e01a      	b.n	80008f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	689b      	ldr	r3, [r3, #8]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d102      	bne.n	80008cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008c6:	2304      	movs	r3, #4
 80008c8:	623b      	str	r3, [r7, #32]
          break;
 80008ca:	e013      	b.n	80008f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d105      	bne.n	80008e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008d4:	2308      	movs	r3, #8
 80008d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	69fa      	ldr	r2, [r7, #28]
 80008dc:	611a      	str	r2, [r3, #16]
          break;
 80008de:	e009      	b.n	80008f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008e0:	2308      	movs	r3, #8
 80008e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	69fa      	ldr	r2, [r7, #28]
 80008e8:	615a      	str	r2, [r3, #20]
          break;
 80008ea:	e003      	b.n	80008f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
          break;
 80008f0:	e000      	b.n	80008f4 <HAL_GPIO_Init+0x130>
          break;
 80008f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	2bff      	cmp	r3, #255	@ 0xff
 80008f8:	d801      	bhi.n	80008fe <HAL_GPIO_Init+0x13a>
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	e001      	b.n	8000902 <HAL_GPIO_Init+0x13e>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	3304      	adds	r3, #4
 8000902:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	2bff      	cmp	r3, #255	@ 0xff
 8000908:	d802      	bhi.n	8000910 <HAL_GPIO_Init+0x14c>
 800090a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	e002      	b.n	8000916 <HAL_GPIO_Init+0x152>
 8000910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000912:	3b08      	subs	r3, #8
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	210f      	movs	r1, #15
 800091e:	693b      	ldr	r3, [r7, #16]
 8000920:	fa01 f303 	lsl.w	r3, r1, r3
 8000924:	43db      	mvns	r3, r3
 8000926:	401a      	ands	r2, r3
 8000928:	6a39      	ldr	r1, [r7, #32]
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	fa01 f303 	lsl.w	r3, r1, r3
 8000930:	431a      	orrs	r2, r3
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800093e:	2b00      	cmp	r3, #0
 8000940:	f000 80b1 	beq.w	8000aa6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000944:	4b4d      	ldr	r3, [pc, #308]	@ (8000a7c <HAL_GPIO_Init+0x2b8>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a4c      	ldr	r2, [pc, #304]	@ (8000a7c <HAL_GPIO_Init+0x2b8>)
 800094a:	f043 0301 	orr.w	r3, r3, #1
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b4a      	ldr	r3, [pc, #296]	@ (8000a7c <HAL_GPIO_Init+0x2b8>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800095c:	4a48      	ldr	r2, [pc, #288]	@ (8000a80 <HAL_GPIO_Init+0x2bc>)
 800095e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000960:	089b      	lsrs	r3, r3, #2
 8000962:	3302      	adds	r3, #2
 8000964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000968:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800096a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800096c:	f003 0303 	and.w	r3, r3, #3
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	220f      	movs	r2, #15
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	43db      	mvns	r3, r3
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	4013      	ands	r3, r2
 800097e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a40      	ldr	r2, [pc, #256]	@ (8000a84 <HAL_GPIO_Init+0x2c0>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d013      	beq.n	80009b0 <HAL_GPIO_Init+0x1ec>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a3f      	ldr	r2, [pc, #252]	@ (8000a88 <HAL_GPIO_Init+0x2c4>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d00d      	beq.n	80009ac <HAL_GPIO_Init+0x1e8>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a3e      	ldr	r2, [pc, #248]	@ (8000a8c <HAL_GPIO_Init+0x2c8>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d007      	beq.n	80009a8 <HAL_GPIO_Init+0x1e4>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a3d      	ldr	r2, [pc, #244]	@ (8000a90 <HAL_GPIO_Init+0x2cc>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d101      	bne.n	80009a4 <HAL_GPIO_Init+0x1e0>
 80009a0:	2303      	movs	r3, #3
 80009a2:	e006      	b.n	80009b2 <HAL_GPIO_Init+0x1ee>
 80009a4:	2304      	movs	r3, #4
 80009a6:	e004      	b.n	80009b2 <HAL_GPIO_Init+0x1ee>
 80009a8:	2302      	movs	r3, #2
 80009aa:	e002      	b.n	80009b2 <HAL_GPIO_Init+0x1ee>
 80009ac:	2301      	movs	r3, #1
 80009ae:	e000      	b.n	80009b2 <HAL_GPIO_Init+0x1ee>
 80009b0:	2300      	movs	r3, #0
 80009b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009b4:	f002 0203 	and.w	r2, r2, #3
 80009b8:	0092      	lsls	r2, r2, #2
 80009ba:	4093      	lsls	r3, r2
 80009bc:	68fa      	ldr	r2, [r7, #12]
 80009be:	4313      	orrs	r3, r2
 80009c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009c2:	492f      	ldr	r1, [pc, #188]	@ (8000a80 <HAL_GPIO_Init+0x2bc>)
 80009c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009c6:	089b      	lsrs	r3, r3, #2
 80009c8:	3302      	adds	r3, #2
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d006      	beq.n	80009ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009dc:	4b2d      	ldr	r3, [pc, #180]	@ (8000a94 <HAL_GPIO_Init+0x2d0>)
 80009de:	689a      	ldr	r2, [r3, #8]
 80009e0:	492c      	ldr	r1, [pc, #176]	@ (8000a94 <HAL_GPIO_Init+0x2d0>)
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	608b      	str	r3, [r1, #8]
 80009e8:	e006      	b.n	80009f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000a94 <HAL_GPIO_Init+0x2d0>)
 80009ec:	689a      	ldr	r2, [r3, #8]
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	43db      	mvns	r3, r3
 80009f2:	4928      	ldr	r1, [pc, #160]	@ (8000a94 <HAL_GPIO_Init+0x2d0>)
 80009f4:	4013      	ands	r3, r2
 80009f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d006      	beq.n	8000a12 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a04:	4b23      	ldr	r3, [pc, #140]	@ (8000a94 <HAL_GPIO_Init+0x2d0>)
 8000a06:	68da      	ldr	r2, [r3, #12]
 8000a08:	4922      	ldr	r1, [pc, #136]	@ (8000a94 <HAL_GPIO_Init+0x2d0>)
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	60cb      	str	r3, [r1, #12]
 8000a10:	e006      	b.n	8000a20 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a12:	4b20      	ldr	r3, [pc, #128]	@ (8000a94 <HAL_GPIO_Init+0x2d0>)
 8000a14:	68da      	ldr	r2, [r3, #12]
 8000a16:	69bb      	ldr	r3, [r7, #24]
 8000a18:	43db      	mvns	r3, r3
 8000a1a:	491e      	ldr	r1, [pc, #120]	@ (8000a94 <HAL_GPIO_Init+0x2d0>)
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d006      	beq.n	8000a3a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a2c:	4b19      	ldr	r3, [pc, #100]	@ (8000a94 <HAL_GPIO_Init+0x2d0>)
 8000a2e:	685a      	ldr	r2, [r3, #4]
 8000a30:	4918      	ldr	r1, [pc, #96]	@ (8000a94 <HAL_GPIO_Init+0x2d0>)
 8000a32:	69bb      	ldr	r3, [r7, #24]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	604b      	str	r3, [r1, #4]
 8000a38:	e006      	b.n	8000a48 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a3a:	4b16      	ldr	r3, [pc, #88]	@ (8000a94 <HAL_GPIO_Init+0x2d0>)
 8000a3c:	685a      	ldr	r2, [r3, #4]
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	43db      	mvns	r3, r3
 8000a42:	4914      	ldr	r1, [pc, #80]	@ (8000a94 <HAL_GPIO_Init+0x2d0>)
 8000a44:	4013      	ands	r3, r2
 8000a46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d021      	beq.n	8000a98 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a54:	4b0f      	ldr	r3, [pc, #60]	@ (8000a94 <HAL_GPIO_Init+0x2d0>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	490e      	ldr	r1, [pc, #56]	@ (8000a94 <HAL_GPIO_Init+0x2d0>)
 8000a5a:	69bb      	ldr	r3, [r7, #24]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	600b      	str	r3, [r1, #0]
 8000a60:	e021      	b.n	8000aa6 <HAL_GPIO_Init+0x2e2>
 8000a62:	bf00      	nop
 8000a64:	10320000 	.word	0x10320000
 8000a68:	10310000 	.word	0x10310000
 8000a6c:	10220000 	.word	0x10220000
 8000a70:	10210000 	.word	0x10210000
 8000a74:	10120000 	.word	0x10120000
 8000a78:	10110000 	.word	0x10110000
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40010000 	.word	0x40010000
 8000a84:	40010800 	.word	0x40010800
 8000a88:	40010c00 	.word	0x40010c00
 8000a8c:	40011000 	.word	0x40011000
 8000a90:	40011400 	.word	0x40011400
 8000a94:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a98:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac8 <HAL_GPIO_Init+0x304>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	4909      	ldr	r1, [pc, #36]	@ (8000ac8 <HAL_GPIO_Init+0x304>)
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f47f ae8e 	bne.w	80007d8 <HAL_GPIO_Init+0x14>
  }
}
 8000abc:	bf00      	nop
 8000abe:	bf00      	nop
 8000ac0:	372c      	adds	r7, #44	@ 0x2c
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr
 8000ac8:	40010400 	.word	0x40010400

08000acc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	689a      	ldr	r2, [r3, #8]
 8000adc:	887b      	ldrh	r3, [r7, #2]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d002      	beq.n	8000aea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	73fb      	strb	r3, [r7, #15]
 8000ae8:	e001      	b.n	8000aee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000aea:	2300      	movs	r3, #0
 8000aec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr

08000afa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	460b      	mov	r3, r1
 8000b04:	807b      	strh	r3, [r7, #2]
 8000b06:	4613      	mov	r3, r2
 8000b08:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b0a:	787b      	ldrb	r3, [r7, #1]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d003      	beq.n	8000b18 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b10:	887a      	ldrh	r2, [r7, #2]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b16:	e003      	b.n	8000b20 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b18:	887b      	ldrh	r3, [r7, #2]
 8000b1a:	041a      	lsls	r2, r3, #16
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	611a      	str	r2, [r3, #16]
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr
	...

08000b2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d101      	bne.n	8000b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e272      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f000 8087 	beq.w	8000c5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b4c:	4b92      	ldr	r3, [pc, #584]	@ (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f003 030c 	and.w	r3, r3, #12
 8000b54:	2b04      	cmp	r3, #4
 8000b56:	d00c      	beq.n	8000b72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b58:	4b8f      	ldr	r3, [pc, #572]	@ (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f003 030c 	and.w	r3, r3, #12
 8000b60:	2b08      	cmp	r3, #8
 8000b62:	d112      	bne.n	8000b8a <HAL_RCC_OscConfig+0x5e>
 8000b64:	4b8c      	ldr	r3, [pc, #560]	@ (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b70:	d10b      	bne.n	8000b8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b72:	4b89      	ldr	r3, [pc, #548]	@ (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d06c      	beq.n	8000c58 <HAL_RCC_OscConfig+0x12c>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d168      	bne.n	8000c58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e24c      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b92:	d106      	bne.n	8000ba2 <HAL_RCC_OscConfig+0x76>
 8000b94:	4b80      	ldr	r3, [pc, #512]	@ (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a7f      	ldr	r2, [pc, #508]	@ (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000b9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b9e:	6013      	str	r3, [r2, #0]
 8000ba0:	e02e      	b.n	8000c00 <HAL_RCC_OscConfig+0xd4>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d10c      	bne.n	8000bc4 <HAL_RCC_OscConfig+0x98>
 8000baa:	4b7b      	ldr	r3, [pc, #492]	@ (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a7a      	ldr	r2, [pc, #488]	@ (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000bb4:	6013      	str	r3, [r2, #0]
 8000bb6:	4b78      	ldr	r3, [pc, #480]	@ (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a77      	ldr	r2, [pc, #476]	@ (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bbc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bc0:	6013      	str	r3, [r2, #0]
 8000bc2:	e01d      	b.n	8000c00 <HAL_RCC_OscConfig+0xd4>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000bcc:	d10c      	bne.n	8000be8 <HAL_RCC_OscConfig+0xbc>
 8000bce:	4b72      	ldr	r3, [pc, #456]	@ (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a71      	ldr	r2, [pc, #452]	@ (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bd8:	6013      	str	r3, [r2, #0]
 8000bda:	4b6f      	ldr	r3, [pc, #444]	@ (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a6e      	ldr	r2, [pc, #440]	@ (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000be0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	e00b      	b.n	8000c00 <HAL_RCC_OscConfig+0xd4>
 8000be8:	4b6b      	ldr	r3, [pc, #428]	@ (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a6a      	ldr	r2, [pc, #424]	@ (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000bf2:	6013      	str	r3, [r2, #0]
 8000bf4:	4b68      	ldr	r3, [pc, #416]	@ (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a67      	ldr	r2, [pc, #412]	@ (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bfe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d013      	beq.n	8000c30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c08:	f7ff fce8 	bl	80005dc <HAL_GetTick>
 8000c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c0e:	e008      	b.n	8000c22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c10:	f7ff fce4 	bl	80005dc <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	2b64      	cmp	r3, #100	@ 0x64
 8000c1c:	d901      	bls.n	8000c22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	e200      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c22:	4b5d      	ldr	r3, [pc, #372]	@ (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d0f0      	beq.n	8000c10 <HAL_RCC_OscConfig+0xe4>
 8000c2e:	e014      	b.n	8000c5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c30:	f7ff fcd4 	bl	80005dc <HAL_GetTick>
 8000c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c36:	e008      	b.n	8000c4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c38:	f7ff fcd0 	bl	80005dc <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	2b64      	cmp	r3, #100	@ 0x64
 8000c44:	d901      	bls.n	8000c4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c46:	2303      	movs	r3, #3
 8000c48:	e1ec      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c4a:	4b53      	ldr	r3, [pc, #332]	@ (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d1f0      	bne.n	8000c38 <HAL_RCC_OscConfig+0x10c>
 8000c56:	e000      	b.n	8000c5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d063      	beq.n	8000d2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c66:	4b4c      	ldr	r3, [pc, #304]	@ (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f003 030c 	and.w	r3, r3, #12
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d00b      	beq.n	8000c8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c72:	4b49      	ldr	r3, [pc, #292]	@ (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f003 030c 	and.w	r3, r3, #12
 8000c7a:	2b08      	cmp	r3, #8
 8000c7c:	d11c      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x18c>
 8000c7e:	4b46      	ldr	r3, [pc, #280]	@ (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d116      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c8a:	4b43      	ldr	r3, [pc, #268]	@ (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d005      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x176>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	691b      	ldr	r3, [r3, #16]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d001      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e1c0      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ca2:	4b3d      	ldr	r3, [pc, #244]	@ (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	4939      	ldr	r1, [pc, #228]	@ (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cb6:	e03a      	b.n	8000d2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	691b      	ldr	r3, [r3, #16]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d020      	beq.n	8000d02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cc0:	4b36      	ldr	r3, [pc, #216]	@ (8000d9c <HAL_RCC_OscConfig+0x270>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc6:	f7ff fc89 	bl	80005dc <HAL_GetTick>
 8000cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ccc:	e008      	b.n	8000ce0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cce:	f7ff fc85 	bl	80005dc <HAL_GetTick>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d901      	bls.n	8000ce0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	e1a1      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ce0:	4b2d      	ldr	r3, [pc, #180]	@ (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f003 0302 	and.w	r3, r3, #2
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d0f0      	beq.n	8000cce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cec:	4b2a      	ldr	r3, [pc, #168]	@ (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	695b      	ldr	r3, [r3, #20]
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	4927      	ldr	r1, [pc, #156]	@ (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	600b      	str	r3, [r1, #0]
 8000d00:	e015      	b.n	8000d2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d02:	4b26      	ldr	r3, [pc, #152]	@ (8000d9c <HAL_RCC_OscConfig+0x270>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d08:	f7ff fc68 	bl	80005dc <HAL_GetTick>
 8000d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d0e:	e008      	b.n	8000d22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d10:	f7ff fc64 	bl	80005dc <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d901      	bls.n	8000d22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	e180      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d22:	4b1d      	ldr	r3, [pc, #116]	@ (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d1f0      	bne.n	8000d10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 0308 	and.w	r3, r3, #8
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d03a      	beq.n	8000db0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d019      	beq.n	8000d76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d42:	4b17      	ldr	r3, [pc, #92]	@ (8000da0 <HAL_RCC_OscConfig+0x274>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d48:	f7ff fc48 	bl	80005dc <HAL_GetTick>
 8000d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d4e:	e008      	b.n	8000d62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d50:	f7ff fc44 	bl	80005dc <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d901      	bls.n	8000d62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e160      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d62:	4b0d      	ldr	r3, [pc, #52]	@ (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d0f0      	beq.n	8000d50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d6e:	2001      	movs	r0, #1
 8000d70:	f000 face 	bl	8001310 <RCC_Delay>
 8000d74:	e01c      	b.n	8000db0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d76:	4b0a      	ldr	r3, [pc, #40]	@ (8000da0 <HAL_RCC_OscConfig+0x274>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d7c:	f7ff fc2e 	bl	80005dc <HAL_GetTick>
 8000d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d82:	e00f      	b.n	8000da4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d84:	f7ff fc2a 	bl	80005dc <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d908      	bls.n	8000da4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d92:	2303      	movs	r3, #3
 8000d94:	e146      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>
 8000d96:	bf00      	nop
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	42420000 	.word	0x42420000
 8000da0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000da4:	4b92      	ldr	r3, [pc, #584]	@ (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1e9      	bne.n	8000d84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f003 0304 	and.w	r3, r3, #4
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	f000 80a6 	beq.w	8000f0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dc2:	4b8b      	ldr	r3, [pc, #556]	@ (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d10d      	bne.n	8000dea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dce:	4b88      	ldr	r3, [pc, #544]	@ (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	4a87      	ldr	r2, [pc, #540]	@ (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000dd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dd8:	61d3      	str	r3, [r2, #28]
 8000dda:	4b85      	ldr	r3, [pc, #532]	@ (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000de6:	2301      	movs	r3, #1
 8000de8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dea:	4b82      	ldr	r3, [pc, #520]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c8>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d118      	bne.n	8000e28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000df6:	4b7f      	ldr	r3, [pc, #508]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c8>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a7e      	ldr	r2, [pc, #504]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c8>)
 8000dfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e02:	f7ff fbeb 	bl	80005dc <HAL_GetTick>
 8000e06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e08:	e008      	b.n	8000e1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e0a:	f7ff fbe7 	bl	80005dc <HAL_GetTick>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	2b64      	cmp	r3, #100	@ 0x64
 8000e16:	d901      	bls.n	8000e1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e103      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e1c:	4b75      	ldr	r3, [pc, #468]	@ (8000ff4 <HAL_RCC_OscConfig+0x4c8>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d0f0      	beq.n	8000e0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d106      	bne.n	8000e3e <HAL_RCC_OscConfig+0x312>
 8000e30:	4b6f      	ldr	r3, [pc, #444]	@ (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000e32:	6a1b      	ldr	r3, [r3, #32]
 8000e34:	4a6e      	ldr	r2, [pc, #440]	@ (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	6213      	str	r3, [r2, #32]
 8000e3c:	e02d      	b.n	8000e9a <HAL_RCC_OscConfig+0x36e>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d10c      	bne.n	8000e60 <HAL_RCC_OscConfig+0x334>
 8000e46:	4b6a      	ldr	r3, [pc, #424]	@ (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000e48:	6a1b      	ldr	r3, [r3, #32]
 8000e4a:	4a69      	ldr	r2, [pc, #420]	@ (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000e4c:	f023 0301 	bic.w	r3, r3, #1
 8000e50:	6213      	str	r3, [r2, #32]
 8000e52:	4b67      	ldr	r3, [pc, #412]	@ (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000e54:	6a1b      	ldr	r3, [r3, #32]
 8000e56:	4a66      	ldr	r2, [pc, #408]	@ (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000e58:	f023 0304 	bic.w	r3, r3, #4
 8000e5c:	6213      	str	r3, [r2, #32]
 8000e5e:	e01c      	b.n	8000e9a <HAL_RCC_OscConfig+0x36e>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	2b05      	cmp	r3, #5
 8000e66:	d10c      	bne.n	8000e82 <HAL_RCC_OscConfig+0x356>
 8000e68:	4b61      	ldr	r3, [pc, #388]	@ (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000e6a:	6a1b      	ldr	r3, [r3, #32]
 8000e6c:	4a60      	ldr	r2, [pc, #384]	@ (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000e6e:	f043 0304 	orr.w	r3, r3, #4
 8000e72:	6213      	str	r3, [r2, #32]
 8000e74:	4b5e      	ldr	r3, [pc, #376]	@ (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000e76:	6a1b      	ldr	r3, [r3, #32]
 8000e78:	4a5d      	ldr	r2, [pc, #372]	@ (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	6213      	str	r3, [r2, #32]
 8000e80:	e00b      	b.n	8000e9a <HAL_RCC_OscConfig+0x36e>
 8000e82:	4b5b      	ldr	r3, [pc, #364]	@ (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000e84:	6a1b      	ldr	r3, [r3, #32]
 8000e86:	4a5a      	ldr	r2, [pc, #360]	@ (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000e88:	f023 0301 	bic.w	r3, r3, #1
 8000e8c:	6213      	str	r3, [r2, #32]
 8000e8e:	4b58      	ldr	r3, [pc, #352]	@ (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000e90:	6a1b      	ldr	r3, [r3, #32]
 8000e92:	4a57      	ldr	r2, [pc, #348]	@ (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000e94:	f023 0304 	bic.w	r3, r3, #4
 8000e98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d015      	beq.n	8000ece <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea2:	f7ff fb9b 	bl	80005dc <HAL_GetTick>
 8000ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ea8:	e00a      	b.n	8000ec0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eaa:	f7ff fb97 	bl	80005dc <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d901      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e0b1      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ec0:	4b4b      	ldr	r3, [pc, #300]	@ (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d0ee      	beq.n	8000eaa <HAL_RCC_OscConfig+0x37e>
 8000ecc:	e014      	b.n	8000ef8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ece:	f7ff fb85 	bl	80005dc <HAL_GetTick>
 8000ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ed4:	e00a      	b.n	8000eec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ed6:	f7ff fb81 	bl	80005dc <HAL_GetTick>
 8000eda:	4602      	mov	r2, r0
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d901      	bls.n	8000eec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e09b      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eec:	4b40      	ldr	r3, [pc, #256]	@ (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000eee:	6a1b      	ldr	r3, [r3, #32]
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1ee      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000ef8:	7dfb      	ldrb	r3, [r7, #23]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d105      	bne.n	8000f0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000efe:	4b3c      	ldr	r3, [pc, #240]	@ (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	4a3b      	ldr	r2, [pc, #236]	@ (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000f04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000f08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f000 8087 	beq.w	8001022 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f14:	4b36      	ldr	r3, [pc, #216]	@ (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 030c 	and.w	r3, r3, #12
 8000f1c:	2b08      	cmp	r3, #8
 8000f1e:	d061      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	69db      	ldr	r3, [r3, #28]
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d146      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f28:	4b33      	ldr	r3, [pc, #204]	@ (8000ff8 <HAL_RCC_OscConfig+0x4cc>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2e:	f7ff fb55 	bl	80005dc <HAL_GetTick>
 8000f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f34:	e008      	b.n	8000f48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f36:	f7ff fb51 	bl	80005dc <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d901      	bls.n	8000f48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e06d      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f48:	4b29      	ldr	r3, [pc, #164]	@ (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1f0      	bne.n	8000f36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f5c:	d108      	bne.n	8000f70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f5e:	4b24      	ldr	r3, [pc, #144]	@ (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	4921      	ldr	r1, [pc, #132]	@ (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f70:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a19      	ldr	r1, [r3, #32]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f80:	430b      	orrs	r3, r1
 8000f82:	491b      	ldr	r1, [pc, #108]	@ (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000f84:	4313      	orrs	r3, r2
 8000f86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f88:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff8 <HAL_RCC_OscConfig+0x4cc>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8e:	f7ff fb25 	bl	80005dc <HAL_GetTick>
 8000f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f94:	e008      	b.n	8000fa8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f96:	f7ff fb21 	bl	80005dc <HAL_GetTick>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d901      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e03d      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fa8:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d0f0      	beq.n	8000f96 <HAL_RCC_OscConfig+0x46a>
 8000fb4:	e035      	b.n	8001022 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ff8 <HAL_RCC_OscConfig+0x4cc>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbc:	f7ff fb0e 	bl	80005dc <HAL_GetTick>
 8000fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fc2:	e008      	b.n	8000fd6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fc4:	f7ff fb0a 	bl	80005dc <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e026      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fd6:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1f0      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x498>
 8000fe2:	e01e      	b.n	8001022 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	69db      	ldr	r3, [r3, #28]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d107      	bne.n	8000ffc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e019      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40007000 	.word	0x40007000
 8000ff8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800102c <HAL_RCC_OscConfig+0x500>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a1b      	ldr	r3, [r3, #32]
 800100c:	429a      	cmp	r2, r3
 800100e:	d106      	bne.n	800101e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800101a:	429a      	cmp	r2, r3
 800101c:	d001      	beq.n	8001022 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e000      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40021000 	.word	0x40021000

08001030 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d101      	bne.n	8001044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e0d0      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001044:	4b6a      	ldr	r3, [pc, #424]	@ (80011f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	429a      	cmp	r2, r3
 8001050:	d910      	bls.n	8001074 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001052:	4b67      	ldr	r3, [pc, #412]	@ (80011f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f023 0207 	bic.w	r2, r3, #7
 800105a:	4965      	ldr	r1, [pc, #404]	@ (80011f0 <HAL_RCC_ClockConfig+0x1c0>)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	4313      	orrs	r3, r2
 8001060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001062:	4b63      	ldr	r3, [pc, #396]	@ (80011f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	429a      	cmp	r2, r3
 800106e:	d001      	beq.n	8001074 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e0b8      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d020      	beq.n	80010c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0304 	and.w	r3, r3, #4
 8001088:	2b00      	cmp	r3, #0
 800108a:	d005      	beq.n	8001098 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800108c:	4b59      	ldr	r3, [pc, #356]	@ (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	4a58      	ldr	r2, [pc, #352]	@ (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001092:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001096:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0308 	and.w	r3, r3, #8
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d005      	beq.n	80010b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010a4:	4b53      	ldr	r3, [pc, #332]	@ (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	4a52      	ldr	r2, [pc, #328]	@ (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 80010aa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80010ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010b0:	4b50      	ldr	r3, [pc, #320]	@ (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	494d      	ldr	r1, [pc, #308]	@ (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 80010be:	4313      	orrs	r3, r2
 80010c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d040      	beq.n	8001150 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d107      	bne.n	80010e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d6:	4b47      	ldr	r3, [pc, #284]	@ (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d115      	bne.n	800110e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e07f      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d107      	bne.n	80010fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ee:	4b41      	ldr	r3, [pc, #260]	@ (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d109      	bne.n	800110e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e073      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010fe:	4b3d      	ldr	r3, [pc, #244]	@ (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e06b      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800110e:	4b39      	ldr	r3, [pc, #228]	@ (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f023 0203 	bic.w	r2, r3, #3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	4936      	ldr	r1, [pc, #216]	@ (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 800111c:	4313      	orrs	r3, r2
 800111e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001120:	f7ff fa5c 	bl	80005dc <HAL_GetTick>
 8001124:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001126:	e00a      	b.n	800113e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001128:	f7ff fa58 	bl	80005dc <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001136:	4293      	cmp	r3, r2
 8001138:	d901      	bls.n	800113e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e053      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800113e:	4b2d      	ldr	r3, [pc, #180]	@ (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 020c 	and.w	r2, r3, #12
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	429a      	cmp	r2, r3
 800114e:	d1eb      	bne.n	8001128 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001150:	4b27      	ldr	r3, [pc, #156]	@ (80011f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	429a      	cmp	r2, r3
 800115c:	d210      	bcs.n	8001180 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800115e:	4b24      	ldr	r3, [pc, #144]	@ (80011f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f023 0207 	bic.w	r2, r3, #7
 8001166:	4922      	ldr	r1, [pc, #136]	@ (80011f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	4313      	orrs	r3, r2
 800116c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800116e:	4b20      	ldr	r3, [pc, #128]	@ (80011f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	429a      	cmp	r2, r3
 800117a:	d001      	beq.n	8001180 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e032      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	2b00      	cmp	r3, #0
 800118a:	d008      	beq.n	800119e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800118c:	4b19      	ldr	r3, [pc, #100]	@ (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	4916      	ldr	r1, [pc, #88]	@ (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 800119a:	4313      	orrs	r3, r2
 800119c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0308 	and.w	r3, r3, #8
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d009      	beq.n	80011be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011aa:	4b12      	ldr	r3, [pc, #72]	@ (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	490e      	ldr	r1, [pc, #56]	@ (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 80011ba:	4313      	orrs	r3, r2
 80011bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011be:	f000 f821 	bl	8001204 <HAL_RCC_GetSysClockFreq>
 80011c2:	4602      	mov	r2, r0
 80011c4:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	091b      	lsrs	r3, r3, #4
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	490a      	ldr	r1, [pc, #40]	@ (80011f8 <HAL_RCC_ClockConfig+0x1c8>)
 80011d0:	5ccb      	ldrb	r3, [r1, r3]
 80011d2:	fa22 f303 	lsr.w	r3, r2, r3
 80011d6:	4a09      	ldr	r2, [pc, #36]	@ (80011fc <HAL_RCC_ClockConfig+0x1cc>)
 80011d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80011da:	4b09      	ldr	r3, [pc, #36]	@ (8001200 <HAL_RCC_ClockConfig+0x1d0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f9ba 	bl	8000558 <HAL_InitTick>

  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40022000 	.word	0x40022000
 80011f4:	40021000 	.word	0x40021000
 80011f8:	08003d04 	.word	0x08003d04
 80011fc:	20000000 	.word	0x20000000
 8001200:	20000004 	.word	0x20000004

08001204 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001204:	b480      	push	{r7}
 8001206:	b087      	sub	sp, #28
 8001208:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800121e:	4b1e      	ldr	r3, [pc, #120]	@ (8001298 <HAL_RCC_GetSysClockFreq+0x94>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f003 030c 	and.w	r3, r3, #12
 800122a:	2b04      	cmp	r3, #4
 800122c:	d002      	beq.n	8001234 <HAL_RCC_GetSysClockFreq+0x30>
 800122e:	2b08      	cmp	r3, #8
 8001230:	d003      	beq.n	800123a <HAL_RCC_GetSysClockFreq+0x36>
 8001232:	e027      	b.n	8001284 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001234:	4b19      	ldr	r3, [pc, #100]	@ (800129c <HAL_RCC_GetSysClockFreq+0x98>)
 8001236:	613b      	str	r3, [r7, #16]
      break;
 8001238:	e027      	b.n	800128a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	0c9b      	lsrs	r3, r3, #18
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	4a17      	ldr	r2, [pc, #92]	@ (80012a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001244:	5cd3      	ldrb	r3, [r2, r3]
 8001246:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d010      	beq.n	8001274 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001252:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <HAL_RCC_GetSysClockFreq+0x94>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	0c5b      	lsrs	r3, r3, #17
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	4a11      	ldr	r2, [pc, #68]	@ (80012a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800125e:	5cd3      	ldrb	r3, [r2, r3]
 8001260:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a0d      	ldr	r2, [pc, #52]	@ (800129c <HAL_RCC_GetSysClockFreq+0x98>)
 8001266:	fb03 f202 	mul.w	r2, r3, r2
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	e004      	b.n	800127e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a0c      	ldr	r2, [pc, #48]	@ (80012a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001278:	fb02 f303 	mul.w	r3, r2, r3
 800127c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	613b      	str	r3, [r7, #16]
      break;
 8001282:	e002      	b.n	800128a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001284:	4b05      	ldr	r3, [pc, #20]	@ (800129c <HAL_RCC_GetSysClockFreq+0x98>)
 8001286:	613b      	str	r3, [r7, #16]
      break;
 8001288:	bf00      	nop
    }
  }
  return sysclockfreq;
 800128a:	693b      	ldr	r3, [r7, #16]
}
 800128c:	4618      	mov	r0, r3
 800128e:	371c      	adds	r7, #28
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000
 800129c:	007a1200 	.word	0x007a1200
 80012a0:	08003d1c 	.word	0x08003d1c
 80012a4:	08003d2c 	.word	0x08003d2c
 80012a8:	003d0900 	.word	0x003d0900

080012ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012b0:	4b02      	ldr	r3, [pc, #8]	@ (80012bc <HAL_RCC_GetHCLKFreq+0x10>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	20000000 	.word	0x20000000

080012c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80012c4:	f7ff fff2 	bl	80012ac <HAL_RCC_GetHCLKFreq>
 80012c8:	4602      	mov	r2, r0
 80012ca:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	0a1b      	lsrs	r3, r3, #8
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	4903      	ldr	r1, [pc, #12]	@ (80012e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012d6:	5ccb      	ldrb	r3, [r1, r3]
 80012d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012dc:	4618      	mov	r0, r3
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40021000 	.word	0x40021000
 80012e4:	08003d14 	.word	0x08003d14

080012e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80012ec:	f7ff ffde 	bl	80012ac <HAL_RCC_GetHCLKFreq>
 80012f0:	4602      	mov	r2, r0
 80012f2:	4b05      	ldr	r3, [pc, #20]	@ (8001308 <HAL_RCC_GetPCLK2Freq+0x20>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	0adb      	lsrs	r3, r3, #11
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	4903      	ldr	r1, [pc, #12]	@ (800130c <HAL_RCC_GetPCLK2Freq+0x24>)
 80012fe:	5ccb      	ldrb	r3, [r1, r3]
 8001300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001304:	4618      	mov	r0, r3
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40021000 	.word	0x40021000
 800130c:	08003d14 	.word	0x08003d14

08001310 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001318:	4b0a      	ldr	r3, [pc, #40]	@ (8001344 <RCC_Delay+0x34>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a0a      	ldr	r2, [pc, #40]	@ (8001348 <RCC_Delay+0x38>)
 800131e:	fba2 2303 	umull	r2, r3, r2, r3
 8001322:	0a5b      	lsrs	r3, r3, #9
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	fb02 f303 	mul.w	r3, r2, r3
 800132a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800132c:	bf00      	nop
  }
  while (Delay --);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	1e5a      	subs	r2, r3, #1
 8001332:	60fa      	str	r2, [r7, #12]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1f9      	bne.n	800132c <RCC_Delay+0x1c>
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr
 8001344:	20000000 	.word	0x20000000
 8001348:	10624dd3 	.word	0x10624dd3

0800134c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e042      	b.n	80013e4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d106      	bne.n	8001378 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff f80c 	bl	8000390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2224      	movs	r2, #36	@ 0x24
 800137c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68da      	ldr	r2, [r3, #12]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800138e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f000 f82b 	bl	80013ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	691a      	ldr	r2, [r3, #16]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80013a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	695a      	ldr	r2, [r3, #20]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80013b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	68da      	ldr	r2, [r3, #12]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80013c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2220      	movs	r2, #32
 80013d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2220      	movs	r2, #32
 80013d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68da      	ldr	r2, [r3, #12]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	430a      	orrs	r2, r1
 8001408:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	431a      	orrs	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	695b      	ldr	r3, [r3, #20]
 8001418:	4313      	orrs	r3, r2
 800141a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001426:	f023 030c 	bic.w	r3, r3, #12
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	6812      	ldr	r2, [r2, #0]
 800142e:	68b9      	ldr	r1, [r7, #8]
 8001430:	430b      	orrs	r3, r1
 8001432:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	699a      	ldr	r2, [r3, #24]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	430a      	orrs	r2, r1
 8001448:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a2c      	ldr	r2, [pc, #176]	@ (8001500 <UART_SetConfig+0x114>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d103      	bne.n	800145c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001454:	f7ff ff48 	bl	80012e8 <HAL_RCC_GetPCLK2Freq>
 8001458:	60f8      	str	r0, [r7, #12]
 800145a:	e002      	b.n	8001462 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800145c:	f7ff ff30 	bl	80012c0 <HAL_RCC_GetPCLK1Freq>
 8001460:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	009a      	lsls	r2, r3, #2
 800146c:	441a      	add	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	fbb2 f3f3 	udiv	r3, r2, r3
 8001478:	4a22      	ldr	r2, [pc, #136]	@ (8001504 <UART_SetConfig+0x118>)
 800147a:	fba2 2303 	umull	r2, r3, r2, r3
 800147e:	095b      	lsrs	r3, r3, #5
 8001480:	0119      	lsls	r1, r3, #4
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	009a      	lsls	r2, r3, #2
 800148c:	441a      	add	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	fbb2 f2f3 	udiv	r2, r2, r3
 8001498:	4b1a      	ldr	r3, [pc, #104]	@ (8001504 <UART_SetConfig+0x118>)
 800149a:	fba3 0302 	umull	r0, r3, r3, r2
 800149e:	095b      	lsrs	r3, r3, #5
 80014a0:	2064      	movs	r0, #100	@ 0x64
 80014a2:	fb00 f303 	mul.w	r3, r0, r3
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	011b      	lsls	r3, r3, #4
 80014aa:	3332      	adds	r3, #50	@ 0x32
 80014ac:	4a15      	ldr	r2, [pc, #84]	@ (8001504 <UART_SetConfig+0x118>)
 80014ae:	fba2 2303 	umull	r2, r3, r2, r3
 80014b2:	095b      	lsrs	r3, r3, #5
 80014b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014b8:	4419      	add	r1, r3
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	4613      	mov	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	009a      	lsls	r2, r3, #2
 80014c4:	441a      	add	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80014d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <UART_SetConfig+0x118>)
 80014d2:	fba3 0302 	umull	r0, r3, r3, r2
 80014d6:	095b      	lsrs	r3, r3, #5
 80014d8:	2064      	movs	r0, #100	@ 0x64
 80014da:	fb00 f303 	mul.w	r3, r0, r3
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	011b      	lsls	r3, r3, #4
 80014e2:	3332      	adds	r3, #50	@ 0x32
 80014e4:	4a07      	ldr	r2, [pc, #28]	@ (8001504 <UART_SetConfig+0x118>)
 80014e6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ea:	095b      	lsrs	r3, r3, #5
 80014ec:	f003 020f 	and.w	r2, r3, #15
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	440a      	add	r2, r1
 80014f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80014f8:	bf00      	nop
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40013800 	.word	0x40013800
 8001504:	51eb851f 	.word	0x51eb851f

08001508 <app_init>:

task_dta_t task_dta_list[TASK_QTY];

/********************** external functions definition ************************/
void app_init(void)
{
 8001508:	b590      	push	{r4, r7, lr}
 800150a:	b085      	sub	sp, #20
 800150c:	af02      	add	r7, sp, #8
	uint32_t index;

	/* Print out: Application Initialized */
	LOGGER_LOG("\r\n");
 800150e:	b672      	cpsid	i
 8001510:	4b4a      	ldr	r3, [pc, #296]	@ (800163c <app_init+0x134>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a4a      	ldr	r2, [pc, #296]	@ (8001640 <app_init+0x138>)
 8001516:	213f      	movs	r1, #63	@ 0x3f
 8001518:	4618      	mov	r0, r3
 800151a:	f001 fa8d 	bl	8002a38 <sniprintf>
 800151e:	4603      	mov	r3, r0
 8001520:	4a48      	ldr	r2, [pc, #288]	@ (8001644 <app_init+0x13c>)
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	4b45      	ldr	r3, [pc, #276]	@ (800163c <app_init+0x134>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f000 f92b 	bl	8001784 <logger_log_print_>
 800152e:	b662      	cpsie	i
	LOGGER_LOG("%s is running - Tick [mS] = %lu\r\n", GET_NAME(app_init), HAL_GetTick());
 8001530:	b672      	cpsid	i
 8001532:	4b42      	ldr	r3, [pc, #264]	@ (800163c <app_init+0x134>)
 8001534:	681c      	ldr	r4, [r3, #0]
 8001536:	f7ff f851 	bl	80005dc <HAL_GetTick>
 800153a:	4603      	mov	r3, r0
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	4b42      	ldr	r3, [pc, #264]	@ (8001648 <app_init+0x140>)
 8001540:	4a42      	ldr	r2, [pc, #264]	@ (800164c <app_init+0x144>)
 8001542:	213f      	movs	r1, #63	@ 0x3f
 8001544:	4620      	mov	r0, r4
 8001546:	f001 fa77 	bl	8002a38 <sniprintf>
 800154a:	4603      	mov	r3, r0
 800154c:	4a3d      	ldr	r2, [pc, #244]	@ (8001644 <app_init+0x13c>)
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	4b3a      	ldr	r3, [pc, #232]	@ (800163c <app_init+0x134>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f000 f915 	bl	8001784 <logger_log_print_>
 800155a:	b662      	cpsie	i

	LOGGER_LOG(p_sys);
 800155c:	b672      	cpsid	i
 800155e:	4b37      	ldr	r3, [pc, #220]	@ (800163c <app_init+0x134>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a3b      	ldr	r2, [pc, #236]	@ (8001650 <app_init+0x148>)
 8001564:	6812      	ldr	r2, [r2, #0]
 8001566:	213f      	movs	r1, #63	@ 0x3f
 8001568:	4618      	mov	r0, r3
 800156a:	f001 fa65 	bl	8002a38 <sniprintf>
 800156e:	4603      	mov	r3, r0
 8001570:	4a34      	ldr	r2, [pc, #208]	@ (8001644 <app_init+0x13c>)
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	4b31      	ldr	r3, [pc, #196]	@ (800163c <app_init+0x134>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f000 f903 	bl	8001784 <logger_log_print_>
 800157e:	b662      	cpsie	i
	LOGGER_LOG(p_app);
 8001580:	b672      	cpsid	i
 8001582:	4b2e      	ldr	r3, [pc, #184]	@ (800163c <app_init+0x134>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a33      	ldr	r2, [pc, #204]	@ (8001654 <app_init+0x14c>)
 8001588:	6812      	ldr	r2, [r2, #0]
 800158a:	213f      	movs	r1, #63	@ 0x3f
 800158c:	4618      	mov	r0, r3
 800158e:	f001 fa53 	bl	8002a38 <sniprintf>
 8001592:	4603      	mov	r3, r0
 8001594:	4a2b      	ldr	r2, [pc, #172]	@ (8001644 <app_init+0x13c>)
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	4b28      	ldr	r3, [pc, #160]	@ (800163c <app_init+0x134>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f000 f8f1 	bl	8001784 <logger_log_print_>
 80015a2:	b662      	cpsie	i

	g_app_cnt = G_APP_CNT_INI;
 80015a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001658 <app_init+0x150>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]

	/* Print out: Application execution counter */
	LOGGER_LOG(" %s = %lu\r\n", GET_NAME(g_app_cnt), g_app_cnt);
 80015aa:	b672      	cpsid	i
 80015ac:	4b23      	ldr	r3, [pc, #140]	@ (800163c <app_init+0x134>)
 80015ae:	6818      	ldr	r0, [r3, #0]
 80015b0:	4b29      	ldr	r3, [pc, #164]	@ (8001658 <app_init+0x150>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	4b29      	ldr	r3, [pc, #164]	@ (800165c <app_init+0x154>)
 80015b8:	4a29      	ldr	r2, [pc, #164]	@ (8001660 <app_init+0x158>)
 80015ba:	213f      	movs	r1, #63	@ 0x3f
 80015bc:	f001 fa3c 	bl	8002a38 <sniprintf>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4a20      	ldr	r2, [pc, #128]	@ (8001644 <app_init+0x13c>)
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	4b1d      	ldr	r3, [pc, #116]	@ (800163c <app_init+0x134>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 f8da 	bl	8001784 <logger_log_print_>
 80015d0:	b662      	cpsie	i

	/* Go through the task arrays */
	for (index = 0; TASK_QTY > index; index++)
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	e01a      	b.n	800160e <app_init+0x106>
	{
		/* Run task_x_init */
		(*task_cfg_list[index].task_init)(task_cfg_list[index].parameters);
 80015d8:	4922      	ldr	r1, [pc, #136]	@ (8001664 <app_init+0x15c>)
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	4613      	mov	r3, r2
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	4413      	add	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	440b      	add	r3, r1
 80015e6:	6819      	ldr	r1, [r3, #0]
 80015e8:	481e      	ldr	r0, [pc, #120]	@ (8001664 <app_init+0x15c>)
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	4613      	mov	r3, r2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4413      	add	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4403      	add	r3, r0
 80015f6:	3308      	adds	r3, #8
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	4788      	blx	r1

		/* Init variables */
		task_dta_list[index].WCET = TASK_X_WCET_INI;
 80015fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001668 <app_init+0x160>)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2100      	movs	r1, #0
 8001604:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (index = 0; TASK_QTY > index; index++)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3301      	adds	r3, #1
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b02      	cmp	r3, #2
 8001612:	d9e1      	bls.n	80015d8 <app_init+0xd0>
	}

	cycle_counter_init();
 8001614:	4b15      	ldr	r3, [pc, #84]	@ (800166c <app_init+0x164>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	4a14      	ldr	r2, [pc, #80]	@ (800166c <app_init+0x164>)
 800161a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800161e:	60d3      	str	r3, [r2, #12]
 8001620:	4b13      	ldr	r3, [pc, #76]	@ (8001670 <app_init+0x168>)
 8001622:	2200      	movs	r2, #0
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	4b12      	ldr	r3, [pc, #72]	@ (8001670 <app_init+0x168>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a11      	ldr	r2, [pc, #68]	@ (8001670 <app_init+0x168>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6013      	str	r3, [r2, #0]
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	bd90      	pop	{r4, r7, pc}
 800163a:	bf00      	nop
 800163c:	08003d54 	.word	0x08003d54
 8001640:	080039ec 	.word	0x080039ec
 8001644:	2000015c 	.word	0x2000015c
 8001648:	080039f0 	.word	0x080039f0
 800164c:	080039fc 	.word	0x080039fc
 8001650:	2000000c 	.word	0x2000000c
 8001654:	20000010 	.word	0x20000010
 8001658:	20000104 	.word	0x20000104
 800165c:	08003a20 	.word	0x08003a20
 8001660:	08003a2c 	.word	0x08003a2c
 8001664:	08003d30 	.word	0x08003d30
 8001668:	20000110 	.word	0x20000110
 800166c:	e000edf0 	.word	0xe000edf0
 8001670:	e0001000 	.word	0xe0001000

08001674 <app_update>:

void app_update(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
	uint32_t index;
	uint32_t cycle_counter_time_us;

	/* Check if it's time to run tasks */
	if (G_APP_TICK_CNT_INI < g_app_tick_cnt)
 800167a:	4b29      	ldr	r3, [pc, #164]	@ (8001720 <app_update+0xac>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d049      	beq.n	8001716 <app_update+0xa2>
    {
    	g_app_tick_cnt--;
 8001682:	4b27      	ldr	r3, [pc, #156]	@ (8001720 <app_update+0xac>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	3b01      	subs	r3, #1
 8001688:	4a25      	ldr	r2, [pc, #148]	@ (8001720 <app_update+0xac>)
 800168a:	6013      	str	r3, [r2, #0]

    	/* Update App Counter */
    	g_app_cnt++;
 800168c:	4b25      	ldr	r3, [pc, #148]	@ (8001724 <app_update+0xb0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	3301      	adds	r3, #1
 8001692:	4a24      	ldr	r2, [pc, #144]	@ (8001724 <app_update+0xb0>)
 8001694:	6013      	str	r3, [r2, #0]
    	g_app_time_us = 0;
 8001696:	4b24      	ldr	r3, [pc, #144]	@ (8001728 <app_update+0xb4>)
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]

    	/* Go through the task arrays */
    	for (index = 0; TASK_QTY > index; index++)
 800169c:	2300      	movs	r3, #0
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	e036      	b.n	8001710 <app_update+0x9c>
    	{
			cycle_counter_reset();
 80016a2:	4b22      	ldr	r3, [pc, #136]	@ (800172c <app_update+0xb8>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	605a      	str	r2, [r3, #4]

    		/* Run task_x_update */
			(*task_cfg_list[index].task_update)(task_cfg_list[index].parameters);
 80016a8:	4921      	ldr	r1, [pc, #132]	@ (8001730 <app_update+0xbc>)
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	4613      	mov	r3, r2
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	4413      	add	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	440b      	add	r3, r1
 80016b6:	3304      	adds	r3, #4
 80016b8:	6819      	ldr	r1, [r3, #0]
 80016ba:	481d      	ldr	r0, [pc, #116]	@ (8001730 <app_update+0xbc>)
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4403      	add	r3, r0
 80016c8:	3308      	adds	r3, #8
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	4788      	blx	r1

			cycle_counter_time_us = cycle_counter_time_us();
 80016d0:	4b16      	ldr	r3, [pc, #88]	@ (800172c <app_update+0xb8>)
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <app_update+0xc0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4917      	ldr	r1, [pc, #92]	@ (8001738 <app_update+0xc4>)
 80016da:	fba1 1303 	umull	r1, r3, r1, r3
 80016de:	0c9b      	lsrs	r3, r3, #18
 80016e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e4:	603b      	str	r3, [r7, #0]

			/* Update variables */
	    	g_app_time_us += cycle_counter_time_us;
 80016e6:	4b10      	ldr	r3, [pc, #64]	@ (8001728 <app_update+0xb4>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	4413      	add	r3, r2
 80016ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001728 <app_update+0xb4>)
 80016f0:	6013      	str	r3, [r2, #0]

			if (task_dta_list[index].WCET < cycle_counter_time_us)
 80016f2:	4a12      	ldr	r2, [pc, #72]	@ (800173c <app_update+0xc8>)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d904      	bls.n	800170a <app_update+0x96>
			{
				task_dta_list[index].WCET = cycle_counter_time_us;
 8001700:	490e      	ldr	r1, [pc, #56]	@ (800173c <app_update+0xc8>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	for (index = 0; TASK_QTY > index; index++)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3301      	adds	r3, #1
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b02      	cmp	r3, #2
 8001714:	d9c5      	bls.n	80016a2 <app_update+0x2e>
			}
	    }
    }
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	2000010c 	.word	0x2000010c
 8001724:	20000104 	.word	0x20000104
 8001728:	20000108 	.word	0x20000108
 800172c:	e0001000 	.word	0xe0001000
 8001730:	08003d30 	.word	0x08003d30
 8001734:	20000000 	.word	0x20000000
 8001738:	431bde83 	.word	0x431bde83
 800173c:	20000110 	.word	0x20000110

08001740 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
	g_app_tick_cnt++;
 8001744:	4b0b      	ldr	r3, [pc, #44]	@ (8001774 <HAL_SYSTICK_Callback+0x34>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	3301      	adds	r3, #1
 800174a:	4a0a      	ldr	r2, [pc, #40]	@ (8001774 <HAL_SYSTICK_Callback+0x34>)
 800174c:	6013      	str	r3, [r2, #0]

	g_task_sensor_tick_cnt++;
 800174e:	4b0a      	ldr	r3, [pc, #40]	@ (8001778 <HAL_SYSTICK_Callback+0x38>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	3301      	adds	r3, #1
 8001754:	4a08      	ldr	r2, [pc, #32]	@ (8001778 <HAL_SYSTICK_Callback+0x38>)
 8001756:	6013      	str	r3, [r2, #0]
	g_task_system_tick_cnt++;
 8001758:	4b08      	ldr	r3, [pc, #32]	@ (800177c <HAL_SYSTICK_Callback+0x3c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	3301      	adds	r3, #1
 800175e:	4a07      	ldr	r2, [pc, #28]	@ (800177c <HAL_SYSTICK_Callback+0x3c>)
 8001760:	6013      	str	r3, [r2, #0]
	g_task_actuator_tick_cnt++;
 8001762:	4b07      	ldr	r3, [pc, #28]	@ (8001780 <HAL_SYSTICK_Callback+0x40>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	3301      	adds	r3, #1
 8001768:	4a05      	ldr	r2, [pc, #20]	@ (8001780 <HAL_SYSTICK_Callback+0x40>)
 800176a:	6013      	str	r3, [r2, #0]
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	2000010c 	.word	0x2000010c
 8001778:	20000174 	.word	0x20000174
 800177c:	20000184 	.word	0x20000184
 8001780:	20000164 	.word	0x20000164

08001784 <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	printf(msg);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f001 f941 	bl	8002a14 <iprintf>
	fflush(stdout);
 8001792:	4b05      	ldr	r3, [pc, #20]	@ (80017a8 <logger_log_print_+0x24>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	4618      	mov	r0, r3
 800179a:	f001 f865 	bl	8002868 <fflush>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000048 	.word	0x20000048

080017ac <task_actuator_init>:
uint32_t g_task_actuator_cnt;
volatile uint32_t g_task_actuator_tick_cnt;

/********************** external functions definition ************************/
void task_actuator_init(void *parameters)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af02      	add	r7, sp, #8
 80017b2:	6078      	str	r0, [r7, #4]
	task_actuator_st_t state;
	task_actuator_ev_t event;
	bool b_event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_actuator_init), p_task_actuator);
 80017b4:	b672      	cpsid	i
 80017b6:	4b5f      	ldr	r3, [pc, #380]	@ (8001934 <task_actuator_init+0x188>)
 80017b8:	6818      	ldr	r0, [r3, #0]
 80017ba:	4b5f      	ldr	r3, [pc, #380]	@ (8001938 <task_actuator_init+0x18c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	4b5e      	ldr	r3, [pc, #376]	@ (800193c <task_actuator_init+0x190>)
 80017c2:	4a5f      	ldr	r2, [pc, #380]	@ (8001940 <task_actuator_init+0x194>)
 80017c4:	213f      	movs	r1, #63	@ 0x3f
 80017c6:	f001 f937 	bl	8002a38 <sniprintf>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4a5d      	ldr	r2, [pc, #372]	@ (8001944 <task_actuator_init+0x198>)
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	4b58      	ldr	r3, [pc, #352]	@ (8001934 <task_actuator_init+0x188>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ffd5 	bl	8001784 <logger_log_print_>
 80017da:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_actuator), p_task_actuator_);
 80017dc:	b672      	cpsid	i
 80017de:	4b55      	ldr	r3, [pc, #340]	@ (8001934 <task_actuator_init+0x188>)
 80017e0:	6818      	ldr	r0, [r3, #0]
 80017e2:	4b59      	ldr	r3, [pc, #356]	@ (8001948 <task_actuator_init+0x19c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	4b58      	ldr	r3, [pc, #352]	@ (800194c <task_actuator_init+0x1a0>)
 80017ea:	4a59      	ldr	r2, [pc, #356]	@ (8001950 <task_actuator_init+0x1a4>)
 80017ec:	213f      	movs	r1, #63	@ 0x3f
 80017ee:	f001 f923 	bl	8002a38 <sniprintf>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4a53      	ldr	r2, [pc, #332]	@ (8001944 <task_actuator_init+0x198>)
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	4b4e      	ldr	r3, [pc, #312]	@ (8001934 <task_actuator_init+0x188>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ffc1 	bl	8001784 <logger_log_print_>
 8001802:	b662      	cpsie	i

	g_task_actuator_cnt = G_TASK_ACT_CNT_INIT;
 8001804:	4b53      	ldr	r3, [pc, #332]	@ (8001954 <task_actuator_init+0x1a8>)
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_actuator_cnt), g_task_actuator_cnt);
 800180a:	b672      	cpsid	i
 800180c:	4b49      	ldr	r3, [pc, #292]	@ (8001934 <task_actuator_init+0x188>)
 800180e:	6818      	ldr	r0, [r3, #0]
 8001810:	4b50      	ldr	r3, [pc, #320]	@ (8001954 <task_actuator_init+0x1a8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	4b50      	ldr	r3, [pc, #320]	@ (8001958 <task_actuator_init+0x1ac>)
 8001818:	4a50      	ldr	r2, [pc, #320]	@ (800195c <task_actuator_init+0x1b0>)
 800181a:	213f      	movs	r1, #63	@ 0x3f
 800181c:	f001 f90c 	bl	8002a38 <sniprintf>
 8001820:	4603      	mov	r3, r0
 8001822:	4a48      	ldr	r2, [pc, #288]	@ (8001944 <task_actuator_init+0x198>)
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	4b43      	ldr	r3, [pc, #268]	@ (8001934 <task_actuator_init+0x188>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff ffaa 	bl	8001784 <logger_log_print_>
 8001830:	b662      	cpsie	i

	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	e072      	b.n	800191e <task_actuator_init+0x172>
	{
		/* Update Task Actuator Configuration & Data Pointer */
		p_task_actuator_cfg = &task_actuator_cfg_list[index];
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4a47      	ldr	r2, [pc, #284]	@ (8001960 <task_actuator_init+0x1b4>)
 8001844:	4413      	add	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
		p_task_actuator_dta = &task_actuator_dta_list[index];
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	4a45      	ldr	r2, [pc, #276]	@ (8001964 <task_actuator_init+0x1b8>)
 800184e:	4413      	add	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]

		/* Print out: Index & Task execution FSM */
		LOGGER_LOG("   %s = %lu", GET_NAME(index), index);
 8001852:	b672      	cpsid	i
 8001854:	4b37      	ldr	r3, [pc, #220]	@ (8001934 <task_actuator_init+0x188>)
 8001856:	6818      	ldr	r0, [r3, #0]
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	4b42      	ldr	r3, [pc, #264]	@ (8001968 <task_actuator_init+0x1bc>)
 800185e:	4a43      	ldr	r2, [pc, #268]	@ (800196c <task_actuator_init+0x1c0>)
 8001860:	213f      	movs	r1, #63	@ 0x3f
 8001862:	f001 f8e9 	bl	8002a38 <sniprintf>
 8001866:	4603      	mov	r3, r0
 8001868:	4a36      	ldr	r2, [pc, #216]	@ (8001944 <task_actuator_init+0x198>)
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	4b31      	ldr	r3, [pc, #196]	@ (8001934 <task_actuator_init+0x188>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff87 	bl	8001784 <logger_log_print_>
 8001876:	b662      	cpsie	i

		state = p_task_actuator_dta->state;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	791b      	ldrb	r3, [r3, #4]
 800187c:	72fb      	strb	r3, [r7, #11]
		LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 800187e:	b672      	cpsid	i
 8001880:	4b2c      	ldr	r3, [pc, #176]	@ (8001934 <task_actuator_init+0x188>)
 8001882:	6818      	ldr	r0, [r3, #0]
 8001884:	7afb      	ldrb	r3, [r7, #11]
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	4b39      	ldr	r3, [pc, #228]	@ (8001970 <task_actuator_init+0x1c4>)
 800188a:	4a38      	ldr	r2, [pc, #224]	@ (800196c <task_actuator_init+0x1c0>)
 800188c:	213f      	movs	r1, #63	@ 0x3f
 800188e:	f001 f8d3 	bl	8002a38 <sniprintf>
 8001892:	4603      	mov	r3, r0
 8001894:	4a2b      	ldr	r2, [pc, #172]	@ (8001944 <task_actuator_init+0x198>)
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	4b26      	ldr	r3, [pc, #152]	@ (8001934 <task_actuator_init+0x188>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff71 	bl	8001784 <logger_log_print_>
 80018a2:	b662      	cpsie	i

		event = p_task_actuator_dta->event;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	795b      	ldrb	r3, [r3, #5]
 80018a8:	72bb      	strb	r3, [r7, #10]
		LOGGER_LOG("   %s = %lu", GET_NAME(event), (uint32_t)event);
 80018aa:	b672      	cpsid	i
 80018ac:	4b21      	ldr	r3, [pc, #132]	@ (8001934 <task_actuator_init+0x188>)
 80018ae:	6818      	ldr	r0, [r3, #0]
 80018b0:	7abb      	ldrb	r3, [r7, #10]
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001974 <task_actuator_init+0x1c8>)
 80018b6:	4a2d      	ldr	r2, [pc, #180]	@ (800196c <task_actuator_init+0x1c0>)
 80018b8:	213f      	movs	r1, #63	@ 0x3f
 80018ba:	f001 f8bd 	bl	8002a38 <sniprintf>
 80018be:	4603      	mov	r3, r0
 80018c0:	4a20      	ldr	r2, [pc, #128]	@ (8001944 <task_actuator_init+0x198>)
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001934 <task_actuator_init+0x188>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff5b 	bl	8001784 <logger_log_print_>
 80018ce:	b662      	cpsie	i

		b_event = p_task_actuator_dta->flag;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	799b      	ldrb	r3, [r3, #6]
 80018d4:	727b      	strb	r3, [r7, #9]
		LOGGER_LOG("   %s = %s\r\n", GET_NAME(b_event), (b_event ? "true" : "false"));
 80018d6:	b672      	cpsid	i
 80018d8:	4b16      	ldr	r3, [pc, #88]	@ (8001934 <task_actuator_init+0x188>)
 80018da:	6818      	ldr	r0, [r3, #0]
 80018dc:	7a7b      	ldrb	r3, [r7, #9]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <task_actuator_init+0x13a>
 80018e2:	4b25      	ldr	r3, [pc, #148]	@ (8001978 <task_actuator_init+0x1cc>)
 80018e4:	e000      	b.n	80018e8 <task_actuator_init+0x13c>
 80018e6:	4b25      	ldr	r3, [pc, #148]	@ (800197c <task_actuator_init+0x1d0>)
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	4b25      	ldr	r3, [pc, #148]	@ (8001980 <task_actuator_init+0x1d4>)
 80018ec:	4a25      	ldr	r2, [pc, #148]	@ (8001984 <task_actuator_init+0x1d8>)
 80018ee:	213f      	movs	r1, #63	@ 0x3f
 80018f0:	f001 f8a2 	bl	8002a38 <sniprintf>
 80018f4:	4603      	mov	r3, r0
 80018f6:	4a13      	ldr	r2, [pc, #76]	@ (8001944 <task_actuator_init+0x198>)
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001934 <task_actuator_init+0x188>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff ff40 	bl	8001784 <logger_log_print_>
 8001904:	b662      	cpsie	i

		HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	6858      	ldr	r0, [r3, #4]
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	8919      	ldrh	r1, [r3, #8]
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	7adb      	ldrb	r3, [r3, #11]
 8001912:	461a      	mov	r2, r3
 8001914:	f7ff f8f1 	bl	8000afa <HAL_GPIO_WritePin>
	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	3301      	adds	r3, #1
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d089      	beq.n	8001838 <task_actuator_init+0x8c>
	}

	g_task_actuator_tick_cnt = G_TASK_ACT_TICK_CNT_INI;
 8001924:	4b18      	ldr	r3, [pc, #96]	@ (8001988 <task_actuator_init+0x1dc>)
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
}
 800192a:	bf00      	nop
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	08003d54 	.word	0x08003d54
 8001938:	2000001c 	.word	0x2000001c
 800193c:	08003a80 	.word	0x08003a80
 8001940:	08003a94 	.word	0x08003a94
 8001944:	2000015c 	.word	0x2000015c
 8001948:	20000020 	.word	0x20000020
 800194c:	08003aac 	.word	0x08003aac
 8001950:	08003abc 	.word	0x08003abc
 8001954:	20000160 	.word	0x20000160
 8001958:	08003acc 	.word	0x08003acc
 800195c:	08003ae0 	.word	0x08003ae0
 8001960:	08003d58 	.word	0x08003d58
 8001964:	20000014 	.word	0x20000014
 8001968:	08003af0 	.word	0x08003af0
 800196c:	08003af8 	.word	0x08003af8
 8001970:	08003b04 	.word	0x08003b04
 8001974:	08003b0c 	.word	0x08003b0c
 8001978:	08003b14 	.word	0x08003b14
 800197c:	08003b1c 	.word	0x08003b1c
 8001980:	08003b24 	.word	0x08003b24
 8001984:	08003b2c 	.word	0x08003b2c
 8001988:	20000164 	.word	0x20000164

0800198c <task_actuator_update>:

void task_actuator_update(void *parameters)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	uint32_t index;
	const task_actuator_cfg_t *p_task_actuator_cfg;
	task_actuator_dta_t *p_task_actuator_dta;
	bool b_time_update_required = false;
 8001994:	2300      	movs	r3, #0
 8001996:	74fb      	strb	r3, [r7, #19]

	/* Update Task Actuator Counter */
	g_task_actuator_cnt++;
 8001998:	4b43      	ldr	r3, [pc, #268]	@ (8001aa8 <task_actuator_update+0x11c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	3301      	adds	r3, #1
 800199e:	4a42      	ldr	r2, [pc, #264]	@ (8001aa8 <task_actuator_update+0x11c>)
 80019a0:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_actuator_tick_cnt) */
	__asm("CPSID i");	/* disable interrupts*/
 80019a2:	b672      	cpsid	i
    if (G_TASK_ACT_TICK_CNT_INI < g_task_actuator_tick_cnt)
 80019a4:	4b41      	ldr	r3, [pc, #260]	@ (8001aac <task_actuator_update+0x120>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d006      	beq.n	80019ba <task_actuator_update+0x2e>
    {
    	g_task_actuator_tick_cnt--;
 80019ac:	4b3f      	ldr	r3, [pc, #252]	@ (8001aac <task_actuator_update+0x120>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	3b01      	subs	r3, #1
 80019b2:	4a3e      	ldr	r2, [pc, #248]	@ (8001aac <task_actuator_update+0x120>)
 80019b4:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 80019b6:	2301      	movs	r3, #1
 80019b8:	74fb      	strb	r3, [r7, #19]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 80019ba:	b662      	cpsie	i

    while (b_time_update_required)
 80019bc:	e06b      	b.n	8001a96 <task_actuator_update+0x10a>
    {
		/* Protect shared resource (g_task_actuator_tick_cnt) */
		__asm("CPSID i");	/* disable interrupts*/
 80019be:	b672      	cpsid	i
		if (G_TASK_ACT_TICK_CNT_INI < g_task_actuator_tick_cnt)
 80019c0:	4b3a      	ldr	r3, [pc, #232]	@ (8001aac <task_actuator_update+0x120>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d007      	beq.n	80019d8 <task_actuator_update+0x4c>
		{
			g_task_actuator_tick_cnt--;
 80019c8:	4b38      	ldr	r3, [pc, #224]	@ (8001aac <task_actuator_update+0x120>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	3b01      	subs	r3, #1
 80019ce:	4a37      	ldr	r2, [pc, #220]	@ (8001aac <task_actuator_update+0x120>)
 80019d0:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 80019d2:	2301      	movs	r3, #1
 80019d4:	74fb      	strb	r3, [r7, #19]
 80019d6:	e001      	b.n	80019dc <task_actuator_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 80019d8:	2300      	movs	r3, #0
 80019da:	74fb      	strb	r3, [r7, #19]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 80019dc:	b662      	cpsie	i

    	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	e055      	b.n	8001a90 <task_actuator_update+0x104>
		{
    		/* Update Task Actuator Configuration & Data Pointer */
			p_task_actuator_cfg = &task_actuator_cfg_list[index];
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4a30      	ldr	r2, [pc, #192]	@ (8001ab0 <task_actuator_update+0x124>)
 80019f0:	4413      	add	r3, r2
 80019f2:	60fb      	str	r3, [r7, #12]
			p_task_actuator_dta = &task_actuator_dta_list[index];
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4a2e      	ldr	r2, [pc, #184]	@ (8001ab4 <task_actuator_update+0x128>)
 80019fa:	4413      	add	r3, r2
 80019fc:	60bb      	str	r3, [r7, #8]

			switch (p_task_actuator_dta->state)
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	791b      	ldrb	r3, [r3, #4]
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d83c      	bhi.n	8001a80 <task_actuator_update+0xf4>
 8001a06:	a201      	add	r2, pc, #4	@ (adr r2, 8001a0c <task_actuator_update+0x80>)
 8001a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a0c:	08001a21 	.word	0x08001a21
 8001a10:	08001a51 	.word	0x08001a51
 8001a14:	08001a81 	.word	0x08001a81
 8001a18:	08001a81 	.word	0x08001a81
 8001a1c:	08001a81 	.word	0x08001a81
			{
				case ST_LED_XX_OFF:

					if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_ON == p_task_actuator_dta->event))
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	799b      	ldrb	r3, [r3, #6]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d02d      	beq.n	8001a84 <task_actuator_update+0xf8>
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	795b      	ldrb	r3, [r3, #5]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d129      	bne.n	8001a84 <task_actuator_update+0xf8>
					{
						p_task_actuator_dta->flag = false;
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	2200      	movs	r2, #0
 8001a34:	719a      	strb	r2, [r3, #6]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_on);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6858      	ldr	r0, [r3, #4]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	8919      	ldrh	r1, [r3, #8]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	7a9b      	ldrb	r3, [r3, #10]
 8001a42:	461a      	mov	r2, r3
 8001a44:	f7ff f859 	bl	8000afa <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_ON;
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	711a      	strb	r2, [r3, #4]
					}

					break;
 8001a4e:	e019      	b.n	8001a84 <task_actuator_update+0xf8>

				case ST_LED_XX_ON:

					if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_OFF == p_task_actuator_dta->event))
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	799b      	ldrb	r3, [r3, #6]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d017      	beq.n	8001a88 <task_actuator_update+0xfc>
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	795b      	ldrb	r3, [r3, #5]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d113      	bne.n	8001a88 <task_actuator_update+0xfc>
					{
						p_task_actuator_dta->flag = false;
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	2200      	movs	r2, #0
 8001a64:	719a      	strb	r2, [r3, #6]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6858      	ldr	r0, [r3, #4]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	8919      	ldrh	r1, [r3, #8]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	7adb      	ldrb	r3, [r3, #11]
 8001a72:	461a      	mov	r2, r3
 8001a74:	f7ff f841 	bl	8000afa <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_OFF;
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	711a      	strb	r2, [r3, #4]
					}

					break;
 8001a7e:	e003      	b.n	8001a88 <task_actuator_update+0xfc>

					break;

				default:

					break;
 8001a80:	bf00      	nop
 8001a82:	e002      	b.n	8001a8a <task_actuator_update+0xfe>
					break;
 8001a84:	bf00      	nop
 8001a86:	e000      	b.n	8001a8a <task_actuator_update+0xfe>
					break;
 8001a88:	bf00      	nop
    	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0a6      	beq.n	80019e4 <task_actuator_update+0x58>
    while (b_time_update_required)
 8001a96:	7cfb      	ldrb	r3, [r7, #19]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d190      	bne.n	80019be <task_actuator_update+0x32>
			}
		}
    }
}
 8001a9c:	bf00      	nop
 8001a9e:	bf00      	nop
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000160 	.word	0x20000160
 8001aac:	20000164 	.word	0x20000164
 8001ab0:	08003d58 	.word	0x08003d58
 8001ab4:	20000014 	.word	0x20000014

08001ab8 <put_event_task_actuator>:

/********************** external data declaration ****************************/

/********************** external functions definition ************************/
void put_event_task_actuator(task_actuator_ev_t event, task_actuator_id_t identifier)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	460a      	mov	r2, r1
 8001ac2:	71fb      	strb	r3, [r7, #7]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	71bb      	strb	r3, [r7, #6]
	task_actuator_dta_t *p_task_actuator_dta;

	p_task_actuator_dta = &task_actuator_dta_list[identifier];
 8001ac8:	79bb      	ldrb	r3, [r7, #6]
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	4a06      	ldr	r2, [pc, #24]	@ (8001ae8 <put_event_task_actuator+0x30>)
 8001ace:	4413      	add	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]

	p_task_actuator_dta->event = event;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	79fa      	ldrb	r2, [r7, #7]
 8001ad6:	715a      	strb	r2, [r3, #5]
	p_task_actuator_dta->flag = true;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2201      	movs	r2, #1
 8001adc:	719a      	strb	r2, [r3, #6]
}
 8001ade:	bf00      	nop
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	20000014 	.word	0x20000014

08001aec <task_sensor_init>:
uint32_t g_task_sensor_cnt;
volatile uint32_t g_task_sensor_tick_cnt;

/********************** external functions definition ************************/
void task_sensor_init(void *parameters)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af02      	add	r7, sp, #8
 8001af2:	6078      	str	r0, [r7, #4]
	task_sensor_dta_t *p_task_sensor_dta;
	task_sensor_st_t state;
	task_sensor_ev_t event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_sensor_init), p_task_sensor);
 8001af4:	b672      	cpsid	i
 8001af6:	4b49      	ldr	r3, [pc, #292]	@ (8001c1c <task_sensor_init+0x130>)
 8001af8:	6818      	ldr	r0, [r3, #0]
 8001afa:	4b49      	ldr	r3, [pc, #292]	@ (8001c20 <task_sensor_init+0x134>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	4b48      	ldr	r3, [pc, #288]	@ (8001c24 <task_sensor_init+0x138>)
 8001b02:	4a49      	ldr	r2, [pc, #292]	@ (8001c28 <task_sensor_init+0x13c>)
 8001b04:	213f      	movs	r1, #63	@ 0x3f
 8001b06:	f000 ff97 	bl	8002a38 <sniprintf>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	4a47      	ldr	r2, [pc, #284]	@ (8001c2c <task_sensor_init+0x140>)
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	4b42      	ldr	r3, [pc, #264]	@ (8001c1c <task_sensor_init+0x130>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fe35 	bl	8001784 <logger_log_print_>
 8001b1a:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_sensor), p_task_sensor_);
 8001b1c:	b672      	cpsid	i
 8001b1e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c1c <task_sensor_init+0x130>)
 8001b20:	6818      	ldr	r0, [r3, #0]
 8001b22:	4b43      	ldr	r3, [pc, #268]	@ (8001c30 <task_sensor_init+0x144>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	4b42      	ldr	r3, [pc, #264]	@ (8001c34 <task_sensor_init+0x148>)
 8001b2a:	4a43      	ldr	r2, [pc, #268]	@ (8001c38 <task_sensor_init+0x14c>)
 8001b2c:	213f      	movs	r1, #63	@ 0x3f
 8001b2e:	f000 ff83 	bl	8002a38 <sniprintf>
 8001b32:	4603      	mov	r3, r0
 8001b34:	4a3d      	ldr	r2, [pc, #244]	@ (8001c2c <task_sensor_init+0x140>)
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	4b38      	ldr	r3, [pc, #224]	@ (8001c1c <task_sensor_init+0x130>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fe21 	bl	8001784 <logger_log_print_>
 8001b42:	b662      	cpsie	i

	g_task_sensor_cnt = G_TASK_SEN_CNT_INIT;
 8001b44:	4b3d      	ldr	r3, [pc, #244]	@ (8001c3c <task_sensor_init+0x150>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_sensor_cnt), g_task_sensor_cnt);
 8001b4a:	b672      	cpsid	i
 8001b4c:	4b33      	ldr	r3, [pc, #204]	@ (8001c1c <task_sensor_init+0x130>)
 8001b4e:	6818      	ldr	r0, [r3, #0]
 8001b50:	4b3a      	ldr	r3, [pc, #232]	@ (8001c3c <task_sensor_init+0x150>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	4b3a      	ldr	r3, [pc, #232]	@ (8001c40 <task_sensor_init+0x154>)
 8001b58:	4a3a      	ldr	r2, [pc, #232]	@ (8001c44 <task_sensor_init+0x158>)
 8001b5a:	213f      	movs	r1, #63	@ 0x3f
 8001b5c:	f000 ff6c 	bl	8002a38 <sniprintf>
 8001b60:	4603      	mov	r3, r0
 8001b62:	4a32      	ldr	r2, [pc, #200]	@ (8001c2c <task_sensor_init+0x140>)
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	4b2d      	ldr	r3, [pc, #180]	@ (8001c1c <task_sensor_init+0x130>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff fe0a 	bl	8001784 <logger_log_print_>
 8001b70:	b662      	cpsie	i

	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	e046      	b.n	8001c06 <task_sensor_init+0x11a>
	{
		/* Update Task Sensor Data Pointer */
		p_task_sensor_dta = &task_sensor_dta_list[index];
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	4a32      	ldr	r2, [pc, #200]	@ (8001c48 <task_sensor_init+0x15c>)
 8001b7e:	4413      	add	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]

		/* Print out: Index & Task execution FSM */
		LOGGER_LOG("   %s = %lu", GET_NAME(index), index);
 8001b82:	b672      	cpsid	i
 8001b84:	4b25      	ldr	r3, [pc, #148]	@ (8001c1c <task_sensor_init+0x130>)
 8001b86:	6818      	ldr	r0, [r3, #0]
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	4b2f      	ldr	r3, [pc, #188]	@ (8001c4c <task_sensor_init+0x160>)
 8001b8e:	4a30      	ldr	r2, [pc, #192]	@ (8001c50 <task_sensor_init+0x164>)
 8001b90:	213f      	movs	r1, #63	@ 0x3f
 8001b92:	f000 ff51 	bl	8002a38 <sniprintf>
 8001b96:	4603      	mov	r3, r0
 8001b98:	4a24      	ldr	r2, [pc, #144]	@ (8001c2c <task_sensor_init+0x140>)
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8001c1c <task_sensor_init+0x130>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fdef 	bl	8001784 <logger_log_print_>
 8001ba6:	b662      	cpsie	i

		state = p_task_sensor_dta->state;
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	791b      	ldrb	r3, [r3, #4]
 8001bac:	73fb      	strb	r3, [r7, #15]
		LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 8001bae:	b672      	cpsid	i
 8001bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c1c <task_sensor_init+0x130>)
 8001bb2:	6818      	ldr	r0, [r3, #0]
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	4b26      	ldr	r3, [pc, #152]	@ (8001c54 <task_sensor_init+0x168>)
 8001bba:	4a25      	ldr	r2, [pc, #148]	@ (8001c50 <task_sensor_init+0x164>)
 8001bbc:	213f      	movs	r1, #63	@ 0x3f
 8001bbe:	f000 ff3b 	bl	8002a38 <sniprintf>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	4a19      	ldr	r2, [pc, #100]	@ (8001c2c <task_sensor_init+0x140>)
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	4b14      	ldr	r3, [pc, #80]	@ (8001c1c <task_sensor_init+0x130>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff fdd9 	bl	8001784 <logger_log_print_>
 8001bd2:	b662      	cpsie	i

		event = p_task_sensor_dta->event;
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	795b      	ldrb	r3, [r3, #5]
 8001bd8:	73bb      	strb	r3, [r7, #14]
		LOGGER_LOG("   %s = %lu\r\n", GET_NAME(event), (uint32_t)event);
 8001bda:	b672      	cpsid	i
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c1c <task_sensor_init+0x130>)
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	7bbb      	ldrb	r3, [r7, #14]
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c58 <task_sensor_init+0x16c>)
 8001be6:	4a17      	ldr	r2, [pc, #92]	@ (8001c44 <task_sensor_init+0x158>)
 8001be8:	213f      	movs	r1, #63	@ 0x3f
 8001bea:	f000 ff25 	bl	8002a38 <sniprintf>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4a0e      	ldr	r2, [pc, #56]	@ (8001c2c <task_sensor_init+0x140>)
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	4b09      	ldr	r3, [pc, #36]	@ (8001c1c <task_sensor_init+0x130>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fdc3 	bl	8001784 <logger_log_print_>
 8001bfe:	b662      	cpsie	i
	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	3301      	adds	r3, #1
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0b5      	beq.n	8001b78 <task_sensor_init+0x8c>
	}
	g_task_sensor_tick_cnt = G_TASK_SEN_TICK_CNT_INI;
 8001c0c:	4b13      	ldr	r3, [pc, #76]	@ (8001c5c <task_sensor_init+0x170>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
}
 8001c12:	bf00      	nop
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	08003d54 	.word	0x08003d54
 8001c20:	20000024 	.word	0x20000024
 8001c24:	08003b80 	.word	0x08003b80
 8001c28:	08003b94 	.word	0x08003b94
 8001c2c:	2000015c 	.word	0x2000015c
 8001c30:	20000028 	.word	0x20000028
 8001c34:	08003bac 	.word	0x08003bac
 8001c38:	08003bb8 	.word	0x08003bb8
 8001c3c:	20000170 	.word	0x20000170
 8001c40:	08003bc8 	.word	0x08003bc8
 8001c44:	08003bdc 	.word	0x08003bdc
 8001c48:	20000168 	.word	0x20000168
 8001c4c:	08003bec 	.word	0x08003bec
 8001c50:	08003bf4 	.word	0x08003bf4
 8001c54:	08003c00 	.word	0x08003c00
 8001c58:	08003c08 	.word	0x08003c08
 8001c5c:	20000174 	.word	0x20000174

08001c60 <task_sensor_update>:

void task_sensor_update(void *parameters)
{
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
	uint32_t index;
	const task_sensor_cfg_t *p_task_sensor_cfg;
	task_sensor_dta_t *p_task_sensor_dta;
	bool b_time_update_required = false;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	74fb      	strb	r3, [r7, #19]

	/* Update Task Sensor Counter */
	g_task_sensor_cnt++;
 8001c6c:	4b7e      	ldr	r3, [pc, #504]	@ (8001e68 <task_sensor_update+0x208>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	3301      	adds	r3, #1
 8001c72:	4a7d      	ldr	r2, [pc, #500]	@ (8001e68 <task_sensor_update+0x208>)
 8001c74:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_sensor_tick_cnt) */
	__asm("CPSID i");	/* disable interrupts*/
 8001c76:	b672      	cpsid	i
    if (G_TASK_SEN_TICK_CNT_INI < g_task_sensor_tick_cnt)
 8001c78:	4b7c      	ldr	r3, [pc, #496]	@ (8001e6c <task_sensor_update+0x20c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d006      	beq.n	8001c8e <task_sensor_update+0x2e>
    {
    	g_task_sensor_tick_cnt--;
 8001c80:	4b7a      	ldr	r3, [pc, #488]	@ (8001e6c <task_sensor_update+0x20c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	3b01      	subs	r3, #1
 8001c86:	4a79      	ldr	r2, [pc, #484]	@ (8001e6c <task_sensor_update+0x20c>)
 8001c88:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	74fb      	strb	r3, [r7, #19]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 8001c8e:	b662      	cpsie	i

    while (b_time_update_required)
 8001c90:	e0e1      	b.n	8001e56 <task_sensor_update+0x1f6>
    {
		/* Protect shared resource (g_task_sensor_tick_cnt) */
		__asm("CPSID i");	/* disable interrupts*/
 8001c92:	b672      	cpsid	i
		if (G_TASK_SEN_TICK_CNT_INI < g_task_sensor_tick_cnt)
 8001c94:	4b75      	ldr	r3, [pc, #468]	@ (8001e6c <task_sensor_update+0x20c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d007      	beq.n	8001cac <task_sensor_update+0x4c>
		{
			g_task_sensor_tick_cnt--;
 8001c9c:	4b73      	ldr	r3, [pc, #460]	@ (8001e6c <task_sensor_update+0x20c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	4a72      	ldr	r2, [pc, #456]	@ (8001e6c <task_sensor_update+0x20c>)
 8001ca4:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	74fb      	strb	r3, [r7, #19]
 8001caa:	e001      	b.n	8001cb0 <task_sensor_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 8001cac:	2300      	movs	r3, #0
 8001cae:	74fb      	strb	r3, [r7, #19]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8001cb0:	b662      	cpsie	i

    	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	e0ca      	b.n	8001e4e <task_sensor_update+0x1ee>
		{
    		/* Update Task Sensor Configuration & Data Pointer */
			p_task_sensor_cfg = &task_sensor_cfg_list[index];
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4a6b      	ldr	r2, [pc, #428]	@ (8001e70 <task_sensor_update+0x210>)
 8001cc4:	4413      	add	r3, r2
 8001cc6:	60fb      	str	r3, [r7, #12]
			p_task_sensor_dta = &task_sensor_dta_list[index];
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	4a69      	ldr	r2, [pc, #420]	@ (8001e74 <task_sensor_update+0x214>)
 8001cce:	4413      	add	r3, r2
 8001cd0:	60bb      	str	r3, [r7, #8]

			if (p_task_sensor_cfg->pressed == HAL_GPIO_ReadPin(p_task_sensor_cfg->gpio_port, p_task_sensor_cfg->pin))
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	7a9c      	ldrb	r4, [r3, #10]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	891b      	ldrh	r3, [r3, #8]
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	f7fe fef3 	bl	8000acc <HAL_GPIO_ReadPin>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	429c      	cmp	r4, r3
 8001cea:	d103      	bne.n	8001cf4 <task_sensor_update+0x94>
			{
				p_task_sensor_dta->event =	EV_BTN_XX_DOWN;
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	715a      	strb	r2, [r3, #5]
 8001cf2:	e002      	b.n	8001cfa <task_sensor_update+0x9a>
			}
			else
			{
				p_task_sensor_dta->event =	EV_BTN_XX_UP;
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	715a      	strb	r2, [r3, #5]
			}

			////////////////////////////////////////////////////////////
			switch (p_task_sensor_dta->state)
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	791b      	ldrb	r3, [r3, #4]
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	f200 8099 	bhi.w	8001e36 <task_sensor_update+0x1d6>
 8001d04:	a201      	add	r2, pc, #4	@ (adr r2, 8001d0c <task_sensor_update+0xac>)
 8001d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d0a:	bf00      	nop
 8001d0c:	08001d1d 	.word	0x08001d1d
 8001d10:	08001d37 	.word	0x08001d37
 8001d14:	08001dab 	.word	0x08001dab
 8001d18:	08001dc3 	.word	0x08001dc3
			{
				case ST_BTN_XX_UP:
					if (p_task_sensor_dta->event == EV_BTN_XX_DOWN)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	795b      	ldrb	r3, [r3, #5]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	f040 808a 	bne.w	8001e3a <task_sensor_update+0x1da>
					{
						p_task_sensor_dta->state = ST_BTN_XX_FALLING;
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	711a      	strb	r2, [r3, #4]
						p_task_sensor_dta->tick = p_task_sensor_cfg->tick_max;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	601a      	str	r2, [r3, #0]
					}
					// EV_BTN_XX_UP → permanece en UP (no hace nada)
					break;
 8001d34:	e081      	b.n	8001e3a <task_sensor_update+0x1da>

				case ST_BTN_XX_FALLING:
					if ((p_task_sensor_dta->event == EV_BTN_XX_DOWN) && (p_task_sensor_dta->tick > 0))
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	795b      	ldrb	r3, [r3, #5]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d109      	bne.n	8001d52 <task_sensor_update+0xf2>
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d005      	beq.n	8001d52 <task_sensor_update+0xf2>
					{
						p_task_sensor_dta->tick--;
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	1e5a      	subs	r2, r3, #1
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	e02a      	b.n	8001da8 <task_sensor_update+0x148>
					}
					else if ((p_task_sensor_dta->event == EV_BTN_XX_DOWN) && (p_task_sensor_dta->tick == 0))
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	795b      	ldrb	r3, [r3, #5]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d10c      	bne.n	8001d74 <task_sensor_update+0x114>
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d108      	bne.n	8001d74 <task_sensor_update+0x114>
					{
						p_task_sensor_dta->state = ST_BTN_XX_DOWN;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	2202      	movs	r2, #2
 8001d66:	711a      	strb	r2, [r3, #4]
						put_event_task_system(p_task_sensor_cfg->signal_down);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	7c5b      	ldrb	r3, [r3, #17]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f000 f9dd 	bl	800212c <put_event_task_system>
 8001d72:	e019      	b.n	8001da8 <task_sensor_update+0x148>
					}
					else if ((p_task_sensor_dta->event == EV_BTN_XX_UP) && (p_task_sensor_dta->tick > 0))
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	795b      	ldrb	r3, [r3, #5]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d109      	bne.n	8001d90 <task_sensor_update+0x130>
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d005      	beq.n	8001d90 <task_sensor_update+0x130>
					{
						p_task_sensor_dta->tick--;
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	1e5a      	subs	r2, r3, #1
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	e00b      	b.n	8001da8 <task_sensor_update+0x148>
					}
					else if ((p_task_sensor_dta->event == EV_BTN_XX_UP) && (p_task_sensor_dta->tick == 0))
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	795b      	ldrb	r3, [r3, #5]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d152      	bne.n	8001e3e <task_sensor_update+0x1de>
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d14e      	bne.n	8001e3e <task_sensor_update+0x1de>
					{
						p_task_sensor_dta->state = ST_BTN_XX_UP;
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2200      	movs	r2, #0
 8001da4:	711a      	strb	r2, [r3, #4]
					}
					break;
 8001da6:	e04a      	b.n	8001e3e <task_sensor_update+0x1de>
 8001da8:	e049      	b.n	8001e3e <task_sensor_update+0x1de>

				case ST_BTN_XX_DOWN:
					if (p_task_sensor_dta->event == EV_BTN_XX_UP)
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	795b      	ldrb	r3, [r3, #5]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d147      	bne.n	8001e42 <task_sensor_update+0x1e2>
					{
						p_task_sensor_dta->state = ST_BTN_XX_RISING;
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	2203      	movs	r2, #3
 8001db6:	711a      	strb	r2, [r3, #4]
						p_task_sensor_dta->tick = p_task_sensor_cfg->tick_max;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	601a      	str	r2, [r3, #0]
					}
					// EV_BTN_XX_DOWN → permanece en DOWN (no hace nada)
					break;
 8001dc0:	e03f      	b.n	8001e42 <task_sensor_update+0x1e2>

				case ST_BTN_XX_RISING:
					if ((p_task_sensor_dta->event == EV_BTN_XX_UP) && (p_task_sensor_dta->tick > 0))
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	795b      	ldrb	r3, [r3, #5]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d109      	bne.n	8001dde <task_sensor_update+0x17e>
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d005      	beq.n	8001dde <task_sensor_update+0x17e>
					{
						p_task_sensor_dta->tick--;
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	1e5a      	subs	r2, r3, #1
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	e02a      	b.n	8001e34 <task_sensor_update+0x1d4>
					}
					else if ((p_task_sensor_dta->event == EV_BTN_XX_UP) && (p_task_sensor_dta->tick == 0))
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	795b      	ldrb	r3, [r3, #5]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10c      	bne.n	8001e00 <task_sensor_update+0x1a0>
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d108      	bne.n	8001e00 <task_sensor_update+0x1a0>
					{
						p_task_sensor_dta->state = ST_BTN_XX_UP;
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2200      	movs	r2, #0
 8001df2:	711a      	strb	r2, [r3, #4]
						put_event_task_system(p_task_sensor_cfg->signal_up);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	7c1b      	ldrb	r3, [r3, #16]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 f997 	bl	800212c <put_event_task_system>
 8001dfe:	e019      	b.n	8001e34 <task_sensor_update+0x1d4>
					}
					else if ((p_task_sensor_dta->event == EV_BTN_XX_DOWN) && (p_task_sensor_dta->tick > 0))
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	795b      	ldrb	r3, [r3, #5]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d109      	bne.n	8001e1c <task_sensor_update+0x1bc>
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <task_sensor_update+0x1bc>
					{
						p_task_sensor_dta->tick--;
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	1e5a      	subs	r2, r3, #1
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	e00b      	b.n	8001e34 <task_sensor_update+0x1d4>
					}
					else if ((p_task_sensor_dta->event == EV_BTN_XX_DOWN) && (p_task_sensor_dta->tick == 0))
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	795b      	ldrb	r3, [r3, #5]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d110      	bne.n	8001e46 <task_sensor_update+0x1e6>
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d10c      	bne.n	8001e46 <task_sensor_update+0x1e6>
					{
						p_task_sensor_dta->state = ST_BTN_XX_DOWN;
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	711a      	strb	r2, [r3, #4]
					}
					break;
 8001e32:	e008      	b.n	8001e46 <task_sensor_update+0x1e6>
 8001e34:	e007      	b.n	8001e46 <task_sensor_update+0x1e6>

				default:
					break;
 8001e36:	bf00      	nop
 8001e38:	e006      	b.n	8001e48 <task_sensor_update+0x1e8>
					break;
 8001e3a:	bf00      	nop
 8001e3c:	e004      	b.n	8001e48 <task_sensor_update+0x1e8>
					break;
 8001e3e:	bf00      	nop
 8001e40:	e002      	b.n	8001e48 <task_sensor_update+0x1e8>
					break;
 8001e42:	bf00      	nop
 8001e44:	e000      	b.n	8001e48 <task_sensor_update+0x1e8>
					break;
 8001e46:	bf00      	nop
    	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f43f af31 	beq.w	8001cb8 <task_sensor_update+0x58>
    while (b_time_update_required)
 8001e56:	7cfb      	ldrb	r3, [r7, #19]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f47f af1a 	bne.w	8001c92 <task_sensor_update+0x32>

					break;
			}*/
		}
    }
}
 8001e5e:	bf00      	nop
 8001e60:	bf00      	nop
 8001e62:	371c      	adds	r7, #28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd90      	pop	{r4, r7, pc}
 8001e68:	20000170 	.word	0x20000170
 8001e6c:	20000174 	.word	0x20000174
 8001e70:	08003d6c 	.word	0x08003d6c
 8001e74:	20000168 	.word	0x20000168

08001e78 <task_system_init>:
uint32_t g_task_system_cnt;
volatile uint32_t g_task_system_tick_cnt;

/********************** external functions definition ************************/
void task_system_init(void *parameters)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af02      	add	r7, sp, #8
 8001e7e:	6078      	str	r0, [r7, #4]
	task_system_st_t	state;
	task_system_ev_t	event;
	bool b_event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_system_init), p_task_system);
 8001e80:	b672      	cpsid	i
 8001e82:	4b48      	ldr	r3, [pc, #288]	@ (8001fa4 <task_system_init+0x12c>)
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	4b48      	ldr	r3, [pc, #288]	@ (8001fa8 <task_system_init+0x130>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	4b47      	ldr	r3, [pc, #284]	@ (8001fac <task_system_init+0x134>)
 8001e8e:	4a48      	ldr	r2, [pc, #288]	@ (8001fb0 <task_system_init+0x138>)
 8001e90:	213f      	movs	r1, #63	@ 0x3f
 8001e92:	f000 fdd1 	bl	8002a38 <sniprintf>
 8001e96:	4603      	mov	r3, r0
 8001e98:	4a46      	ldr	r2, [pc, #280]	@ (8001fb4 <task_system_init+0x13c>)
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	4b41      	ldr	r3, [pc, #260]	@ (8001fa4 <task_system_init+0x12c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff fc6f 	bl	8001784 <logger_log_print_>
 8001ea6:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_system), p_task_system_);
 8001ea8:	b672      	cpsid	i
 8001eaa:	4b3e      	ldr	r3, [pc, #248]	@ (8001fa4 <task_system_init+0x12c>)
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	4b42      	ldr	r3, [pc, #264]	@ (8001fb8 <task_system_init+0x140>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	4b41      	ldr	r3, [pc, #260]	@ (8001fbc <task_system_init+0x144>)
 8001eb6:	4a42      	ldr	r2, [pc, #264]	@ (8001fc0 <task_system_init+0x148>)
 8001eb8:	213f      	movs	r1, #63	@ 0x3f
 8001eba:	f000 fdbd 	bl	8002a38 <sniprintf>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	4a3c      	ldr	r2, [pc, #240]	@ (8001fb4 <task_system_init+0x13c>)
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	4b37      	ldr	r3, [pc, #220]	@ (8001fa4 <task_system_init+0x12c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fc5b 	bl	8001784 <logger_log_print_>
 8001ece:	b662      	cpsie	i

	g_task_system_cnt = G_TASK_SYS_CNT_INI;
 8001ed0:	4b3c      	ldr	r3, [pc, #240]	@ (8001fc4 <task_system_init+0x14c>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_system_cnt), g_task_system_cnt);
 8001ed6:	b672      	cpsid	i
 8001ed8:	4b32      	ldr	r3, [pc, #200]	@ (8001fa4 <task_system_init+0x12c>)
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	4b39      	ldr	r3, [pc, #228]	@ (8001fc4 <task_system_init+0x14c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	4b39      	ldr	r3, [pc, #228]	@ (8001fc8 <task_system_init+0x150>)
 8001ee4:	4a39      	ldr	r2, [pc, #228]	@ (8001fcc <task_system_init+0x154>)
 8001ee6:	213f      	movs	r1, #63	@ 0x3f
 8001ee8:	f000 fda6 	bl	8002a38 <sniprintf>
 8001eec:	4603      	mov	r3, r0
 8001eee:	4a31      	ldr	r2, [pc, #196]	@ (8001fb4 <task_system_init+0x13c>)
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	4b2c      	ldr	r3, [pc, #176]	@ (8001fa4 <task_system_init+0x12c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fc44 	bl	8001784 <logger_log_print_>
 8001efc:	b662      	cpsie	i

	init_queue_event_task_system();
 8001efe:	f000 f8f1 	bl	80020e4 <init_queue_event_task_system>

	/* Update Task Actuator Configuration & Data Pointer */
	p_task_system_dta = &task_system_dta;
 8001f02:	4b33      	ldr	r3, [pc, #204]	@ (8001fd0 <task_system_init+0x158>)
 8001f04:	60fb      	str	r3, [r7, #12]

	/* Print out: Task execution FSM */
	state = p_task_system_dta->state;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	791b      	ldrb	r3, [r3, #4]
 8001f0a:	72fb      	strb	r3, [r7, #11]
	LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 8001f0c:	b672      	cpsid	i
 8001f0e:	4b25      	ldr	r3, [pc, #148]	@ (8001fa4 <task_system_init+0x12c>)
 8001f10:	6818      	ldr	r0, [r3, #0]
 8001f12:	7afb      	ldrb	r3, [r7, #11]
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	4b2f      	ldr	r3, [pc, #188]	@ (8001fd4 <task_system_init+0x15c>)
 8001f18:	4a2f      	ldr	r2, [pc, #188]	@ (8001fd8 <task_system_init+0x160>)
 8001f1a:	213f      	movs	r1, #63	@ 0x3f
 8001f1c:	f000 fd8c 	bl	8002a38 <sniprintf>
 8001f20:	4603      	mov	r3, r0
 8001f22:	4a24      	ldr	r2, [pc, #144]	@ (8001fb4 <task_system_init+0x13c>)
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa4 <task_system_init+0x12c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff fc2a 	bl	8001784 <logger_log_print_>
 8001f30:	b662      	cpsie	i

	event = p_task_system_dta->event;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	795b      	ldrb	r3, [r3, #5]
 8001f36:	72bb      	strb	r3, [r7, #10]
	LOGGER_LOG("   %s = %lu", GET_NAME(event), (uint32_t)event);
 8001f38:	b672      	cpsid	i
 8001f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa4 <task_system_init+0x12c>)
 8001f3c:	6818      	ldr	r0, [r3, #0]
 8001f3e:	7abb      	ldrb	r3, [r7, #10]
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	4b26      	ldr	r3, [pc, #152]	@ (8001fdc <task_system_init+0x164>)
 8001f44:	4a24      	ldr	r2, [pc, #144]	@ (8001fd8 <task_system_init+0x160>)
 8001f46:	213f      	movs	r1, #63	@ 0x3f
 8001f48:	f000 fd76 	bl	8002a38 <sniprintf>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	4a19      	ldr	r2, [pc, #100]	@ (8001fb4 <task_system_init+0x13c>)
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	4b14      	ldr	r3, [pc, #80]	@ (8001fa4 <task_system_init+0x12c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fc14 	bl	8001784 <logger_log_print_>
 8001f5c:	b662      	cpsie	i

	b_event = p_task_system_dta->flag;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	799b      	ldrb	r3, [r3, #6]
 8001f62:	727b      	strb	r3, [r7, #9]
	LOGGER_LOG("   %s = %s\r\n", GET_NAME(b_event), (b_event ? "true" : "false"));
 8001f64:	b672      	cpsid	i
 8001f66:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa4 <task_system_init+0x12c>)
 8001f68:	6818      	ldr	r0, [r3, #0]
 8001f6a:	7a7b      	ldrb	r3, [r7, #9]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <task_system_init+0xfc>
 8001f70:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe0 <task_system_init+0x168>)
 8001f72:	e000      	b.n	8001f76 <task_system_init+0xfe>
 8001f74:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe4 <task_system_init+0x16c>)
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe8 <task_system_init+0x170>)
 8001f7a:	4a1c      	ldr	r2, [pc, #112]	@ (8001fec <task_system_init+0x174>)
 8001f7c:	213f      	movs	r1, #63	@ 0x3f
 8001f7e:	f000 fd5b 	bl	8002a38 <sniprintf>
 8001f82:	4603      	mov	r3, r0
 8001f84:	4a0b      	ldr	r2, [pc, #44]	@ (8001fb4 <task_system_init+0x13c>)
 8001f86:	6013      	str	r3, [r2, #0]
 8001f88:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <task_system_init+0x12c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fbf9 	bl	8001784 <logger_log_print_>
 8001f92:	b662      	cpsie	i

	g_task_system_tick_cnt = G_TASK_SYS_TICK_CNT_INI;
 8001f94:	4b16      	ldr	r3, [pc, #88]	@ (8001ff0 <task_system_init+0x178>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
}
 8001f9a:	bf00      	nop
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	08003d54 	.word	0x08003d54
 8001fa8:	2000002c 	.word	0x2000002c
 8001fac:	08003c54 	.word	0x08003c54
 8001fb0:	08003c68 	.word	0x08003c68
 8001fb4:	2000015c 	.word	0x2000015c
 8001fb8:	20000030 	.word	0x20000030
 8001fbc:	08003c80 	.word	0x08003c80
 8001fc0:	08003c8c 	.word	0x08003c8c
 8001fc4:	20000180 	.word	0x20000180
 8001fc8:	08003c9c 	.word	0x08003c9c
 8001fcc:	08003cb0 	.word	0x08003cb0
 8001fd0:	20000178 	.word	0x20000178
 8001fd4:	08003cc0 	.word	0x08003cc0
 8001fd8:	08003cc8 	.word	0x08003cc8
 8001fdc:	08003cd4 	.word	0x08003cd4
 8001fe0:	08003cdc 	.word	0x08003cdc
 8001fe4:	08003ce4 	.word	0x08003ce4
 8001fe8:	08003cec 	.word	0x08003cec
 8001fec:	08003cf4 	.word	0x08003cf4
 8001ff0:	20000184 	.word	0x20000184

08001ff4 <task_system_update>:

void task_system_update(void *parameters)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
	task_system_dta_t *p_task_system_dta;
	bool b_time_update_required = false;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	73fb      	strb	r3, [r7, #15]

	/* Update Task System Counter */
	g_task_system_cnt++;
 8002000:	4b35      	ldr	r3, [pc, #212]	@ (80020d8 <task_system_update+0xe4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	3301      	adds	r3, #1
 8002006:	4a34      	ldr	r2, [pc, #208]	@ (80020d8 <task_system_update+0xe4>)
 8002008:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_system_tick) */
	__asm("CPSID i");	/* disable interrupts*/
 800200a:	b672      	cpsid	i
    if (G_TASK_SYS_TICK_CNT_INI < g_task_system_tick_cnt)
 800200c:	4b33      	ldr	r3, [pc, #204]	@ (80020dc <task_system_update+0xe8>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d006      	beq.n	8002022 <task_system_update+0x2e>
    {
    	g_task_system_tick_cnt--;
 8002014:	4b31      	ldr	r3, [pc, #196]	@ (80020dc <task_system_update+0xe8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	3b01      	subs	r3, #1
 800201a:	4a30      	ldr	r2, [pc, #192]	@ (80020dc <task_system_update+0xe8>)
 800201c:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 800201e:	2301      	movs	r3, #1
 8002020:	73fb      	strb	r3, [r7, #15]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 8002022:	b662      	cpsie	i

    while (b_time_update_required)
 8002024:	e04f      	b.n	80020c6 <task_system_update+0xd2>
    {
		/* Protect shared resource (g_task_system_tick) */
		__asm("CPSID i");	/* disable interrupts*/
 8002026:	b672      	cpsid	i
		if (G_TASK_SYS_TICK_CNT_INI < g_task_system_tick_cnt)
 8002028:	4b2c      	ldr	r3, [pc, #176]	@ (80020dc <task_system_update+0xe8>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d007      	beq.n	8002040 <task_system_update+0x4c>
		{
			g_task_system_tick_cnt--;
 8002030:	4b2a      	ldr	r3, [pc, #168]	@ (80020dc <task_system_update+0xe8>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	3b01      	subs	r3, #1
 8002036:	4a29      	ldr	r2, [pc, #164]	@ (80020dc <task_system_update+0xe8>)
 8002038:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 800203a:	2301      	movs	r3, #1
 800203c:	73fb      	strb	r3, [r7, #15]
 800203e:	e001      	b.n	8002044 <task_system_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 8002040:	2300      	movs	r3, #0
 8002042:	73fb      	strb	r3, [r7, #15]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8002044:	b662      	cpsie	i

    	/* Update Task System Data Pointer */
		p_task_system_dta = &task_system_dta;
 8002046:	4b26      	ldr	r3, [pc, #152]	@ (80020e0 <task_system_update+0xec>)
 8002048:	60bb      	str	r3, [r7, #8]

		if (true == any_event_task_system())
 800204a:	f000 f8b7 	bl	80021bc <any_event_task_system>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d008      	beq.n	8002066 <task_system_update+0x72>
		{
			p_task_system_dta->flag = true;
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2201      	movs	r2, #1
 8002058:	719a      	strb	r2, [r3, #6]
			p_task_system_dta->event = get_event_task_system();
 800205a:	f000 f889 	bl	8002170 <get_event_task_system>
 800205e:	4603      	mov	r3, r0
 8002060:	461a      	mov	r2, r3
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	715a      	strb	r2, [r3, #5]
		}

		switch (p_task_system_dta->state)
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	791b      	ldrb	r3, [r3, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d002      	beq.n	8002074 <task_system_update+0x80>
 800206e:	2b01      	cmp	r3, #1
 8002070:	d013      	beq.n	800209a <task_system_update+0xa6>

				break;

			default:

				break;
 8002072:	e028      	b.n	80020c6 <task_system_update+0xd2>
				if ((true == p_task_system_dta->flag) && (EV_SYS_XX_ACTIVE == p_task_system_dta->event))
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	799b      	ldrb	r3, [r3, #6]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d021      	beq.n	80020c0 <task_system_update+0xcc>
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	795b      	ldrb	r3, [r3, #5]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d11d      	bne.n	80020c0 <task_system_update+0xcc>
					p_task_system_dta->flag = false;
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	2200      	movs	r2, #0
 8002088:	719a      	strb	r2, [r3, #6]
					put_event_task_actuator(EV_LED_XX_ON, ID_LED_A);
 800208a:	2100      	movs	r1, #0
 800208c:	2001      	movs	r0, #1
 800208e:	f7ff fd13 	bl	8001ab8 <put_event_task_actuator>
					p_task_system_dta->state = ST_SYS_XX_ACTIVE;
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	2201      	movs	r2, #1
 8002096:	711a      	strb	r2, [r3, #4]
				break;
 8002098:	e012      	b.n	80020c0 <task_system_update+0xcc>
				if ((true == p_task_system_dta->flag) && (EV_SYS_XX_IDLE == p_task_system_dta->event))
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	799b      	ldrb	r3, [r3, #6]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d010      	beq.n	80020c4 <task_system_update+0xd0>
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	795b      	ldrb	r3, [r3, #5]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10c      	bne.n	80020c4 <task_system_update+0xd0>
					p_task_system_dta->flag = false;
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	2200      	movs	r2, #0
 80020ae:	719a      	strb	r2, [r3, #6]
					put_event_task_actuator(EV_LED_XX_OFF, ID_LED_A);
 80020b0:	2100      	movs	r1, #0
 80020b2:	2000      	movs	r0, #0
 80020b4:	f7ff fd00 	bl	8001ab8 <put_event_task_actuator>
					p_task_system_dta->state = ST_SYS_XX_IDLE;
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2200      	movs	r2, #0
 80020bc:	711a      	strb	r2, [r3, #4]
				break;
 80020be:	e001      	b.n	80020c4 <task_system_update+0xd0>
				break;
 80020c0:	bf00      	nop
 80020c2:	e000      	b.n	80020c6 <task_system_update+0xd2>
				break;
 80020c4:	bf00      	nop
    while (b_time_update_required)
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1ac      	bne.n	8002026 <task_system_update+0x32>
		}
	}
}
 80020cc:	bf00      	nop
 80020ce:	bf00      	nop
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000180 	.word	0x20000180
 80020dc:	20000184 	.word	0x20000184
 80020e0:	20000178 	.word	0x20000178

080020e4 <init_queue_event_task_system>:

/********************** external data declaration ****************************/

/********************** external functions definition ************************/
void init_queue_event_task_system(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
	uint32_t i;

	queue_task_a.head = 0;
 80020ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002128 <init_queue_event_task_system+0x44>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
	queue_task_a.tail = 0;
 80020f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002128 <init_queue_event_task_system+0x44>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	605a      	str	r2, [r3, #4]
	queue_task_a.count = 0;
 80020f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002128 <init_queue_event_task_system+0x44>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	609a      	str	r2, [r3, #8]

	for (i = 0; i < MAX_EVENTS; i++)
 80020fc:	2300      	movs	r3, #0
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	e008      	b.n	8002114 <init_queue_event_task_system+0x30>
		queue_task_a.queue[i] = EVENT_UNDEFINED;
 8002102:	4a09      	ldr	r2, [pc, #36]	@ (8002128 <init_queue_event_task_system+0x44>)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4413      	add	r3, r2
 8002108:	330c      	adds	r3, #12
 800210a:	22ff      	movs	r2, #255	@ 0xff
 800210c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MAX_EVENTS; i++)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3301      	adds	r3, #1
 8002112:	607b      	str	r3, [r7, #4]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b0f      	cmp	r3, #15
 8002118:	d9f3      	bls.n	8002102 <init_queue_event_task_system+0x1e>
}
 800211a:	bf00      	nop
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	20000188 	.word	0x20000188

0800212c <put_event_task_system>:

void put_event_task_system(task_system_ev_t event)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
	queue_task_a.count++;
 8002136:	4b0d      	ldr	r3, [pc, #52]	@ (800216c <put_event_task_system+0x40>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	3301      	adds	r3, #1
 800213c:	4a0b      	ldr	r2, [pc, #44]	@ (800216c <put_event_task_system+0x40>)
 800213e:	6093      	str	r3, [r2, #8]
	queue_task_a.queue[queue_task_a.head++] = event;
 8002140:	4b0a      	ldr	r3, [pc, #40]	@ (800216c <put_event_task_system+0x40>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	1c5a      	adds	r2, r3, #1
 8002146:	4909      	ldr	r1, [pc, #36]	@ (800216c <put_event_task_system+0x40>)
 8002148:	600a      	str	r2, [r1, #0]
 800214a:	4a08      	ldr	r2, [pc, #32]	@ (800216c <put_event_task_system+0x40>)
 800214c:	4413      	add	r3, r2
 800214e:	79fa      	ldrb	r2, [r7, #7]
 8002150:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.head)
 8002152:	4b06      	ldr	r3, [pc, #24]	@ (800216c <put_event_task_system+0x40>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b10      	cmp	r3, #16
 8002158:	d102      	bne.n	8002160 <put_event_task_system+0x34>
		queue_task_a.head = 0;
 800215a:	4b04      	ldr	r3, [pc, #16]	@ (800216c <put_event_task_system+0x40>)
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	20000188 	.word	0x20000188

08002170 <get_event_task_system>:

task_system_ev_t get_event_task_system(void)

{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
	task_system_ev_t event;

	queue_task_a.count--;
 8002176:	4b10      	ldr	r3, [pc, #64]	@ (80021b8 <get_event_task_system+0x48>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	3b01      	subs	r3, #1
 800217c:	4a0e      	ldr	r2, [pc, #56]	@ (80021b8 <get_event_task_system+0x48>)
 800217e:	6093      	str	r3, [r2, #8]
	event = queue_task_a.queue[queue_task_a.tail];
 8002180:	4b0d      	ldr	r3, [pc, #52]	@ (80021b8 <get_event_task_system+0x48>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	4a0c      	ldr	r2, [pc, #48]	@ (80021b8 <get_event_task_system+0x48>)
 8002186:	4413      	add	r3, r2
 8002188:	7b1b      	ldrb	r3, [r3, #12]
 800218a:	71fb      	strb	r3, [r7, #7]
	queue_task_a.queue[queue_task_a.tail++] = EVENT_UNDEFINED;
 800218c:	4b0a      	ldr	r3, [pc, #40]	@ (80021b8 <get_event_task_system+0x48>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	1c5a      	adds	r2, r3, #1
 8002192:	4909      	ldr	r1, [pc, #36]	@ (80021b8 <get_event_task_system+0x48>)
 8002194:	604a      	str	r2, [r1, #4]
 8002196:	4a08      	ldr	r2, [pc, #32]	@ (80021b8 <get_event_task_system+0x48>)
 8002198:	4413      	add	r3, r2
 800219a:	22ff      	movs	r2, #255	@ 0xff
 800219c:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.tail)
 800219e:	4b06      	ldr	r3, [pc, #24]	@ (80021b8 <get_event_task_system+0x48>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b10      	cmp	r3, #16
 80021a4:	d102      	bne.n	80021ac <get_event_task_system+0x3c>
		queue_task_a.tail = 0;
 80021a6:	4b04      	ldr	r3, [pc, #16]	@ (80021b8 <get_event_task_system+0x48>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	605a      	str	r2, [r3, #4]

	return event;
 80021ac:	79fb      	ldrb	r3, [r7, #7]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr
 80021b8:	20000188 	.word	0x20000188

080021bc <any_event_task_system>:

bool any_event_task_system(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return (queue_task_a.head != queue_task_a.tail);
 80021c0:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <any_event_task_system+0x20>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4b05      	ldr	r3, [pc, #20]	@ (80021dc <any_event_task_system+0x20>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	bf14      	ite	ne
 80021cc:	2301      	movne	r3, #1
 80021ce:	2300      	moveq	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	20000188 	.word	0x20000188

080021e0 <findslot>:
 80021e0:	4b0a      	ldr	r3, [pc, #40]	@ (800220c <findslot+0x2c>)
 80021e2:	b510      	push	{r4, lr}
 80021e4:	4604      	mov	r4, r0
 80021e6:	6818      	ldr	r0, [r3, #0]
 80021e8:	b118      	cbz	r0, 80021f2 <findslot+0x12>
 80021ea:	6a03      	ldr	r3, [r0, #32]
 80021ec:	b90b      	cbnz	r3, 80021f2 <findslot+0x12>
 80021ee:	f000 fbdb 	bl	80029a8 <__sinit>
 80021f2:	2c13      	cmp	r4, #19
 80021f4:	d807      	bhi.n	8002206 <findslot+0x26>
 80021f6:	4806      	ldr	r0, [pc, #24]	@ (8002210 <findslot+0x30>)
 80021f8:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80021fc:	3201      	adds	r2, #1
 80021fe:	d002      	beq.n	8002206 <findslot+0x26>
 8002200:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002204:	bd10      	pop	{r4, pc}
 8002206:	2000      	movs	r0, #0
 8002208:	e7fc      	b.n	8002204 <findslot+0x24>
 800220a:	bf00      	nop
 800220c:	20000048 	.word	0x20000048
 8002210:	200001b0 	.word	0x200001b0

08002214 <error>:
 8002214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002216:	4604      	mov	r4, r0
 8002218:	f000 fcd6 	bl	8002bc8 <__errno>
 800221c:	2613      	movs	r6, #19
 800221e:	4605      	mov	r5, r0
 8002220:	2700      	movs	r7, #0
 8002222:	4630      	mov	r0, r6
 8002224:	4639      	mov	r1, r7
 8002226:	beab      	bkpt	0x00ab
 8002228:	4606      	mov	r6, r0
 800222a:	4620      	mov	r0, r4
 800222c:	602e      	str	r6, [r5, #0]
 800222e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002230 <checkerror>:
 8002230:	1c43      	adds	r3, r0, #1
 8002232:	d101      	bne.n	8002238 <checkerror+0x8>
 8002234:	f7ff bfee 	b.w	8002214 <error>
 8002238:	4770      	bx	lr

0800223a <_swiread>:
 800223a:	b530      	push	{r4, r5, lr}
 800223c:	b085      	sub	sp, #20
 800223e:	2406      	movs	r4, #6
 8002240:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002244:	9203      	str	r2, [sp, #12]
 8002246:	ad01      	add	r5, sp, #4
 8002248:	4620      	mov	r0, r4
 800224a:	4629      	mov	r1, r5
 800224c:	beab      	bkpt	0x00ab
 800224e:	4604      	mov	r4, r0
 8002250:	4620      	mov	r0, r4
 8002252:	f7ff ffed 	bl	8002230 <checkerror>
 8002256:	b005      	add	sp, #20
 8002258:	bd30      	pop	{r4, r5, pc}

0800225a <_read>:
 800225a:	b570      	push	{r4, r5, r6, lr}
 800225c:	460e      	mov	r6, r1
 800225e:	4614      	mov	r4, r2
 8002260:	f7ff ffbe 	bl	80021e0 <findslot>
 8002264:	4605      	mov	r5, r0
 8002266:	b930      	cbnz	r0, 8002276 <_read+0x1c>
 8002268:	f000 fcae 	bl	8002bc8 <__errno>
 800226c:	2309      	movs	r3, #9
 800226e:	6003      	str	r3, [r0, #0]
 8002270:	f04f 30ff 	mov.w	r0, #4294967295
 8002274:	bd70      	pop	{r4, r5, r6, pc}
 8002276:	4622      	mov	r2, r4
 8002278:	4631      	mov	r1, r6
 800227a:	6800      	ldr	r0, [r0, #0]
 800227c:	f7ff ffdd 	bl	800223a <_swiread>
 8002280:	1c43      	adds	r3, r0, #1
 8002282:	d0f5      	beq.n	8002270 <_read+0x16>
 8002284:	686b      	ldr	r3, [r5, #4]
 8002286:	1a20      	subs	r0, r4, r0
 8002288:	4403      	add	r3, r0
 800228a:	606b      	str	r3, [r5, #4]
 800228c:	e7f2      	b.n	8002274 <_read+0x1a>

0800228e <_swilseek>:
 800228e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002290:	460c      	mov	r4, r1
 8002292:	4616      	mov	r6, r2
 8002294:	f7ff ffa4 	bl	80021e0 <findslot>
 8002298:	4605      	mov	r5, r0
 800229a:	b940      	cbnz	r0, 80022ae <_swilseek+0x20>
 800229c:	f000 fc94 	bl	8002bc8 <__errno>
 80022a0:	2309      	movs	r3, #9
 80022a2:	6003      	str	r3, [r0, #0]
 80022a4:	f04f 34ff 	mov.w	r4, #4294967295
 80022a8:	4620      	mov	r0, r4
 80022aa:	b003      	add	sp, #12
 80022ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022ae:	2e02      	cmp	r6, #2
 80022b0:	d903      	bls.n	80022ba <_swilseek+0x2c>
 80022b2:	f000 fc89 	bl	8002bc8 <__errno>
 80022b6:	2316      	movs	r3, #22
 80022b8:	e7f3      	b.n	80022a2 <_swilseek+0x14>
 80022ba:	2e01      	cmp	r6, #1
 80022bc:	d112      	bne.n	80022e4 <_swilseek+0x56>
 80022be:	6843      	ldr	r3, [r0, #4]
 80022c0:	18e4      	adds	r4, r4, r3
 80022c2:	d4f6      	bmi.n	80022b2 <_swilseek+0x24>
 80022c4:	682b      	ldr	r3, [r5, #0]
 80022c6:	260a      	movs	r6, #10
 80022c8:	466f      	mov	r7, sp
 80022ca:	e9cd 3400 	strd	r3, r4, [sp]
 80022ce:	4630      	mov	r0, r6
 80022d0:	4639      	mov	r1, r7
 80022d2:	beab      	bkpt	0x00ab
 80022d4:	4606      	mov	r6, r0
 80022d6:	4630      	mov	r0, r6
 80022d8:	f7ff ffaa 	bl	8002230 <checkerror>
 80022dc:	2800      	cmp	r0, #0
 80022de:	dbe1      	blt.n	80022a4 <_swilseek+0x16>
 80022e0:	606c      	str	r4, [r5, #4]
 80022e2:	e7e1      	b.n	80022a8 <_swilseek+0x1a>
 80022e4:	2e02      	cmp	r6, #2
 80022e6:	6803      	ldr	r3, [r0, #0]
 80022e8:	d1ec      	bne.n	80022c4 <_swilseek+0x36>
 80022ea:	260c      	movs	r6, #12
 80022ec:	466f      	mov	r7, sp
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	4630      	mov	r0, r6
 80022f2:	4639      	mov	r1, r7
 80022f4:	beab      	bkpt	0x00ab
 80022f6:	4606      	mov	r6, r0
 80022f8:	4630      	mov	r0, r6
 80022fa:	f7ff ff99 	bl	8002230 <checkerror>
 80022fe:	1c43      	adds	r3, r0, #1
 8002300:	d0d0      	beq.n	80022a4 <_swilseek+0x16>
 8002302:	4404      	add	r4, r0
 8002304:	e7de      	b.n	80022c4 <_swilseek+0x36>

08002306 <_lseek>:
 8002306:	f7ff bfc2 	b.w	800228e <_swilseek>

0800230a <_swiwrite>:
 800230a:	b530      	push	{r4, r5, lr}
 800230c:	b085      	sub	sp, #20
 800230e:	2405      	movs	r4, #5
 8002310:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002314:	9203      	str	r2, [sp, #12]
 8002316:	ad01      	add	r5, sp, #4
 8002318:	4620      	mov	r0, r4
 800231a:	4629      	mov	r1, r5
 800231c:	beab      	bkpt	0x00ab
 800231e:	4604      	mov	r4, r0
 8002320:	4620      	mov	r0, r4
 8002322:	f7ff ff85 	bl	8002230 <checkerror>
 8002326:	b005      	add	sp, #20
 8002328:	bd30      	pop	{r4, r5, pc}

0800232a <_write>:
 800232a:	b570      	push	{r4, r5, r6, lr}
 800232c:	460e      	mov	r6, r1
 800232e:	4615      	mov	r5, r2
 8002330:	f7ff ff56 	bl	80021e0 <findslot>
 8002334:	4604      	mov	r4, r0
 8002336:	b930      	cbnz	r0, 8002346 <_write+0x1c>
 8002338:	f000 fc46 	bl	8002bc8 <__errno>
 800233c:	2309      	movs	r3, #9
 800233e:	6003      	str	r3, [r0, #0]
 8002340:	f04f 30ff 	mov.w	r0, #4294967295
 8002344:	bd70      	pop	{r4, r5, r6, pc}
 8002346:	462a      	mov	r2, r5
 8002348:	4631      	mov	r1, r6
 800234a:	6800      	ldr	r0, [r0, #0]
 800234c:	f7ff ffdd 	bl	800230a <_swiwrite>
 8002350:	1e03      	subs	r3, r0, #0
 8002352:	dbf5      	blt.n	8002340 <_write+0x16>
 8002354:	6862      	ldr	r2, [r4, #4]
 8002356:	1ae8      	subs	r0, r5, r3
 8002358:	4402      	add	r2, r0
 800235a:	42ab      	cmp	r3, r5
 800235c:	6062      	str	r2, [r4, #4]
 800235e:	d1f1      	bne.n	8002344 <_write+0x1a>
 8002360:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002364:	2000      	movs	r0, #0
 8002366:	f7ff bf55 	b.w	8002214 <error>

0800236a <_swiclose>:
 800236a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800236c:	2402      	movs	r4, #2
 800236e:	9001      	str	r0, [sp, #4]
 8002370:	ad01      	add	r5, sp, #4
 8002372:	4620      	mov	r0, r4
 8002374:	4629      	mov	r1, r5
 8002376:	beab      	bkpt	0x00ab
 8002378:	4604      	mov	r4, r0
 800237a:	4620      	mov	r0, r4
 800237c:	f7ff ff58 	bl	8002230 <checkerror>
 8002380:	b003      	add	sp, #12
 8002382:	bd30      	pop	{r4, r5, pc}

08002384 <_close>:
 8002384:	b538      	push	{r3, r4, r5, lr}
 8002386:	4605      	mov	r5, r0
 8002388:	f7ff ff2a 	bl	80021e0 <findslot>
 800238c:	4604      	mov	r4, r0
 800238e:	b930      	cbnz	r0, 800239e <_close+0x1a>
 8002390:	f000 fc1a 	bl	8002bc8 <__errno>
 8002394:	2309      	movs	r3, #9
 8002396:	6003      	str	r3, [r0, #0]
 8002398:	f04f 30ff 	mov.w	r0, #4294967295
 800239c:	bd38      	pop	{r3, r4, r5, pc}
 800239e:	3d01      	subs	r5, #1
 80023a0:	2d01      	cmp	r5, #1
 80023a2:	d809      	bhi.n	80023b8 <_close+0x34>
 80023a4:	4b09      	ldr	r3, [pc, #36]	@ (80023cc <_close+0x48>)
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d104      	bne.n	80023b8 <_close+0x34>
 80023ae:	f04f 33ff 	mov.w	r3, #4294967295
 80023b2:	6003      	str	r3, [r0, #0]
 80023b4:	2000      	movs	r0, #0
 80023b6:	e7f1      	b.n	800239c <_close+0x18>
 80023b8:	6820      	ldr	r0, [r4, #0]
 80023ba:	f7ff ffd6 	bl	800236a <_swiclose>
 80023be:	2800      	cmp	r0, #0
 80023c0:	d1ec      	bne.n	800239c <_close+0x18>
 80023c2:	f04f 33ff 	mov.w	r3, #4294967295
 80023c6:	6023      	str	r3, [r4, #0]
 80023c8:	e7e8      	b.n	800239c <_close+0x18>
 80023ca:	bf00      	nop
 80023cc:	200001b0 	.word	0x200001b0

080023d0 <_swistat>:
 80023d0:	b570      	push	{r4, r5, r6, lr}
 80023d2:	460c      	mov	r4, r1
 80023d4:	f7ff ff04 	bl	80021e0 <findslot>
 80023d8:	4605      	mov	r5, r0
 80023da:	b930      	cbnz	r0, 80023ea <_swistat+0x1a>
 80023dc:	f000 fbf4 	bl	8002bc8 <__errno>
 80023e0:	2309      	movs	r3, #9
 80023e2:	6003      	str	r3, [r0, #0]
 80023e4:	f04f 30ff 	mov.w	r0, #4294967295
 80023e8:	bd70      	pop	{r4, r5, r6, pc}
 80023ea:	6863      	ldr	r3, [r4, #4]
 80023ec:	260c      	movs	r6, #12
 80023ee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80023f2:	6063      	str	r3, [r4, #4]
 80023f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023f8:	64a3      	str	r3, [r4, #72]	@ 0x48
 80023fa:	4630      	mov	r0, r6
 80023fc:	4629      	mov	r1, r5
 80023fe:	beab      	bkpt	0x00ab
 8002400:	4605      	mov	r5, r0
 8002402:	4628      	mov	r0, r5
 8002404:	f7ff ff14 	bl	8002230 <checkerror>
 8002408:	1c43      	adds	r3, r0, #1
 800240a:	d0eb      	beq.n	80023e4 <_swistat+0x14>
 800240c:	6120      	str	r0, [r4, #16]
 800240e:	2000      	movs	r0, #0
 8002410:	e7ea      	b.n	80023e8 <_swistat+0x18>

08002412 <_fstat>:
 8002412:	460b      	mov	r3, r1
 8002414:	b510      	push	{r4, lr}
 8002416:	2100      	movs	r1, #0
 8002418:	4604      	mov	r4, r0
 800241a:	2258      	movs	r2, #88	@ 0x58
 800241c:	4618      	mov	r0, r3
 800241e:	f000 fb84 	bl	8002b2a <memset>
 8002422:	4601      	mov	r1, r0
 8002424:	4620      	mov	r0, r4
 8002426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800242a:	f7ff bfd1 	b.w	80023d0 <_swistat>

0800242e <_stat>:
 800242e:	b538      	push	{r3, r4, r5, lr}
 8002430:	460d      	mov	r5, r1
 8002432:	4604      	mov	r4, r0
 8002434:	2258      	movs	r2, #88	@ 0x58
 8002436:	2100      	movs	r1, #0
 8002438:	4628      	mov	r0, r5
 800243a:	f000 fb76 	bl	8002b2a <memset>
 800243e:	4620      	mov	r0, r4
 8002440:	2100      	movs	r1, #0
 8002442:	f000 f811 	bl	8002468 <_swiopen>
 8002446:	1c43      	adds	r3, r0, #1
 8002448:	4604      	mov	r4, r0
 800244a:	d00b      	beq.n	8002464 <_stat+0x36>
 800244c:	686b      	ldr	r3, [r5, #4]
 800244e:	4629      	mov	r1, r5
 8002450:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8002454:	606b      	str	r3, [r5, #4]
 8002456:	f7ff ffbb 	bl	80023d0 <_swistat>
 800245a:	4605      	mov	r5, r0
 800245c:	4620      	mov	r0, r4
 800245e:	f7ff ff91 	bl	8002384 <_close>
 8002462:	462c      	mov	r4, r5
 8002464:	4620      	mov	r0, r4
 8002466:	bd38      	pop	{r3, r4, r5, pc}

08002468 <_swiopen>:
 8002468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800246c:	4607      	mov	r7, r0
 800246e:	460e      	mov	r6, r1
 8002470:	2400      	movs	r4, #0
 8002472:	f8df 90a4 	ldr.w	r9, [pc, #164]	@ 8002518 <_swiopen+0xb0>
 8002476:	b096      	sub	sp, #88	@ 0x58
 8002478:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 800247c:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8002480:	3301      	adds	r3, #1
 8002482:	d032      	beq.n	80024ea <_swiopen+0x82>
 8002484:	3401      	adds	r4, #1
 8002486:	2c14      	cmp	r4, #20
 8002488:	d1f6      	bne.n	8002478 <_swiopen+0x10>
 800248a:	f000 fb9d 	bl	8002bc8 <__errno>
 800248e:	2318      	movs	r3, #24
 8002490:	e03a      	b.n	8002508 <_swiopen+0xa0>
 8002492:	f240 6301 	movw	r3, #1537	@ 0x601
 8002496:	f3c6 4500 	ubfx	r5, r6, #16, #1
 800249a:	07b2      	lsls	r2, r6, #30
 800249c:	bf48      	it	mi
 800249e:	f045 0502 	orrmi.w	r5, r5, #2
 80024a2:	421e      	tst	r6, r3
 80024a4:	bf18      	it	ne
 80024a6:	f045 0504 	orrne.w	r5, r5, #4
 80024aa:	0733      	lsls	r3, r6, #28
 80024ac:	bf48      	it	mi
 80024ae:	f025 0504 	bicmi.w	r5, r5, #4
 80024b2:	4638      	mov	r0, r7
 80024b4:	bf48      	it	mi
 80024b6:	f045 0508 	orrmi.w	r5, r5, #8
 80024ba:	9700      	str	r7, [sp, #0]
 80024bc:	f7fd fe46 	bl	800014c <strlen>
 80024c0:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80024c4:	2501      	movs	r5, #1
 80024c6:	4628      	mov	r0, r5
 80024c8:	4651      	mov	r1, sl
 80024ca:	beab      	bkpt	0x00ab
 80024cc:	4605      	mov	r5, r0
 80024ce:	2d00      	cmp	r5, #0
 80024d0:	db06      	blt.n	80024e0 <_swiopen+0x78>
 80024d2:	2300      	movs	r3, #0
 80024d4:	44c8      	add	r8, r9
 80024d6:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 80024da:	f8c8 3004 	str.w	r3, [r8, #4]
 80024de:	e016      	b.n	800250e <_swiopen+0xa6>
 80024e0:	4628      	mov	r0, r5
 80024e2:	f7ff fe97 	bl	8002214 <error>
 80024e6:	4604      	mov	r4, r0
 80024e8:	e011      	b.n	800250e <_swiopen+0xa6>
 80024ea:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80024ee:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80024f2:	46ea      	mov	sl, sp
 80024f4:	d1cd      	bne.n	8002492 <_swiopen+0x2a>
 80024f6:	4651      	mov	r1, sl
 80024f8:	4638      	mov	r0, r7
 80024fa:	f7ff ff98 	bl	800242e <_stat>
 80024fe:	3001      	adds	r0, #1
 8002500:	d0c7      	beq.n	8002492 <_swiopen+0x2a>
 8002502:	f000 fb61 	bl	8002bc8 <__errno>
 8002506:	2311      	movs	r3, #17
 8002508:	f04f 34ff 	mov.w	r4, #4294967295
 800250c:	6003      	str	r3, [r0, #0]
 800250e:	4620      	mov	r0, r4
 8002510:	b016      	add	sp, #88	@ 0x58
 8002512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002516:	bf00      	nop
 8002518:	200001b0 	.word	0x200001b0

0800251c <_get_semihosting_exts>:
 800251c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002520:	4606      	mov	r6, r0
 8002522:	460f      	mov	r7, r1
 8002524:	4829      	ldr	r0, [pc, #164]	@ (80025cc <_get_semihosting_exts+0xb0>)
 8002526:	2100      	movs	r1, #0
 8002528:	4615      	mov	r5, r2
 800252a:	f7ff ff9d 	bl	8002468 <_swiopen>
 800252e:	4604      	mov	r4, r0
 8002530:	462a      	mov	r2, r5
 8002532:	2100      	movs	r1, #0
 8002534:	4630      	mov	r0, r6
 8002536:	f000 faf8 	bl	8002b2a <memset>
 800253a:	1c63      	adds	r3, r4, #1
 800253c:	d014      	beq.n	8002568 <_get_semihosting_exts+0x4c>
 800253e:	4620      	mov	r0, r4
 8002540:	f7ff fe4e 	bl	80021e0 <findslot>
 8002544:	f04f 080c 	mov.w	r8, #12
 8002548:	4681      	mov	r9, r0
 800254a:	4640      	mov	r0, r8
 800254c:	4649      	mov	r1, r9
 800254e:	beab      	bkpt	0x00ab
 8002550:	4680      	mov	r8, r0
 8002552:	4640      	mov	r0, r8
 8002554:	f7ff fe6c 	bl	8002230 <checkerror>
 8002558:	2803      	cmp	r0, #3
 800255a:	dd02      	ble.n	8002562 <_get_semihosting_exts+0x46>
 800255c:	1ec3      	subs	r3, r0, #3
 800255e:	42ab      	cmp	r3, r5
 8002560:	dc07      	bgt.n	8002572 <_get_semihosting_exts+0x56>
 8002562:	4620      	mov	r0, r4
 8002564:	f7ff ff0e 	bl	8002384 <_close>
 8002568:	f04f 30ff 	mov.w	r0, #4294967295
 800256c:	b003      	add	sp, #12
 800256e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002572:	2204      	movs	r2, #4
 8002574:	4620      	mov	r0, r4
 8002576:	eb0d 0102 	add.w	r1, sp, r2
 800257a:	f7ff fe6e 	bl	800225a <_read>
 800257e:	2803      	cmp	r0, #3
 8002580:	ddef      	ble.n	8002562 <_get_semihosting_exts+0x46>
 8002582:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002586:	2b53      	cmp	r3, #83	@ 0x53
 8002588:	d1eb      	bne.n	8002562 <_get_semihosting_exts+0x46>
 800258a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800258e:	2b48      	cmp	r3, #72	@ 0x48
 8002590:	d1e7      	bne.n	8002562 <_get_semihosting_exts+0x46>
 8002592:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002596:	2b46      	cmp	r3, #70	@ 0x46
 8002598:	d1e3      	bne.n	8002562 <_get_semihosting_exts+0x46>
 800259a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800259e:	2b42      	cmp	r3, #66	@ 0x42
 80025a0:	d1df      	bne.n	8002562 <_get_semihosting_exts+0x46>
 80025a2:	2201      	movs	r2, #1
 80025a4:	4639      	mov	r1, r7
 80025a6:	4620      	mov	r0, r4
 80025a8:	f7ff fe71 	bl	800228e <_swilseek>
 80025ac:	2800      	cmp	r0, #0
 80025ae:	dbd8      	blt.n	8002562 <_get_semihosting_exts+0x46>
 80025b0:	462a      	mov	r2, r5
 80025b2:	4631      	mov	r1, r6
 80025b4:	4620      	mov	r0, r4
 80025b6:	f7ff fe50 	bl	800225a <_read>
 80025ba:	4605      	mov	r5, r0
 80025bc:	4620      	mov	r0, r4
 80025be:	f7ff fee1 	bl	8002384 <_close>
 80025c2:	4628      	mov	r0, r5
 80025c4:	f7ff fe34 	bl	8002230 <checkerror>
 80025c8:	e7d0      	b.n	800256c <_get_semihosting_exts+0x50>
 80025ca:	bf00      	nop
 80025cc:	08003d80 	.word	0x08003d80

080025d0 <initialise_semihosting_exts>:
 80025d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80025d2:	2100      	movs	r1, #0
 80025d4:	2201      	movs	r2, #1
 80025d6:	4d09      	ldr	r5, [pc, #36]	@ (80025fc <initialise_semihosting_exts+0x2c>)
 80025d8:	4c09      	ldr	r4, [pc, #36]	@ (8002600 <initialise_semihosting_exts+0x30>)
 80025da:	a801      	add	r0, sp, #4
 80025dc:	6029      	str	r1, [r5, #0]
 80025de:	6022      	str	r2, [r4, #0]
 80025e0:	f7ff ff9c 	bl	800251c <_get_semihosting_exts>
 80025e4:	2800      	cmp	r0, #0
 80025e6:	dd07      	ble.n	80025f8 <initialise_semihosting_exts+0x28>
 80025e8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80025ec:	f003 0201 	and.w	r2, r3, #1
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	602a      	str	r2, [r5, #0]
 80025f6:	6023      	str	r3, [r4, #0]
 80025f8:	b003      	add	sp, #12
 80025fa:	bd30      	pop	{r4, r5, pc}
 80025fc:	20000038 	.word	0x20000038
 8002600:	20000034 	.word	0x20000034

08002604 <_has_ext_stdout_stderr>:
 8002604:	b510      	push	{r4, lr}
 8002606:	4c04      	ldr	r4, [pc, #16]	@ (8002618 <_has_ext_stdout_stderr+0x14>)
 8002608:	6823      	ldr	r3, [r4, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	da01      	bge.n	8002612 <_has_ext_stdout_stderr+0xe>
 800260e:	f7ff ffdf 	bl	80025d0 <initialise_semihosting_exts>
 8002612:	6820      	ldr	r0, [r4, #0]
 8002614:	bd10      	pop	{r4, pc}
 8002616:	bf00      	nop
 8002618:	20000034 	.word	0x20000034

0800261c <initialise_monitor_handles>:
 800261c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002620:	2303      	movs	r3, #3
 8002622:	2400      	movs	r4, #0
 8002624:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 80026c8 <initialise_monitor_handles+0xac>
 8002628:	b085      	sub	sp, #20
 800262a:	f8cd 9004 	str.w	r9, [sp, #4]
 800262e:	af01      	add	r7, sp, #4
 8002630:	9303      	str	r3, [sp, #12]
 8002632:	2501      	movs	r5, #1
 8002634:	9402      	str	r4, [sp, #8]
 8002636:	4628      	mov	r0, r5
 8002638:	4639      	mov	r1, r7
 800263a:	beab      	bkpt	0x00ab
 800263c:	4605      	mov	r5, r0
 800263e:	f04f 32ff 	mov.w	r2, #4294967295
 8002642:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 80026cc <initialise_monitor_handles+0xb0>
 8002646:	4623      	mov	r3, r4
 8002648:	4c21      	ldr	r4, [pc, #132]	@ (80026d0 <initialise_monitor_handles+0xb4>)
 800264a:	f8c8 5000 	str.w	r5, [r8]
 800264e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8002652:	3301      	adds	r3, #1
 8002654:	2b14      	cmp	r3, #20
 8002656:	d1fa      	bne.n	800264e <initialise_monitor_handles+0x32>
 8002658:	f7ff ffd4 	bl	8002604 <_has_ext_stdout_stderr>
 800265c:	4d1d      	ldr	r5, [pc, #116]	@ (80026d4 <initialise_monitor_handles+0xb8>)
 800265e:	b1d0      	cbz	r0, 8002696 <initialise_monitor_handles+0x7a>
 8002660:	f04f 0a03 	mov.w	sl, #3
 8002664:	2304      	movs	r3, #4
 8002666:	f8cd 9004 	str.w	r9, [sp, #4]
 800266a:	2601      	movs	r6, #1
 800266c:	f8cd a00c 	str.w	sl, [sp, #12]
 8002670:	9302      	str	r3, [sp, #8]
 8002672:	4630      	mov	r0, r6
 8002674:	4639      	mov	r1, r7
 8002676:	beab      	bkpt	0x00ab
 8002678:	4683      	mov	fp, r0
 800267a:	4b17      	ldr	r3, [pc, #92]	@ (80026d8 <initialise_monitor_handles+0xbc>)
 800267c:	f8cd 9004 	str.w	r9, [sp, #4]
 8002680:	f8c3 b000 	str.w	fp, [r3]
 8002684:	2308      	movs	r3, #8
 8002686:	f8cd a00c 	str.w	sl, [sp, #12]
 800268a:	9302      	str	r3, [sp, #8]
 800268c:	4630      	mov	r0, r6
 800268e:	4639      	mov	r1, r7
 8002690:	beab      	bkpt	0x00ab
 8002692:	4606      	mov	r6, r0
 8002694:	602e      	str	r6, [r5, #0]
 8002696:	2600      	movs	r6, #0
 8002698:	682b      	ldr	r3, [r5, #0]
 800269a:	6066      	str	r6, [r4, #4]
 800269c:	3301      	adds	r3, #1
 800269e:	bf02      	ittt	eq
 80026a0:	4b0d      	ldreq	r3, [pc, #52]	@ (80026d8 <initialise_monitor_handles+0xbc>)
 80026a2:	681b      	ldreq	r3, [r3, #0]
 80026a4:	602b      	streq	r3, [r5, #0]
 80026a6:	f8d8 3000 	ldr.w	r3, [r8]
 80026aa:	6023      	str	r3, [r4, #0]
 80026ac:	f7ff ffaa 	bl	8002604 <_has_ext_stdout_stderr>
 80026b0:	b130      	cbz	r0, 80026c0 <initialise_monitor_handles+0xa4>
 80026b2:	4b09      	ldr	r3, [pc, #36]	@ (80026d8 <initialise_monitor_handles+0xbc>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80026ba:	682b      	ldr	r3, [r5, #0]
 80026bc:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80026c0:	b005      	add	sp, #20
 80026c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026c6:	bf00      	nop
 80026c8:	08003d96 	.word	0x08003d96
 80026cc:	200001ac 	.word	0x200001ac
 80026d0:	200001b0 	.word	0x200001b0
 80026d4:	200001a4 	.word	0x200001a4
 80026d8:	200001a8 	.word	0x200001a8

080026dc <_isatty>:
 80026dc:	b570      	push	{r4, r5, r6, lr}
 80026de:	f7ff fd7f 	bl	80021e0 <findslot>
 80026e2:	2409      	movs	r4, #9
 80026e4:	4605      	mov	r5, r0
 80026e6:	b920      	cbnz	r0, 80026f2 <_isatty+0x16>
 80026e8:	f000 fa6e 	bl	8002bc8 <__errno>
 80026ec:	6004      	str	r4, [r0, #0]
 80026ee:	2000      	movs	r0, #0
 80026f0:	bd70      	pop	{r4, r5, r6, pc}
 80026f2:	4620      	mov	r0, r4
 80026f4:	4629      	mov	r1, r5
 80026f6:	beab      	bkpt	0x00ab
 80026f8:	4604      	mov	r4, r0
 80026fa:	2c01      	cmp	r4, #1
 80026fc:	4620      	mov	r0, r4
 80026fe:	d0f7      	beq.n	80026f0 <_isatty+0x14>
 8002700:	f000 fa62 	bl	8002bc8 <__errno>
 8002704:	2513      	movs	r5, #19
 8002706:	4604      	mov	r4, r0
 8002708:	2600      	movs	r6, #0
 800270a:	4628      	mov	r0, r5
 800270c:	4631      	mov	r1, r6
 800270e:	beab      	bkpt	0x00ab
 8002710:	4605      	mov	r5, r0
 8002712:	6025      	str	r5, [r4, #0]
 8002714:	e7eb      	b.n	80026ee <_isatty+0x12>
	...

08002718 <__sflush_r>:
 8002718:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800271c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271e:	0716      	lsls	r6, r2, #28
 8002720:	4605      	mov	r5, r0
 8002722:	460c      	mov	r4, r1
 8002724:	d454      	bmi.n	80027d0 <__sflush_r+0xb8>
 8002726:	684b      	ldr	r3, [r1, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	dc02      	bgt.n	8002732 <__sflush_r+0x1a>
 800272c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800272e:	2b00      	cmp	r3, #0
 8002730:	dd48      	ble.n	80027c4 <__sflush_r+0xac>
 8002732:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002734:	2e00      	cmp	r6, #0
 8002736:	d045      	beq.n	80027c4 <__sflush_r+0xac>
 8002738:	2300      	movs	r3, #0
 800273a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800273e:	682f      	ldr	r7, [r5, #0]
 8002740:	6a21      	ldr	r1, [r4, #32]
 8002742:	602b      	str	r3, [r5, #0]
 8002744:	d030      	beq.n	80027a8 <__sflush_r+0x90>
 8002746:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002748:	89a3      	ldrh	r3, [r4, #12]
 800274a:	0759      	lsls	r1, r3, #29
 800274c:	d505      	bpl.n	800275a <__sflush_r+0x42>
 800274e:	6863      	ldr	r3, [r4, #4]
 8002750:	1ad2      	subs	r2, r2, r3
 8002752:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002754:	b10b      	cbz	r3, 800275a <__sflush_r+0x42>
 8002756:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002758:	1ad2      	subs	r2, r2, r3
 800275a:	2300      	movs	r3, #0
 800275c:	4628      	mov	r0, r5
 800275e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002760:	6a21      	ldr	r1, [r4, #32]
 8002762:	47b0      	blx	r6
 8002764:	1c43      	adds	r3, r0, #1
 8002766:	89a3      	ldrh	r3, [r4, #12]
 8002768:	d106      	bne.n	8002778 <__sflush_r+0x60>
 800276a:	6829      	ldr	r1, [r5, #0]
 800276c:	291d      	cmp	r1, #29
 800276e:	d82b      	bhi.n	80027c8 <__sflush_r+0xb0>
 8002770:	4a28      	ldr	r2, [pc, #160]	@ (8002814 <__sflush_r+0xfc>)
 8002772:	40ca      	lsrs	r2, r1
 8002774:	07d6      	lsls	r6, r2, #31
 8002776:	d527      	bpl.n	80027c8 <__sflush_r+0xb0>
 8002778:	2200      	movs	r2, #0
 800277a:	6062      	str	r2, [r4, #4]
 800277c:	6922      	ldr	r2, [r4, #16]
 800277e:	04d9      	lsls	r1, r3, #19
 8002780:	6022      	str	r2, [r4, #0]
 8002782:	d504      	bpl.n	800278e <__sflush_r+0x76>
 8002784:	1c42      	adds	r2, r0, #1
 8002786:	d101      	bne.n	800278c <__sflush_r+0x74>
 8002788:	682b      	ldr	r3, [r5, #0]
 800278a:	b903      	cbnz	r3, 800278e <__sflush_r+0x76>
 800278c:	6560      	str	r0, [r4, #84]	@ 0x54
 800278e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002790:	602f      	str	r7, [r5, #0]
 8002792:	b1b9      	cbz	r1, 80027c4 <__sflush_r+0xac>
 8002794:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002798:	4299      	cmp	r1, r3
 800279a:	d002      	beq.n	80027a2 <__sflush_r+0x8a>
 800279c:	4628      	mov	r0, r5
 800279e:	f000 fa41 	bl	8002c24 <_free_r>
 80027a2:	2300      	movs	r3, #0
 80027a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80027a6:	e00d      	b.n	80027c4 <__sflush_r+0xac>
 80027a8:	2301      	movs	r3, #1
 80027aa:	4628      	mov	r0, r5
 80027ac:	47b0      	blx	r6
 80027ae:	4602      	mov	r2, r0
 80027b0:	1c50      	adds	r0, r2, #1
 80027b2:	d1c9      	bne.n	8002748 <__sflush_r+0x30>
 80027b4:	682b      	ldr	r3, [r5, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0c6      	beq.n	8002748 <__sflush_r+0x30>
 80027ba:	2b1d      	cmp	r3, #29
 80027bc:	d001      	beq.n	80027c2 <__sflush_r+0xaa>
 80027be:	2b16      	cmp	r3, #22
 80027c0:	d11d      	bne.n	80027fe <__sflush_r+0xe6>
 80027c2:	602f      	str	r7, [r5, #0]
 80027c4:	2000      	movs	r0, #0
 80027c6:	e021      	b.n	800280c <__sflush_r+0xf4>
 80027c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027cc:	b21b      	sxth	r3, r3
 80027ce:	e01a      	b.n	8002806 <__sflush_r+0xee>
 80027d0:	690f      	ldr	r7, [r1, #16]
 80027d2:	2f00      	cmp	r7, #0
 80027d4:	d0f6      	beq.n	80027c4 <__sflush_r+0xac>
 80027d6:	0793      	lsls	r3, r2, #30
 80027d8:	bf18      	it	ne
 80027da:	2300      	movne	r3, #0
 80027dc:	680e      	ldr	r6, [r1, #0]
 80027de:	bf08      	it	eq
 80027e0:	694b      	ldreq	r3, [r1, #20]
 80027e2:	1bf6      	subs	r6, r6, r7
 80027e4:	600f      	str	r7, [r1, #0]
 80027e6:	608b      	str	r3, [r1, #8]
 80027e8:	2e00      	cmp	r6, #0
 80027ea:	ddeb      	ble.n	80027c4 <__sflush_r+0xac>
 80027ec:	4633      	mov	r3, r6
 80027ee:	463a      	mov	r2, r7
 80027f0:	4628      	mov	r0, r5
 80027f2:	6a21      	ldr	r1, [r4, #32]
 80027f4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80027f8:	47e0      	blx	ip
 80027fa:	2800      	cmp	r0, #0
 80027fc:	dc07      	bgt.n	800280e <__sflush_r+0xf6>
 80027fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002802:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002806:	f04f 30ff 	mov.w	r0, #4294967295
 800280a:	81a3      	strh	r3, [r4, #12]
 800280c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800280e:	4407      	add	r7, r0
 8002810:	1a36      	subs	r6, r6, r0
 8002812:	e7e9      	b.n	80027e8 <__sflush_r+0xd0>
 8002814:	20400001 	.word	0x20400001

08002818 <_fflush_r>:
 8002818:	b538      	push	{r3, r4, r5, lr}
 800281a:	690b      	ldr	r3, [r1, #16]
 800281c:	4605      	mov	r5, r0
 800281e:	460c      	mov	r4, r1
 8002820:	b913      	cbnz	r3, 8002828 <_fflush_r+0x10>
 8002822:	2500      	movs	r5, #0
 8002824:	4628      	mov	r0, r5
 8002826:	bd38      	pop	{r3, r4, r5, pc}
 8002828:	b118      	cbz	r0, 8002832 <_fflush_r+0x1a>
 800282a:	6a03      	ldr	r3, [r0, #32]
 800282c:	b90b      	cbnz	r3, 8002832 <_fflush_r+0x1a>
 800282e:	f000 f8bb 	bl	80029a8 <__sinit>
 8002832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f3      	beq.n	8002822 <_fflush_r+0xa>
 800283a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800283c:	07d0      	lsls	r0, r2, #31
 800283e:	d404      	bmi.n	800284a <_fflush_r+0x32>
 8002840:	0599      	lsls	r1, r3, #22
 8002842:	d402      	bmi.n	800284a <_fflush_r+0x32>
 8002844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002846:	f000 f9ea 	bl	8002c1e <__retarget_lock_acquire_recursive>
 800284a:	4628      	mov	r0, r5
 800284c:	4621      	mov	r1, r4
 800284e:	f7ff ff63 	bl	8002718 <__sflush_r>
 8002852:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002854:	4605      	mov	r5, r0
 8002856:	07da      	lsls	r2, r3, #31
 8002858:	d4e4      	bmi.n	8002824 <_fflush_r+0xc>
 800285a:	89a3      	ldrh	r3, [r4, #12]
 800285c:	059b      	lsls	r3, r3, #22
 800285e:	d4e1      	bmi.n	8002824 <_fflush_r+0xc>
 8002860:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002862:	f000 f9dd 	bl	8002c20 <__retarget_lock_release_recursive>
 8002866:	e7dd      	b.n	8002824 <_fflush_r+0xc>

08002868 <fflush>:
 8002868:	4601      	mov	r1, r0
 800286a:	b920      	cbnz	r0, 8002876 <fflush+0xe>
 800286c:	4a04      	ldr	r2, [pc, #16]	@ (8002880 <fflush+0x18>)
 800286e:	4905      	ldr	r1, [pc, #20]	@ (8002884 <fflush+0x1c>)
 8002870:	4805      	ldr	r0, [pc, #20]	@ (8002888 <fflush+0x20>)
 8002872:	f000 b8b1 	b.w	80029d8 <_fwalk_sglue>
 8002876:	4b05      	ldr	r3, [pc, #20]	@ (800288c <fflush+0x24>)
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	f7ff bfcd 	b.w	8002818 <_fflush_r>
 800287e:	bf00      	nop
 8002880:	2000003c 	.word	0x2000003c
 8002884:	08002819 	.word	0x08002819
 8002888:	2000004c 	.word	0x2000004c
 800288c:	20000048 	.word	0x20000048

08002890 <std>:
 8002890:	2300      	movs	r3, #0
 8002892:	b510      	push	{r4, lr}
 8002894:	4604      	mov	r4, r0
 8002896:	e9c0 3300 	strd	r3, r3, [r0]
 800289a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800289e:	6083      	str	r3, [r0, #8]
 80028a0:	8181      	strh	r1, [r0, #12]
 80028a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80028a4:	81c2      	strh	r2, [r0, #14]
 80028a6:	6183      	str	r3, [r0, #24]
 80028a8:	4619      	mov	r1, r3
 80028aa:	2208      	movs	r2, #8
 80028ac:	305c      	adds	r0, #92	@ 0x5c
 80028ae:	f000 f93c 	bl	8002b2a <memset>
 80028b2:	4b0d      	ldr	r3, [pc, #52]	@ (80028e8 <std+0x58>)
 80028b4:	6224      	str	r4, [r4, #32]
 80028b6:	6263      	str	r3, [r4, #36]	@ 0x24
 80028b8:	4b0c      	ldr	r3, [pc, #48]	@ (80028ec <std+0x5c>)
 80028ba:	62a3      	str	r3, [r4, #40]	@ 0x28
 80028bc:	4b0c      	ldr	r3, [pc, #48]	@ (80028f0 <std+0x60>)
 80028be:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80028c0:	4b0c      	ldr	r3, [pc, #48]	@ (80028f4 <std+0x64>)
 80028c2:	6323      	str	r3, [r4, #48]	@ 0x30
 80028c4:	4b0c      	ldr	r3, [pc, #48]	@ (80028f8 <std+0x68>)
 80028c6:	429c      	cmp	r4, r3
 80028c8:	d006      	beq.n	80028d8 <std+0x48>
 80028ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80028ce:	4294      	cmp	r4, r2
 80028d0:	d002      	beq.n	80028d8 <std+0x48>
 80028d2:	33d0      	adds	r3, #208	@ 0xd0
 80028d4:	429c      	cmp	r4, r3
 80028d6:	d105      	bne.n	80028e4 <std+0x54>
 80028d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80028dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028e0:	f000 b99c 	b.w	8002c1c <__retarget_lock_init_recursive>
 80028e4:	bd10      	pop	{r4, pc}
 80028e6:	bf00      	nop
 80028e8:	08002aa5 	.word	0x08002aa5
 80028ec:	08002ac7 	.word	0x08002ac7
 80028f0:	08002aff 	.word	0x08002aff
 80028f4:	08002b23 	.word	0x08002b23
 80028f8:	20000250 	.word	0x20000250

080028fc <stdio_exit_handler>:
 80028fc:	4a02      	ldr	r2, [pc, #8]	@ (8002908 <stdio_exit_handler+0xc>)
 80028fe:	4903      	ldr	r1, [pc, #12]	@ (800290c <stdio_exit_handler+0x10>)
 8002900:	4803      	ldr	r0, [pc, #12]	@ (8002910 <stdio_exit_handler+0x14>)
 8002902:	f000 b869 	b.w	80029d8 <_fwalk_sglue>
 8002906:	bf00      	nop
 8002908:	2000003c 	.word	0x2000003c
 800290c:	08002819 	.word	0x08002819
 8002910:	2000004c 	.word	0x2000004c

08002914 <cleanup_stdio>:
 8002914:	6841      	ldr	r1, [r0, #4]
 8002916:	4b0c      	ldr	r3, [pc, #48]	@ (8002948 <cleanup_stdio+0x34>)
 8002918:	b510      	push	{r4, lr}
 800291a:	4299      	cmp	r1, r3
 800291c:	4604      	mov	r4, r0
 800291e:	d001      	beq.n	8002924 <cleanup_stdio+0x10>
 8002920:	f7ff ff7a 	bl	8002818 <_fflush_r>
 8002924:	68a1      	ldr	r1, [r4, #8]
 8002926:	4b09      	ldr	r3, [pc, #36]	@ (800294c <cleanup_stdio+0x38>)
 8002928:	4299      	cmp	r1, r3
 800292a:	d002      	beq.n	8002932 <cleanup_stdio+0x1e>
 800292c:	4620      	mov	r0, r4
 800292e:	f7ff ff73 	bl	8002818 <_fflush_r>
 8002932:	68e1      	ldr	r1, [r4, #12]
 8002934:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <cleanup_stdio+0x3c>)
 8002936:	4299      	cmp	r1, r3
 8002938:	d004      	beq.n	8002944 <cleanup_stdio+0x30>
 800293a:	4620      	mov	r0, r4
 800293c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002940:	f7ff bf6a 	b.w	8002818 <_fflush_r>
 8002944:	bd10      	pop	{r4, pc}
 8002946:	bf00      	nop
 8002948:	20000250 	.word	0x20000250
 800294c:	200002b8 	.word	0x200002b8
 8002950:	20000320 	.word	0x20000320

08002954 <global_stdio_init.part.0>:
 8002954:	b510      	push	{r4, lr}
 8002956:	4b0b      	ldr	r3, [pc, #44]	@ (8002984 <global_stdio_init.part.0+0x30>)
 8002958:	4c0b      	ldr	r4, [pc, #44]	@ (8002988 <global_stdio_init.part.0+0x34>)
 800295a:	4a0c      	ldr	r2, [pc, #48]	@ (800298c <global_stdio_init.part.0+0x38>)
 800295c:	4620      	mov	r0, r4
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	2104      	movs	r1, #4
 8002962:	2200      	movs	r2, #0
 8002964:	f7ff ff94 	bl	8002890 <std>
 8002968:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800296c:	2201      	movs	r2, #1
 800296e:	2109      	movs	r1, #9
 8002970:	f7ff ff8e 	bl	8002890 <std>
 8002974:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002978:	2202      	movs	r2, #2
 800297a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800297e:	2112      	movs	r1, #18
 8002980:	f7ff bf86 	b.w	8002890 <std>
 8002984:	20000388 	.word	0x20000388
 8002988:	20000250 	.word	0x20000250
 800298c:	080028fd 	.word	0x080028fd

08002990 <__sfp_lock_acquire>:
 8002990:	4801      	ldr	r0, [pc, #4]	@ (8002998 <__sfp_lock_acquire+0x8>)
 8002992:	f000 b944 	b.w	8002c1e <__retarget_lock_acquire_recursive>
 8002996:	bf00      	nop
 8002998:	20000391 	.word	0x20000391

0800299c <__sfp_lock_release>:
 800299c:	4801      	ldr	r0, [pc, #4]	@ (80029a4 <__sfp_lock_release+0x8>)
 800299e:	f000 b93f 	b.w	8002c20 <__retarget_lock_release_recursive>
 80029a2:	bf00      	nop
 80029a4:	20000391 	.word	0x20000391

080029a8 <__sinit>:
 80029a8:	b510      	push	{r4, lr}
 80029aa:	4604      	mov	r4, r0
 80029ac:	f7ff fff0 	bl	8002990 <__sfp_lock_acquire>
 80029b0:	6a23      	ldr	r3, [r4, #32]
 80029b2:	b11b      	cbz	r3, 80029bc <__sinit+0x14>
 80029b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029b8:	f7ff bff0 	b.w	800299c <__sfp_lock_release>
 80029bc:	4b04      	ldr	r3, [pc, #16]	@ (80029d0 <__sinit+0x28>)
 80029be:	6223      	str	r3, [r4, #32]
 80029c0:	4b04      	ldr	r3, [pc, #16]	@ (80029d4 <__sinit+0x2c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1f5      	bne.n	80029b4 <__sinit+0xc>
 80029c8:	f7ff ffc4 	bl	8002954 <global_stdio_init.part.0>
 80029cc:	e7f2      	b.n	80029b4 <__sinit+0xc>
 80029ce:	bf00      	nop
 80029d0:	08002915 	.word	0x08002915
 80029d4:	20000388 	.word	0x20000388

080029d8 <_fwalk_sglue>:
 80029d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029dc:	4607      	mov	r7, r0
 80029de:	4688      	mov	r8, r1
 80029e0:	4614      	mov	r4, r2
 80029e2:	2600      	movs	r6, #0
 80029e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80029e8:	f1b9 0901 	subs.w	r9, r9, #1
 80029ec:	d505      	bpl.n	80029fa <_fwalk_sglue+0x22>
 80029ee:	6824      	ldr	r4, [r4, #0]
 80029f0:	2c00      	cmp	r4, #0
 80029f2:	d1f7      	bne.n	80029e4 <_fwalk_sglue+0xc>
 80029f4:	4630      	mov	r0, r6
 80029f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029fa:	89ab      	ldrh	r3, [r5, #12]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d907      	bls.n	8002a10 <_fwalk_sglue+0x38>
 8002a00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002a04:	3301      	adds	r3, #1
 8002a06:	d003      	beq.n	8002a10 <_fwalk_sglue+0x38>
 8002a08:	4629      	mov	r1, r5
 8002a0a:	4638      	mov	r0, r7
 8002a0c:	47c0      	blx	r8
 8002a0e:	4306      	orrs	r6, r0
 8002a10:	3568      	adds	r5, #104	@ 0x68
 8002a12:	e7e9      	b.n	80029e8 <_fwalk_sglue+0x10>

08002a14 <iprintf>:
 8002a14:	b40f      	push	{r0, r1, r2, r3}
 8002a16:	b507      	push	{r0, r1, r2, lr}
 8002a18:	4906      	ldr	r1, [pc, #24]	@ (8002a34 <iprintf+0x20>)
 8002a1a:	ab04      	add	r3, sp, #16
 8002a1c:	6808      	ldr	r0, [r1, #0]
 8002a1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a22:	6881      	ldr	r1, [r0, #8]
 8002a24:	9301      	str	r3, [sp, #4]
 8002a26:	f000 fb73 	bl	8003110 <_vfiprintf_r>
 8002a2a:	b003      	add	sp, #12
 8002a2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a30:	b004      	add	sp, #16
 8002a32:	4770      	bx	lr
 8002a34:	20000048 	.word	0x20000048

08002a38 <sniprintf>:
 8002a38:	b40c      	push	{r2, r3}
 8002a3a:	b530      	push	{r4, r5, lr}
 8002a3c:	4b18      	ldr	r3, [pc, #96]	@ (8002aa0 <sniprintf+0x68>)
 8002a3e:	1e0c      	subs	r4, r1, #0
 8002a40:	681d      	ldr	r5, [r3, #0]
 8002a42:	b09d      	sub	sp, #116	@ 0x74
 8002a44:	da08      	bge.n	8002a58 <sniprintf+0x20>
 8002a46:	238b      	movs	r3, #139	@ 0x8b
 8002a48:	f04f 30ff 	mov.w	r0, #4294967295
 8002a4c:	602b      	str	r3, [r5, #0]
 8002a4e:	b01d      	add	sp, #116	@ 0x74
 8002a50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002a54:	b002      	add	sp, #8
 8002a56:	4770      	bx	lr
 8002a58:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002a5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	931b      	str	r3, [sp, #108]	@ 0x6c
 8002a66:	bf0c      	ite	eq
 8002a68:	4623      	moveq	r3, r4
 8002a6a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002a6e:	9304      	str	r3, [sp, #16]
 8002a70:	9307      	str	r3, [sp, #28]
 8002a72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a76:	9002      	str	r0, [sp, #8]
 8002a78:	9006      	str	r0, [sp, #24]
 8002a7a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002a7e:	4628      	mov	r0, r5
 8002a80:	ab21      	add	r3, sp, #132	@ 0x84
 8002a82:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002a84:	a902      	add	r1, sp, #8
 8002a86:	9301      	str	r3, [sp, #4]
 8002a88:	f000 fa1e 	bl	8002ec8 <_svfiprintf_r>
 8002a8c:	1c43      	adds	r3, r0, #1
 8002a8e:	bfbc      	itt	lt
 8002a90:	238b      	movlt	r3, #139	@ 0x8b
 8002a92:	602b      	strlt	r3, [r5, #0]
 8002a94:	2c00      	cmp	r4, #0
 8002a96:	d0da      	beq.n	8002a4e <sniprintf+0x16>
 8002a98:	2200      	movs	r2, #0
 8002a9a:	9b02      	ldr	r3, [sp, #8]
 8002a9c:	701a      	strb	r2, [r3, #0]
 8002a9e:	e7d6      	b.n	8002a4e <sniprintf+0x16>
 8002aa0:	20000048 	.word	0x20000048

08002aa4 <__sread>:
 8002aa4:	b510      	push	{r4, lr}
 8002aa6:	460c      	mov	r4, r1
 8002aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002aac:	f000 f868 	bl	8002b80 <_read_r>
 8002ab0:	2800      	cmp	r0, #0
 8002ab2:	bfab      	itete	ge
 8002ab4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002ab6:	89a3      	ldrhlt	r3, [r4, #12]
 8002ab8:	181b      	addge	r3, r3, r0
 8002aba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002abe:	bfac      	ite	ge
 8002ac0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002ac2:	81a3      	strhlt	r3, [r4, #12]
 8002ac4:	bd10      	pop	{r4, pc}

08002ac6 <__swrite>:
 8002ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002aca:	461f      	mov	r7, r3
 8002acc:	898b      	ldrh	r3, [r1, #12]
 8002ace:	4605      	mov	r5, r0
 8002ad0:	05db      	lsls	r3, r3, #23
 8002ad2:	460c      	mov	r4, r1
 8002ad4:	4616      	mov	r6, r2
 8002ad6:	d505      	bpl.n	8002ae4 <__swrite+0x1e>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	2200      	movs	r2, #0
 8002adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ae0:	f000 f83c 	bl	8002b5c <_lseek_r>
 8002ae4:	89a3      	ldrh	r3, [r4, #12]
 8002ae6:	4632      	mov	r2, r6
 8002ae8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002aec:	81a3      	strh	r3, [r4, #12]
 8002aee:	4628      	mov	r0, r5
 8002af0:	463b      	mov	r3, r7
 8002af2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002afa:	f000 b853 	b.w	8002ba4 <_write_r>

08002afe <__sseek>:
 8002afe:	b510      	push	{r4, lr}
 8002b00:	460c      	mov	r4, r1
 8002b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b06:	f000 f829 	bl	8002b5c <_lseek_r>
 8002b0a:	1c43      	adds	r3, r0, #1
 8002b0c:	89a3      	ldrh	r3, [r4, #12]
 8002b0e:	bf15      	itete	ne
 8002b10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002b12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002b16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002b1a:	81a3      	strheq	r3, [r4, #12]
 8002b1c:	bf18      	it	ne
 8002b1e:	81a3      	strhne	r3, [r4, #12]
 8002b20:	bd10      	pop	{r4, pc}

08002b22 <__sclose>:
 8002b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b26:	f000 b809 	b.w	8002b3c <_close_r>

08002b2a <memset>:
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	4402      	add	r2, r0
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d100      	bne.n	8002b34 <memset+0xa>
 8002b32:	4770      	bx	lr
 8002b34:	f803 1b01 	strb.w	r1, [r3], #1
 8002b38:	e7f9      	b.n	8002b2e <memset+0x4>
	...

08002b3c <_close_r>:
 8002b3c:	b538      	push	{r3, r4, r5, lr}
 8002b3e:	2300      	movs	r3, #0
 8002b40:	4d05      	ldr	r5, [pc, #20]	@ (8002b58 <_close_r+0x1c>)
 8002b42:	4604      	mov	r4, r0
 8002b44:	4608      	mov	r0, r1
 8002b46:	602b      	str	r3, [r5, #0]
 8002b48:	f7ff fc1c 	bl	8002384 <_close>
 8002b4c:	1c43      	adds	r3, r0, #1
 8002b4e:	d102      	bne.n	8002b56 <_close_r+0x1a>
 8002b50:	682b      	ldr	r3, [r5, #0]
 8002b52:	b103      	cbz	r3, 8002b56 <_close_r+0x1a>
 8002b54:	6023      	str	r3, [r4, #0]
 8002b56:	bd38      	pop	{r3, r4, r5, pc}
 8002b58:	2000038c 	.word	0x2000038c

08002b5c <_lseek_r>:
 8002b5c:	b538      	push	{r3, r4, r5, lr}
 8002b5e:	4604      	mov	r4, r0
 8002b60:	4608      	mov	r0, r1
 8002b62:	4611      	mov	r1, r2
 8002b64:	2200      	movs	r2, #0
 8002b66:	4d05      	ldr	r5, [pc, #20]	@ (8002b7c <_lseek_r+0x20>)
 8002b68:	602a      	str	r2, [r5, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	f7ff fbcb 	bl	8002306 <_lseek>
 8002b70:	1c43      	adds	r3, r0, #1
 8002b72:	d102      	bne.n	8002b7a <_lseek_r+0x1e>
 8002b74:	682b      	ldr	r3, [r5, #0]
 8002b76:	b103      	cbz	r3, 8002b7a <_lseek_r+0x1e>
 8002b78:	6023      	str	r3, [r4, #0]
 8002b7a:	bd38      	pop	{r3, r4, r5, pc}
 8002b7c:	2000038c 	.word	0x2000038c

08002b80 <_read_r>:
 8002b80:	b538      	push	{r3, r4, r5, lr}
 8002b82:	4604      	mov	r4, r0
 8002b84:	4608      	mov	r0, r1
 8002b86:	4611      	mov	r1, r2
 8002b88:	2200      	movs	r2, #0
 8002b8a:	4d05      	ldr	r5, [pc, #20]	@ (8002ba0 <_read_r+0x20>)
 8002b8c:	602a      	str	r2, [r5, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	f7ff fb63 	bl	800225a <_read>
 8002b94:	1c43      	adds	r3, r0, #1
 8002b96:	d102      	bne.n	8002b9e <_read_r+0x1e>
 8002b98:	682b      	ldr	r3, [r5, #0]
 8002b9a:	b103      	cbz	r3, 8002b9e <_read_r+0x1e>
 8002b9c:	6023      	str	r3, [r4, #0]
 8002b9e:	bd38      	pop	{r3, r4, r5, pc}
 8002ba0:	2000038c 	.word	0x2000038c

08002ba4 <_write_r>:
 8002ba4:	b538      	push	{r3, r4, r5, lr}
 8002ba6:	4604      	mov	r4, r0
 8002ba8:	4608      	mov	r0, r1
 8002baa:	4611      	mov	r1, r2
 8002bac:	2200      	movs	r2, #0
 8002bae:	4d05      	ldr	r5, [pc, #20]	@ (8002bc4 <_write_r+0x20>)
 8002bb0:	602a      	str	r2, [r5, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	f7ff fbb9 	bl	800232a <_write>
 8002bb8:	1c43      	adds	r3, r0, #1
 8002bba:	d102      	bne.n	8002bc2 <_write_r+0x1e>
 8002bbc:	682b      	ldr	r3, [r5, #0]
 8002bbe:	b103      	cbz	r3, 8002bc2 <_write_r+0x1e>
 8002bc0:	6023      	str	r3, [r4, #0]
 8002bc2:	bd38      	pop	{r3, r4, r5, pc}
 8002bc4:	2000038c 	.word	0x2000038c

08002bc8 <__errno>:
 8002bc8:	4b01      	ldr	r3, [pc, #4]	@ (8002bd0 <__errno+0x8>)
 8002bca:	6818      	ldr	r0, [r3, #0]
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	20000048 	.word	0x20000048

08002bd4 <__libc_init_array>:
 8002bd4:	b570      	push	{r4, r5, r6, lr}
 8002bd6:	2600      	movs	r6, #0
 8002bd8:	4d0c      	ldr	r5, [pc, #48]	@ (8002c0c <__libc_init_array+0x38>)
 8002bda:	4c0d      	ldr	r4, [pc, #52]	@ (8002c10 <__libc_init_array+0x3c>)
 8002bdc:	1b64      	subs	r4, r4, r5
 8002bde:	10a4      	asrs	r4, r4, #2
 8002be0:	42a6      	cmp	r6, r4
 8002be2:	d109      	bne.n	8002bf8 <__libc_init_array+0x24>
 8002be4:	f000 fed0 	bl	8003988 <_init>
 8002be8:	2600      	movs	r6, #0
 8002bea:	4d0a      	ldr	r5, [pc, #40]	@ (8002c14 <__libc_init_array+0x40>)
 8002bec:	4c0a      	ldr	r4, [pc, #40]	@ (8002c18 <__libc_init_array+0x44>)
 8002bee:	1b64      	subs	r4, r4, r5
 8002bf0:	10a4      	asrs	r4, r4, #2
 8002bf2:	42a6      	cmp	r6, r4
 8002bf4:	d105      	bne.n	8002c02 <__libc_init_array+0x2e>
 8002bf6:	bd70      	pop	{r4, r5, r6, pc}
 8002bf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bfc:	4798      	blx	r3
 8002bfe:	3601      	adds	r6, #1
 8002c00:	e7ee      	b.n	8002be0 <__libc_init_array+0xc>
 8002c02:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c06:	4798      	blx	r3
 8002c08:	3601      	adds	r6, #1
 8002c0a:	e7f2      	b.n	8002bf2 <__libc_init_array+0x1e>
 8002c0c:	08003dd8 	.word	0x08003dd8
 8002c10:	08003dd8 	.word	0x08003dd8
 8002c14:	08003dd8 	.word	0x08003dd8
 8002c18:	08003ddc 	.word	0x08003ddc

08002c1c <__retarget_lock_init_recursive>:
 8002c1c:	4770      	bx	lr

08002c1e <__retarget_lock_acquire_recursive>:
 8002c1e:	4770      	bx	lr

08002c20 <__retarget_lock_release_recursive>:
 8002c20:	4770      	bx	lr
	...

08002c24 <_free_r>:
 8002c24:	b538      	push	{r3, r4, r5, lr}
 8002c26:	4605      	mov	r5, r0
 8002c28:	2900      	cmp	r1, #0
 8002c2a:	d040      	beq.n	8002cae <_free_r+0x8a>
 8002c2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c30:	1f0c      	subs	r4, r1, #4
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	bfb8      	it	lt
 8002c36:	18e4      	addlt	r4, r4, r3
 8002c38:	f000 f8de 	bl	8002df8 <__malloc_lock>
 8002c3c:	4a1c      	ldr	r2, [pc, #112]	@ (8002cb0 <_free_r+0x8c>)
 8002c3e:	6813      	ldr	r3, [r2, #0]
 8002c40:	b933      	cbnz	r3, 8002c50 <_free_r+0x2c>
 8002c42:	6063      	str	r3, [r4, #4]
 8002c44:	6014      	str	r4, [r2, #0]
 8002c46:	4628      	mov	r0, r5
 8002c48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c4c:	f000 b8da 	b.w	8002e04 <__malloc_unlock>
 8002c50:	42a3      	cmp	r3, r4
 8002c52:	d908      	bls.n	8002c66 <_free_r+0x42>
 8002c54:	6820      	ldr	r0, [r4, #0]
 8002c56:	1821      	adds	r1, r4, r0
 8002c58:	428b      	cmp	r3, r1
 8002c5a:	bf01      	itttt	eq
 8002c5c:	6819      	ldreq	r1, [r3, #0]
 8002c5e:	685b      	ldreq	r3, [r3, #4]
 8002c60:	1809      	addeq	r1, r1, r0
 8002c62:	6021      	streq	r1, [r4, #0]
 8002c64:	e7ed      	b.n	8002c42 <_free_r+0x1e>
 8002c66:	461a      	mov	r2, r3
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	b10b      	cbz	r3, 8002c70 <_free_r+0x4c>
 8002c6c:	42a3      	cmp	r3, r4
 8002c6e:	d9fa      	bls.n	8002c66 <_free_r+0x42>
 8002c70:	6811      	ldr	r1, [r2, #0]
 8002c72:	1850      	adds	r0, r2, r1
 8002c74:	42a0      	cmp	r0, r4
 8002c76:	d10b      	bne.n	8002c90 <_free_r+0x6c>
 8002c78:	6820      	ldr	r0, [r4, #0]
 8002c7a:	4401      	add	r1, r0
 8002c7c:	1850      	adds	r0, r2, r1
 8002c7e:	4283      	cmp	r3, r0
 8002c80:	6011      	str	r1, [r2, #0]
 8002c82:	d1e0      	bne.n	8002c46 <_free_r+0x22>
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	4408      	add	r0, r1
 8002c8a:	6010      	str	r0, [r2, #0]
 8002c8c:	6053      	str	r3, [r2, #4]
 8002c8e:	e7da      	b.n	8002c46 <_free_r+0x22>
 8002c90:	d902      	bls.n	8002c98 <_free_r+0x74>
 8002c92:	230c      	movs	r3, #12
 8002c94:	602b      	str	r3, [r5, #0]
 8002c96:	e7d6      	b.n	8002c46 <_free_r+0x22>
 8002c98:	6820      	ldr	r0, [r4, #0]
 8002c9a:	1821      	adds	r1, r4, r0
 8002c9c:	428b      	cmp	r3, r1
 8002c9e:	bf01      	itttt	eq
 8002ca0:	6819      	ldreq	r1, [r3, #0]
 8002ca2:	685b      	ldreq	r3, [r3, #4]
 8002ca4:	1809      	addeq	r1, r1, r0
 8002ca6:	6021      	streq	r1, [r4, #0]
 8002ca8:	6063      	str	r3, [r4, #4]
 8002caa:	6054      	str	r4, [r2, #4]
 8002cac:	e7cb      	b.n	8002c46 <_free_r+0x22>
 8002cae:	bd38      	pop	{r3, r4, r5, pc}
 8002cb0:	20000398 	.word	0x20000398

08002cb4 <sbrk_aligned>:
 8002cb4:	b570      	push	{r4, r5, r6, lr}
 8002cb6:	4e0f      	ldr	r6, [pc, #60]	@ (8002cf4 <sbrk_aligned+0x40>)
 8002cb8:	460c      	mov	r4, r1
 8002cba:	6831      	ldr	r1, [r6, #0]
 8002cbc:	4605      	mov	r5, r0
 8002cbe:	b911      	cbnz	r1, 8002cc6 <sbrk_aligned+0x12>
 8002cc0:	f000 fd7c 	bl	80037bc <_sbrk_r>
 8002cc4:	6030      	str	r0, [r6, #0]
 8002cc6:	4621      	mov	r1, r4
 8002cc8:	4628      	mov	r0, r5
 8002cca:	f000 fd77 	bl	80037bc <_sbrk_r>
 8002cce:	1c43      	adds	r3, r0, #1
 8002cd0:	d103      	bne.n	8002cda <sbrk_aligned+0x26>
 8002cd2:	f04f 34ff 	mov.w	r4, #4294967295
 8002cd6:	4620      	mov	r0, r4
 8002cd8:	bd70      	pop	{r4, r5, r6, pc}
 8002cda:	1cc4      	adds	r4, r0, #3
 8002cdc:	f024 0403 	bic.w	r4, r4, #3
 8002ce0:	42a0      	cmp	r0, r4
 8002ce2:	d0f8      	beq.n	8002cd6 <sbrk_aligned+0x22>
 8002ce4:	1a21      	subs	r1, r4, r0
 8002ce6:	4628      	mov	r0, r5
 8002ce8:	f000 fd68 	bl	80037bc <_sbrk_r>
 8002cec:	3001      	adds	r0, #1
 8002cee:	d1f2      	bne.n	8002cd6 <sbrk_aligned+0x22>
 8002cf0:	e7ef      	b.n	8002cd2 <sbrk_aligned+0x1e>
 8002cf2:	bf00      	nop
 8002cf4:	20000394 	.word	0x20000394

08002cf8 <_malloc_r>:
 8002cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cfc:	1ccd      	adds	r5, r1, #3
 8002cfe:	f025 0503 	bic.w	r5, r5, #3
 8002d02:	3508      	adds	r5, #8
 8002d04:	2d0c      	cmp	r5, #12
 8002d06:	bf38      	it	cc
 8002d08:	250c      	movcc	r5, #12
 8002d0a:	2d00      	cmp	r5, #0
 8002d0c:	4606      	mov	r6, r0
 8002d0e:	db01      	blt.n	8002d14 <_malloc_r+0x1c>
 8002d10:	42a9      	cmp	r1, r5
 8002d12:	d904      	bls.n	8002d1e <_malloc_r+0x26>
 8002d14:	230c      	movs	r3, #12
 8002d16:	6033      	str	r3, [r6, #0]
 8002d18:	2000      	movs	r0, #0
 8002d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002df4 <_malloc_r+0xfc>
 8002d22:	f000 f869 	bl	8002df8 <__malloc_lock>
 8002d26:	f8d8 3000 	ldr.w	r3, [r8]
 8002d2a:	461c      	mov	r4, r3
 8002d2c:	bb44      	cbnz	r4, 8002d80 <_malloc_r+0x88>
 8002d2e:	4629      	mov	r1, r5
 8002d30:	4630      	mov	r0, r6
 8002d32:	f7ff ffbf 	bl	8002cb4 <sbrk_aligned>
 8002d36:	1c43      	adds	r3, r0, #1
 8002d38:	4604      	mov	r4, r0
 8002d3a:	d158      	bne.n	8002dee <_malloc_r+0xf6>
 8002d3c:	f8d8 4000 	ldr.w	r4, [r8]
 8002d40:	4627      	mov	r7, r4
 8002d42:	2f00      	cmp	r7, #0
 8002d44:	d143      	bne.n	8002dce <_malloc_r+0xd6>
 8002d46:	2c00      	cmp	r4, #0
 8002d48:	d04b      	beq.n	8002de2 <_malloc_r+0xea>
 8002d4a:	6823      	ldr	r3, [r4, #0]
 8002d4c:	4639      	mov	r1, r7
 8002d4e:	4630      	mov	r0, r6
 8002d50:	eb04 0903 	add.w	r9, r4, r3
 8002d54:	f000 fd32 	bl	80037bc <_sbrk_r>
 8002d58:	4581      	cmp	r9, r0
 8002d5a:	d142      	bne.n	8002de2 <_malloc_r+0xea>
 8002d5c:	6821      	ldr	r1, [r4, #0]
 8002d5e:	4630      	mov	r0, r6
 8002d60:	1a6d      	subs	r5, r5, r1
 8002d62:	4629      	mov	r1, r5
 8002d64:	f7ff ffa6 	bl	8002cb4 <sbrk_aligned>
 8002d68:	3001      	adds	r0, #1
 8002d6a:	d03a      	beq.n	8002de2 <_malloc_r+0xea>
 8002d6c:	6823      	ldr	r3, [r4, #0]
 8002d6e:	442b      	add	r3, r5
 8002d70:	6023      	str	r3, [r4, #0]
 8002d72:	f8d8 3000 	ldr.w	r3, [r8]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	bb62      	cbnz	r2, 8002dd4 <_malloc_r+0xdc>
 8002d7a:	f8c8 7000 	str.w	r7, [r8]
 8002d7e:	e00f      	b.n	8002da0 <_malloc_r+0xa8>
 8002d80:	6822      	ldr	r2, [r4, #0]
 8002d82:	1b52      	subs	r2, r2, r5
 8002d84:	d420      	bmi.n	8002dc8 <_malloc_r+0xd0>
 8002d86:	2a0b      	cmp	r2, #11
 8002d88:	d917      	bls.n	8002dba <_malloc_r+0xc2>
 8002d8a:	1961      	adds	r1, r4, r5
 8002d8c:	42a3      	cmp	r3, r4
 8002d8e:	6025      	str	r5, [r4, #0]
 8002d90:	bf18      	it	ne
 8002d92:	6059      	strne	r1, [r3, #4]
 8002d94:	6863      	ldr	r3, [r4, #4]
 8002d96:	bf08      	it	eq
 8002d98:	f8c8 1000 	streq.w	r1, [r8]
 8002d9c:	5162      	str	r2, [r4, r5]
 8002d9e:	604b      	str	r3, [r1, #4]
 8002da0:	4630      	mov	r0, r6
 8002da2:	f000 f82f 	bl	8002e04 <__malloc_unlock>
 8002da6:	f104 000b 	add.w	r0, r4, #11
 8002daa:	1d23      	adds	r3, r4, #4
 8002dac:	f020 0007 	bic.w	r0, r0, #7
 8002db0:	1ac2      	subs	r2, r0, r3
 8002db2:	bf1c      	itt	ne
 8002db4:	1a1b      	subne	r3, r3, r0
 8002db6:	50a3      	strne	r3, [r4, r2]
 8002db8:	e7af      	b.n	8002d1a <_malloc_r+0x22>
 8002dba:	6862      	ldr	r2, [r4, #4]
 8002dbc:	42a3      	cmp	r3, r4
 8002dbe:	bf0c      	ite	eq
 8002dc0:	f8c8 2000 	streq.w	r2, [r8]
 8002dc4:	605a      	strne	r2, [r3, #4]
 8002dc6:	e7eb      	b.n	8002da0 <_malloc_r+0xa8>
 8002dc8:	4623      	mov	r3, r4
 8002dca:	6864      	ldr	r4, [r4, #4]
 8002dcc:	e7ae      	b.n	8002d2c <_malloc_r+0x34>
 8002dce:	463c      	mov	r4, r7
 8002dd0:	687f      	ldr	r7, [r7, #4]
 8002dd2:	e7b6      	b.n	8002d42 <_malloc_r+0x4a>
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	42a3      	cmp	r3, r4
 8002dda:	d1fb      	bne.n	8002dd4 <_malloc_r+0xdc>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	6053      	str	r3, [r2, #4]
 8002de0:	e7de      	b.n	8002da0 <_malloc_r+0xa8>
 8002de2:	230c      	movs	r3, #12
 8002de4:	4630      	mov	r0, r6
 8002de6:	6033      	str	r3, [r6, #0]
 8002de8:	f000 f80c 	bl	8002e04 <__malloc_unlock>
 8002dec:	e794      	b.n	8002d18 <_malloc_r+0x20>
 8002dee:	6005      	str	r5, [r0, #0]
 8002df0:	e7d6      	b.n	8002da0 <_malloc_r+0xa8>
 8002df2:	bf00      	nop
 8002df4:	20000398 	.word	0x20000398

08002df8 <__malloc_lock>:
 8002df8:	4801      	ldr	r0, [pc, #4]	@ (8002e00 <__malloc_lock+0x8>)
 8002dfa:	f7ff bf10 	b.w	8002c1e <__retarget_lock_acquire_recursive>
 8002dfe:	bf00      	nop
 8002e00:	20000390 	.word	0x20000390

08002e04 <__malloc_unlock>:
 8002e04:	4801      	ldr	r0, [pc, #4]	@ (8002e0c <__malloc_unlock+0x8>)
 8002e06:	f7ff bf0b 	b.w	8002c20 <__retarget_lock_release_recursive>
 8002e0a:	bf00      	nop
 8002e0c:	20000390 	.word	0x20000390

08002e10 <__ssputs_r>:
 8002e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e14:	461f      	mov	r7, r3
 8002e16:	688e      	ldr	r6, [r1, #8]
 8002e18:	4682      	mov	sl, r0
 8002e1a:	42be      	cmp	r6, r7
 8002e1c:	460c      	mov	r4, r1
 8002e1e:	4690      	mov	r8, r2
 8002e20:	680b      	ldr	r3, [r1, #0]
 8002e22:	d82d      	bhi.n	8002e80 <__ssputs_r+0x70>
 8002e24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002e28:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002e2c:	d026      	beq.n	8002e7c <__ssputs_r+0x6c>
 8002e2e:	6965      	ldr	r5, [r4, #20]
 8002e30:	6909      	ldr	r1, [r1, #16]
 8002e32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e36:	eba3 0901 	sub.w	r9, r3, r1
 8002e3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e3e:	1c7b      	adds	r3, r7, #1
 8002e40:	444b      	add	r3, r9
 8002e42:	106d      	asrs	r5, r5, #1
 8002e44:	429d      	cmp	r5, r3
 8002e46:	bf38      	it	cc
 8002e48:	461d      	movcc	r5, r3
 8002e4a:	0553      	lsls	r3, r2, #21
 8002e4c:	d527      	bpl.n	8002e9e <__ssputs_r+0x8e>
 8002e4e:	4629      	mov	r1, r5
 8002e50:	f7ff ff52 	bl	8002cf8 <_malloc_r>
 8002e54:	4606      	mov	r6, r0
 8002e56:	b360      	cbz	r0, 8002eb2 <__ssputs_r+0xa2>
 8002e58:	464a      	mov	r2, r9
 8002e5a:	6921      	ldr	r1, [r4, #16]
 8002e5c:	f000 fccc 	bl	80037f8 <memcpy>
 8002e60:	89a3      	ldrh	r3, [r4, #12]
 8002e62:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002e66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e6a:	81a3      	strh	r3, [r4, #12]
 8002e6c:	6126      	str	r6, [r4, #16]
 8002e6e:	444e      	add	r6, r9
 8002e70:	6026      	str	r6, [r4, #0]
 8002e72:	463e      	mov	r6, r7
 8002e74:	6165      	str	r5, [r4, #20]
 8002e76:	eba5 0509 	sub.w	r5, r5, r9
 8002e7a:	60a5      	str	r5, [r4, #8]
 8002e7c:	42be      	cmp	r6, r7
 8002e7e:	d900      	bls.n	8002e82 <__ssputs_r+0x72>
 8002e80:	463e      	mov	r6, r7
 8002e82:	4632      	mov	r2, r6
 8002e84:	4641      	mov	r1, r8
 8002e86:	6820      	ldr	r0, [r4, #0]
 8002e88:	f000 fc7e 	bl	8003788 <memmove>
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	68a3      	ldr	r3, [r4, #8]
 8002e90:	1b9b      	subs	r3, r3, r6
 8002e92:	60a3      	str	r3, [r4, #8]
 8002e94:	6823      	ldr	r3, [r4, #0]
 8002e96:	4433      	add	r3, r6
 8002e98:	6023      	str	r3, [r4, #0]
 8002e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e9e:	462a      	mov	r2, r5
 8002ea0:	f000 fcb8 	bl	8003814 <_realloc_r>
 8002ea4:	4606      	mov	r6, r0
 8002ea6:	2800      	cmp	r0, #0
 8002ea8:	d1e0      	bne.n	8002e6c <__ssputs_r+0x5c>
 8002eaa:	4650      	mov	r0, sl
 8002eac:	6921      	ldr	r1, [r4, #16]
 8002eae:	f7ff feb9 	bl	8002c24 <_free_r>
 8002eb2:	230c      	movs	r3, #12
 8002eb4:	f8ca 3000 	str.w	r3, [sl]
 8002eb8:	89a3      	ldrh	r3, [r4, #12]
 8002eba:	f04f 30ff 	mov.w	r0, #4294967295
 8002ebe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ec2:	81a3      	strh	r3, [r4, #12]
 8002ec4:	e7e9      	b.n	8002e9a <__ssputs_r+0x8a>
	...

08002ec8 <_svfiprintf_r>:
 8002ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ecc:	4698      	mov	r8, r3
 8002ece:	898b      	ldrh	r3, [r1, #12]
 8002ed0:	4607      	mov	r7, r0
 8002ed2:	061b      	lsls	r3, r3, #24
 8002ed4:	460d      	mov	r5, r1
 8002ed6:	4614      	mov	r4, r2
 8002ed8:	b09d      	sub	sp, #116	@ 0x74
 8002eda:	d510      	bpl.n	8002efe <_svfiprintf_r+0x36>
 8002edc:	690b      	ldr	r3, [r1, #16]
 8002ede:	b973      	cbnz	r3, 8002efe <_svfiprintf_r+0x36>
 8002ee0:	2140      	movs	r1, #64	@ 0x40
 8002ee2:	f7ff ff09 	bl	8002cf8 <_malloc_r>
 8002ee6:	6028      	str	r0, [r5, #0]
 8002ee8:	6128      	str	r0, [r5, #16]
 8002eea:	b930      	cbnz	r0, 8002efa <_svfiprintf_r+0x32>
 8002eec:	230c      	movs	r3, #12
 8002eee:	603b      	str	r3, [r7, #0]
 8002ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef4:	b01d      	add	sp, #116	@ 0x74
 8002ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002efa:	2340      	movs	r3, #64	@ 0x40
 8002efc:	616b      	str	r3, [r5, #20]
 8002efe:	2300      	movs	r3, #0
 8002f00:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f02:	2320      	movs	r3, #32
 8002f04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002f08:	2330      	movs	r3, #48	@ 0x30
 8002f0a:	f04f 0901 	mov.w	r9, #1
 8002f0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f12:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80030ac <_svfiprintf_r+0x1e4>
 8002f16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002f1a:	4623      	mov	r3, r4
 8002f1c:	469a      	mov	sl, r3
 8002f1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f22:	b10a      	cbz	r2, 8002f28 <_svfiprintf_r+0x60>
 8002f24:	2a25      	cmp	r2, #37	@ 0x25
 8002f26:	d1f9      	bne.n	8002f1c <_svfiprintf_r+0x54>
 8002f28:	ebba 0b04 	subs.w	fp, sl, r4
 8002f2c:	d00b      	beq.n	8002f46 <_svfiprintf_r+0x7e>
 8002f2e:	465b      	mov	r3, fp
 8002f30:	4622      	mov	r2, r4
 8002f32:	4629      	mov	r1, r5
 8002f34:	4638      	mov	r0, r7
 8002f36:	f7ff ff6b 	bl	8002e10 <__ssputs_r>
 8002f3a:	3001      	adds	r0, #1
 8002f3c:	f000 80a7 	beq.w	800308e <_svfiprintf_r+0x1c6>
 8002f40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002f42:	445a      	add	r2, fp
 8002f44:	9209      	str	r2, [sp, #36]	@ 0x24
 8002f46:	f89a 3000 	ldrb.w	r3, [sl]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 809f 	beq.w	800308e <_svfiprintf_r+0x1c6>
 8002f50:	2300      	movs	r3, #0
 8002f52:	f04f 32ff 	mov.w	r2, #4294967295
 8002f56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f5a:	f10a 0a01 	add.w	sl, sl, #1
 8002f5e:	9304      	str	r3, [sp, #16]
 8002f60:	9307      	str	r3, [sp, #28]
 8002f62:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002f66:	931a      	str	r3, [sp, #104]	@ 0x68
 8002f68:	4654      	mov	r4, sl
 8002f6a:	2205      	movs	r2, #5
 8002f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f70:	484e      	ldr	r0, [pc, #312]	@ (80030ac <_svfiprintf_r+0x1e4>)
 8002f72:	f000 fc33 	bl	80037dc <memchr>
 8002f76:	9a04      	ldr	r2, [sp, #16]
 8002f78:	b9d8      	cbnz	r0, 8002fb2 <_svfiprintf_r+0xea>
 8002f7a:	06d0      	lsls	r0, r2, #27
 8002f7c:	bf44      	itt	mi
 8002f7e:	2320      	movmi	r3, #32
 8002f80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f84:	0711      	lsls	r1, r2, #28
 8002f86:	bf44      	itt	mi
 8002f88:	232b      	movmi	r3, #43	@ 0x2b
 8002f8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f8e:	f89a 3000 	ldrb.w	r3, [sl]
 8002f92:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f94:	d015      	beq.n	8002fc2 <_svfiprintf_r+0xfa>
 8002f96:	4654      	mov	r4, sl
 8002f98:	2000      	movs	r0, #0
 8002f9a:	f04f 0c0a 	mov.w	ip, #10
 8002f9e:	9a07      	ldr	r2, [sp, #28]
 8002fa0:	4621      	mov	r1, r4
 8002fa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fa6:	3b30      	subs	r3, #48	@ 0x30
 8002fa8:	2b09      	cmp	r3, #9
 8002faa:	d94b      	bls.n	8003044 <_svfiprintf_r+0x17c>
 8002fac:	b1b0      	cbz	r0, 8002fdc <_svfiprintf_r+0x114>
 8002fae:	9207      	str	r2, [sp, #28]
 8002fb0:	e014      	b.n	8002fdc <_svfiprintf_r+0x114>
 8002fb2:	eba0 0308 	sub.w	r3, r0, r8
 8002fb6:	fa09 f303 	lsl.w	r3, r9, r3
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	46a2      	mov	sl, r4
 8002fbe:	9304      	str	r3, [sp, #16]
 8002fc0:	e7d2      	b.n	8002f68 <_svfiprintf_r+0xa0>
 8002fc2:	9b03      	ldr	r3, [sp, #12]
 8002fc4:	1d19      	adds	r1, r3, #4
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	9103      	str	r1, [sp, #12]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	bfbb      	ittet	lt
 8002fce:	425b      	neglt	r3, r3
 8002fd0:	f042 0202 	orrlt.w	r2, r2, #2
 8002fd4:	9307      	strge	r3, [sp, #28]
 8002fd6:	9307      	strlt	r3, [sp, #28]
 8002fd8:	bfb8      	it	lt
 8002fda:	9204      	strlt	r2, [sp, #16]
 8002fdc:	7823      	ldrb	r3, [r4, #0]
 8002fde:	2b2e      	cmp	r3, #46	@ 0x2e
 8002fe0:	d10a      	bne.n	8002ff8 <_svfiprintf_r+0x130>
 8002fe2:	7863      	ldrb	r3, [r4, #1]
 8002fe4:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fe6:	d132      	bne.n	800304e <_svfiprintf_r+0x186>
 8002fe8:	9b03      	ldr	r3, [sp, #12]
 8002fea:	3402      	adds	r4, #2
 8002fec:	1d1a      	adds	r2, r3, #4
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	9203      	str	r2, [sp, #12]
 8002ff2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002ff6:	9305      	str	r3, [sp, #20]
 8002ff8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80030b0 <_svfiprintf_r+0x1e8>
 8002ffc:	2203      	movs	r2, #3
 8002ffe:	4650      	mov	r0, sl
 8003000:	7821      	ldrb	r1, [r4, #0]
 8003002:	f000 fbeb 	bl	80037dc <memchr>
 8003006:	b138      	cbz	r0, 8003018 <_svfiprintf_r+0x150>
 8003008:	2240      	movs	r2, #64	@ 0x40
 800300a:	9b04      	ldr	r3, [sp, #16]
 800300c:	eba0 000a 	sub.w	r0, r0, sl
 8003010:	4082      	lsls	r2, r0
 8003012:	4313      	orrs	r3, r2
 8003014:	3401      	adds	r4, #1
 8003016:	9304      	str	r3, [sp, #16]
 8003018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800301c:	2206      	movs	r2, #6
 800301e:	4825      	ldr	r0, [pc, #148]	@ (80030b4 <_svfiprintf_r+0x1ec>)
 8003020:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003024:	f000 fbda 	bl	80037dc <memchr>
 8003028:	2800      	cmp	r0, #0
 800302a:	d036      	beq.n	800309a <_svfiprintf_r+0x1d2>
 800302c:	4b22      	ldr	r3, [pc, #136]	@ (80030b8 <_svfiprintf_r+0x1f0>)
 800302e:	bb1b      	cbnz	r3, 8003078 <_svfiprintf_r+0x1b0>
 8003030:	9b03      	ldr	r3, [sp, #12]
 8003032:	3307      	adds	r3, #7
 8003034:	f023 0307 	bic.w	r3, r3, #7
 8003038:	3308      	adds	r3, #8
 800303a:	9303      	str	r3, [sp, #12]
 800303c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800303e:	4433      	add	r3, r6
 8003040:	9309      	str	r3, [sp, #36]	@ 0x24
 8003042:	e76a      	b.n	8002f1a <_svfiprintf_r+0x52>
 8003044:	460c      	mov	r4, r1
 8003046:	2001      	movs	r0, #1
 8003048:	fb0c 3202 	mla	r2, ip, r2, r3
 800304c:	e7a8      	b.n	8002fa0 <_svfiprintf_r+0xd8>
 800304e:	2300      	movs	r3, #0
 8003050:	f04f 0c0a 	mov.w	ip, #10
 8003054:	4619      	mov	r1, r3
 8003056:	3401      	adds	r4, #1
 8003058:	9305      	str	r3, [sp, #20]
 800305a:	4620      	mov	r0, r4
 800305c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003060:	3a30      	subs	r2, #48	@ 0x30
 8003062:	2a09      	cmp	r2, #9
 8003064:	d903      	bls.n	800306e <_svfiprintf_r+0x1a6>
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0c6      	beq.n	8002ff8 <_svfiprintf_r+0x130>
 800306a:	9105      	str	r1, [sp, #20]
 800306c:	e7c4      	b.n	8002ff8 <_svfiprintf_r+0x130>
 800306e:	4604      	mov	r4, r0
 8003070:	2301      	movs	r3, #1
 8003072:	fb0c 2101 	mla	r1, ip, r1, r2
 8003076:	e7f0      	b.n	800305a <_svfiprintf_r+0x192>
 8003078:	ab03      	add	r3, sp, #12
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	462a      	mov	r2, r5
 800307e:	4638      	mov	r0, r7
 8003080:	4b0e      	ldr	r3, [pc, #56]	@ (80030bc <_svfiprintf_r+0x1f4>)
 8003082:	a904      	add	r1, sp, #16
 8003084:	f3af 8000 	nop.w
 8003088:	1c42      	adds	r2, r0, #1
 800308a:	4606      	mov	r6, r0
 800308c:	d1d6      	bne.n	800303c <_svfiprintf_r+0x174>
 800308e:	89ab      	ldrh	r3, [r5, #12]
 8003090:	065b      	lsls	r3, r3, #25
 8003092:	f53f af2d 	bmi.w	8002ef0 <_svfiprintf_r+0x28>
 8003096:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003098:	e72c      	b.n	8002ef4 <_svfiprintf_r+0x2c>
 800309a:	ab03      	add	r3, sp, #12
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	462a      	mov	r2, r5
 80030a0:	4638      	mov	r0, r7
 80030a2:	4b06      	ldr	r3, [pc, #24]	@ (80030bc <_svfiprintf_r+0x1f4>)
 80030a4:	a904      	add	r1, sp, #16
 80030a6:	f000 f9bd 	bl	8003424 <_printf_i>
 80030aa:	e7ed      	b.n	8003088 <_svfiprintf_r+0x1c0>
 80030ac:	08003d9a 	.word	0x08003d9a
 80030b0:	08003da0 	.word	0x08003da0
 80030b4:	08003da4 	.word	0x08003da4
 80030b8:	00000000 	.word	0x00000000
 80030bc:	08002e11 	.word	0x08002e11

080030c0 <__sfputc_r>:
 80030c0:	6893      	ldr	r3, [r2, #8]
 80030c2:	b410      	push	{r4}
 80030c4:	3b01      	subs	r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	6093      	str	r3, [r2, #8]
 80030ca:	da07      	bge.n	80030dc <__sfputc_r+0x1c>
 80030cc:	6994      	ldr	r4, [r2, #24]
 80030ce:	42a3      	cmp	r3, r4
 80030d0:	db01      	blt.n	80030d6 <__sfputc_r+0x16>
 80030d2:	290a      	cmp	r1, #10
 80030d4:	d102      	bne.n	80030dc <__sfputc_r+0x1c>
 80030d6:	bc10      	pop	{r4}
 80030d8:	f000 bac2 	b.w	8003660 <__swbuf_r>
 80030dc:	6813      	ldr	r3, [r2, #0]
 80030de:	1c58      	adds	r0, r3, #1
 80030e0:	6010      	str	r0, [r2, #0]
 80030e2:	7019      	strb	r1, [r3, #0]
 80030e4:	4608      	mov	r0, r1
 80030e6:	bc10      	pop	{r4}
 80030e8:	4770      	bx	lr

080030ea <__sfputs_r>:
 80030ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ec:	4606      	mov	r6, r0
 80030ee:	460f      	mov	r7, r1
 80030f0:	4614      	mov	r4, r2
 80030f2:	18d5      	adds	r5, r2, r3
 80030f4:	42ac      	cmp	r4, r5
 80030f6:	d101      	bne.n	80030fc <__sfputs_r+0x12>
 80030f8:	2000      	movs	r0, #0
 80030fa:	e007      	b.n	800310c <__sfputs_r+0x22>
 80030fc:	463a      	mov	r2, r7
 80030fe:	4630      	mov	r0, r6
 8003100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003104:	f7ff ffdc 	bl	80030c0 <__sfputc_r>
 8003108:	1c43      	adds	r3, r0, #1
 800310a:	d1f3      	bne.n	80030f4 <__sfputs_r+0xa>
 800310c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003110 <_vfiprintf_r>:
 8003110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003114:	460d      	mov	r5, r1
 8003116:	4614      	mov	r4, r2
 8003118:	4698      	mov	r8, r3
 800311a:	4606      	mov	r6, r0
 800311c:	b09d      	sub	sp, #116	@ 0x74
 800311e:	b118      	cbz	r0, 8003128 <_vfiprintf_r+0x18>
 8003120:	6a03      	ldr	r3, [r0, #32]
 8003122:	b90b      	cbnz	r3, 8003128 <_vfiprintf_r+0x18>
 8003124:	f7ff fc40 	bl	80029a8 <__sinit>
 8003128:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800312a:	07d9      	lsls	r1, r3, #31
 800312c:	d405      	bmi.n	800313a <_vfiprintf_r+0x2a>
 800312e:	89ab      	ldrh	r3, [r5, #12]
 8003130:	059a      	lsls	r2, r3, #22
 8003132:	d402      	bmi.n	800313a <_vfiprintf_r+0x2a>
 8003134:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003136:	f7ff fd72 	bl	8002c1e <__retarget_lock_acquire_recursive>
 800313a:	89ab      	ldrh	r3, [r5, #12]
 800313c:	071b      	lsls	r3, r3, #28
 800313e:	d501      	bpl.n	8003144 <_vfiprintf_r+0x34>
 8003140:	692b      	ldr	r3, [r5, #16]
 8003142:	b99b      	cbnz	r3, 800316c <_vfiprintf_r+0x5c>
 8003144:	4629      	mov	r1, r5
 8003146:	4630      	mov	r0, r6
 8003148:	f000 fac8 	bl	80036dc <__swsetup_r>
 800314c:	b170      	cbz	r0, 800316c <_vfiprintf_r+0x5c>
 800314e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003150:	07dc      	lsls	r4, r3, #31
 8003152:	d504      	bpl.n	800315e <_vfiprintf_r+0x4e>
 8003154:	f04f 30ff 	mov.w	r0, #4294967295
 8003158:	b01d      	add	sp, #116	@ 0x74
 800315a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800315e:	89ab      	ldrh	r3, [r5, #12]
 8003160:	0598      	lsls	r0, r3, #22
 8003162:	d4f7      	bmi.n	8003154 <_vfiprintf_r+0x44>
 8003164:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003166:	f7ff fd5b 	bl	8002c20 <__retarget_lock_release_recursive>
 800316a:	e7f3      	b.n	8003154 <_vfiprintf_r+0x44>
 800316c:	2300      	movs	r3, #0
 800316e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003170:	2320      	movs	r3, #32
 8003172:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003176:	2330      	movs	r3, #48	@ 0x30
 8003178:	f04f 0901 	mov.w	r9, #1
 800317c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003180:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800332c <_vfiprintf_r+0x21c>
 8003184:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003188:	4623      	mov	r3, r4
 800318a:	469a      	mov	sl, r3
 800318c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003190:	b10a      	cbz	r2, 8003196 <_vfiprintf_r+0x86>
 8003192:	2a25      	cmp	r2, #37	@ 0x25
 8003194:	d1f9      	bne.n	800318a <_vfiprintf_r+0x7a>
 8003196:	ebba 0b04 	subs.w	fp, sl, r4
 800319a:	d00b      	beq.n	80031b4 <_vfiprintf_r+0xa4>
 800319c:	465b      	mov	r3, fp
 800319e:	4622      	mov	r2, r4
 80031a0:	4629      	mov	r1, r5
 80031a2:	4630      	mov	r0, r6
 80031a4:	f7ff ffa1 	bl	80030ea <__sfputs_r>
 80031a8:	3001      	adds	r0, #1
 80031aa:	f000 80a7 	beq.w	80032fc <_vfiprintf_r+0x1ec>
 80031ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80031b0:	445a      	add	r2, fp
 80031b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80031b4:	f89a 3000 	ldrb.w	r3, [sl]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 809f 	beq.w	80032fc <_vfiprintf_r+0x1ec>
 80031be:	2300      	movs	r3, #0
 80031c0:	f04f 32ff 	mov.w	r2, #4294967295
 80031c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031c8:	f10a 0a01 	add.w	sl, sl, #1
 80031cc:	9304      	str	r3, [sp, #16]
 80031ce:	9307      	str	r3, [sp, #28]
 80031d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80031d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80031d6:	4654      	mov	r4, sl
 80031d8:	2205      	movs	r2, #5
 80031da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031de:	4853      	ldr	r0, [pc, #332]	@ (800332c <_vfiprintf_r+0x21c>)
 80031e0:	f000 fafc 	bl	80037dc <memchr>
 80031e4:	9a04      	ldr	r2, [sp, #16]
 80031e6:	b9d8      	cbnz	r0, 8003220 <_vfiprintf_r+0x110>
 80031e8:	06d1      	lsls	r1, r2, #27
 80031ea:	bf44      	itt	mi
 80031ec:	2320      	movmi	r3, #32
 80031ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80031f2:	0713      	lsls	r3, r2, #28
 80031f4:	bf44      	itt	mi
 80031f6:	232b      	movmi	r3, #43	@ 0x2b
 80031f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80031fc:	f89a 3000 	ldrb.w	r3, [sl]
 8003200:	2b2a      	cmp	r3, #42	@ 0x2a
 8003202:	d015      	beq.n	8003230 <_vfiprintf_r+0x120>
 8003204:	4654      	mov	r4, sl
 8003206:	2000      	movs	r0, #0
 8003208:	f04f 0c0a 	mov.w	ip, #10
 800320c:	9a07      	ldr	r2, [sp, #28]
 800320e:	4621      	mov	r1, r4
 8003210:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003214:	3b30      	subs	r3, #48	@ 0x30
 8003216:	2b09      	cmp	r3, #9
 8003218:	d94b      	bls.n	80032b2 <_vfiprintf_r+0x1a2>
 800321a:	b1b0      	cbz	r0, 800324a <_vfiprintf_r+0x13a>
 800321c:	9207      	str	r2, [sp, #28]
 800321e:	e014      	b.n	800324a <_vfiprintf_r+0x13a>
 8003220:	eba0 0308 	sub.w	r3, r0, r8
 8003224:	fa09 f303 	lsl.w	r3, r9, r3
 8003228:	4313      	orrs	r3, r2
 800322a:	46a2      	mov	sl, r4
 800322c:	9304      	str	r3, [sp, #16]
 800322e:	e7d2      	b.n	80031d6 <_vfiprintf_r+0xc6>
 8003230:	9b03      	ldr	r3, [sp, #12]
 8003232:	1d19      	adds	r1, r3, #4
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	9103      	str	r1, [sp, #12]
 8003238:	2b00      	cmp	r3, #0
 800323a:	bfbb      	ittet	lt
 800323c:	425b      	neglt	r3, r3
 800323e:	f042 0202 	orrlt.w	r2, r2, #2
 8003242:	9307      	strge	r3, [sp, #28]
 8003244:	9307      	strlt	r3, [sp, #28]
 8003246:	bfb8      	it	lt
 8003248:	9204      	strlt	r2, [sp, #16]
 800324a:	7823      	ldrb	r3, [r4, #0]
 800324c:	2b2e      	cmp	r3, #46	@ 0x2e
 800324e:	d10a      	bne.n	8003266 <_vfiprintf_r+0x156>
 8003250:	7863      	ldrb	r3, [r4, #1]
 8003252:	2b2a      	cmp	r3, #42	@ 0x2a
 8003254:	d132      	bne.n	80032bc <_vfiprintf_r+0x1ac>
 8003256:	9b03      	ldr	r3, [sp, #12]
 8003258:	3402      	adds	r4, #2
 800325a:	1d1a      	adds	r2, r3, #4
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	9203      	str	r2, [sp, #12]
 8003260:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003264:	9305      	str	r3, [sp, #20]
 8003266:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003330 <_vfiprintf_r+0x220>
 800326a:	2203      	movs	r2, #3
 800326c:	4650      	mov	r0, sl
 800326e:	7821      	ldrb	r1, [r4, #0]
 8003270:	f000 fab4 	bl	80037dc <memchr>
 8003274:	b138      	cbz	r0, 8003286 <_vfiprintf_r+0x176>
 8003276:	2240      	movs	r2, #64	@ 0x40
 8003278:	9b04      	ldr	r3, [sp, #16]
 800327a:	eba0 000a 	sub.w	r0, r0, sl
 800327e:	4082      	lsls	r2, r0
 8003280:	4313      	orrs	r3, r2
 8003282:	3401      	adds	r4, #1
 8003284:	9304      	str	r3, [sp, #16]
 8003286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800328a:	2206      	movs	r2, #6
 800328c:	4829      	ldr	r0, [pc, #164]	@ (8003334 <_vfiprintf_r+0x224>)
 800328e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003292:	f000 faa3 	bl	80037dc <memchr>
 8003296:	2800      	cmp	r0, #0
 8003298:	d03f      	beq.n	800331a <_vfiprintf_r+0x20a>
 800329a:	4b27      	ldr	r3, [pc, #156]	@ (8003338 <_vfiprintf_r+0x228>)
 800329c:	bb1b      	cbnz	r3, 80032e6 <_vfiprintf_r+0x1d6>
 800329e:	9b03      	ldr	r3, [sp, #12]
 80032a0:	3307      	adds	r3, #7
 80032a2:	f023 0307 	bic.w	r3, r3, #7
 80032a6:	3308      	adds	r3, #8
 80032a8:	9303      	str	r3, [sp, #12]
 80032aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032ac:	443b      	add	r3, r7
 80032ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80032b0:	e76a      	b.n	8003188 <_vfiprintf_r+0x78>
 80032b2:	460c      	mov	r4, r1
 80032b4:	2001      	movs	r0, #1
 80032b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80032ba:	e7a8      	b.n	800320e <_vfiprintf_r+0xfe>
 80032bc:	2300      	movs	r3, #0
 80032be:	f04f 0c0a 	mov.w	ip, #10
 80032c2:	4619      	mov	r1, r3
 80032c4:	3401      	adds	r4, #1
 80032c6:	9305      	str	r3, [sp, #20]
 80032c8:	4620      	mov	r0, r4
 80032ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032ce:	3a30      	subs	r2, #48	@ 0x30
 80032d0:	2a09      	cmp	r2, #9
 80032d2:	d903      	bls.n	80032dc <_vfiprintf_r+0x1cc>
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0c6      	beq.n	8003266 <_vfiprintf_r+0x156>
 80032d8:	9105      	str	r1, [sp, #20]
 80032da:	e7c4      	b.n	8003266 <_vfiprintf_r+0x156>
 80032dc:	4604      	mov	r4, r0
 80032de:	2301      	movs	r3, #1
 80032e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80032e4:	e7f0      	b.n	80032c8 <_vfiprintf_r+0x1b8>
 80032e6:	ab03      	add	r3, sp, #12
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	462a      	mov	r2, r5
 80032ec:	4630      	mov	r0, r6
 80032ee:	4b13      	ldr	r3, [pc, #76]	@ (800333c <_vfiprintf_r+0x22c>)
 80032f0:	a904      	add	r1, sp, #16
 80032f2:	f3af 8000 	nop.w
 80032f6:	4607      	mov	r7, r0
 80032f8:	1c78      	adds	r0, r7, #1
 80032fa:	d1d6      	bne.n	80032aa <_vfiprintf_r+0x19a>
 80032fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80032fe:	07d9      	lsls	r1, r3, #31
 8003300:	d405      	bmi.n	800330e <_vfiprintf_r+0x1fe>
 8003302:	89ab      	ldrh	r3, [r5, #12]
 8003304:	059a      	lsls	r2, r3, #22
 8003306:	d402      	bmi.n	800330e <_vfiprintf_r+0x1fe>
 8003308:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800330a:	f7ff fc89 	bl	8002c20 <__retarget_lock_release_recursive>
 800330e:	89ab      	ldrh	r3, [r5, #12]
 8003310:	065b      	lsls	r3, r3, #25
 8003312:	f53f af1f 	bmi.w	8003154 <_vfiprintf_r+0x44>
 8003316:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003318:	e71e      	b.n	8003158 <_vfiprintf_r+0x48>
 800331a:	ab03      	add	r3, sp, #12
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	462a      	mov	r2, r5
 8003320:	4630      	mov	r0, r6
 8003322:	4b06      	ldr	r3, [pc, #24]	@ (800333c <_vfiprintf_r+0x22c>)
 8003324:	a904      	add	r1, sp, #16
 8003326:	f000 f87d 	bl	8003424 <_printf_i>
 800332a:	e7e4      	b.n	80032f6 <_vfiprintf_r+0x1e6>
 800332c:	08003d9a 	.word	0x08003d9a
 8003330:	08003da0 	.word	0x08003da0
 8003334:	08003da4 	.word	0x08003da4
 8003338:	00000000 	.word	0x00000000
 800333c:	080030eb 	.word	0x080030eb

08003340 <_printf_common>:
 8003340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003344:	4616      	mov	r6, r2
 8003346:	4698      	mov	r8, r3
 8003348:	688a      	ldr	r2, [r1, #8]
 800334a:	690b      	ldr	r3, [r1, #16]
 800334c:	4607      	mov	r7, r0
 800334e:	4293      	cmp	r3, r2
 8003350:	bfb8      	it	lt
 8003352:	4613      	movlt	r3, r2
 8003354:	6033      	str	r3, [r6, #0]
 8003356:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800335a:	460c      	mov	r4, r1
 800335c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003360:	b10a      	cbz	r2, 8003366 <_printf_common+0x26>
 8003362:	3301      	adds	r3, #1
 8003364:	6033      	str	r3, [r6, #0]
 8003366:	6823      	ldr	r3, [r4, #0]
 8003368:	0699      	lsls	r1, r3, #26
 800336a:	bf42      	ittt	mi
 800336c:	6833      	ldrmi	r3, [r6, #0]
 800336e:	3302      	addmi	r3, #2
 8003370:	6033      	strmi	r3, [r6, #0]
 8003372:	6825      	ldr	r5, [r4, #0]
 8003374:	f015 0506 	ands.w	r5, r5, #6
 8003378:	d106      	bne.n	8003388 <_printf_common+0x48>
 800337a:	f104 0a19 	add.w	sl, r4, #25
 800337e:	68e3      	ldr	r3, [r4, #12]
 8003380:	6832      	ldr	r2, [r6, #0]
 8003382:	1a9b      	subs	r3, r3, r2
 8003384:	42ab      	cmp	r3, r5
 8003386:	dc2b      	bgt.n	80033e0 <_printf_common+0xa0>
 8003388:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800338c:	6822      	ldr	r2, [r4, #0]
 800338e:	3b00      	subs	r3, #0
 8003390:	bf18      	it	ne
 8003392:	2301      	movne	r3, #1
 8003394:	0692      	lsls	r2, r2, #26
 8003396:	d430      	bmi.n	80033fa <_printf_common+0xba>
 8003398:	4641      	mov	r1, r8
 800339a:	4638      	mov	r0, r7
 800339c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80033a0:	47c8      	blx	r9
 80033a2:	3001      	adds	r0, #1
 80033a4:	d023      	beq.n	80033ee <_printf_common+0xae>
 80033a6:	6823      	ldr	r3, [r4, #0]
 80033a8:	6922      	ldr	r2, [r4, #16]
 80033aa:	f003 0306 	and.w	r3, r3, #6
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	bf14      	ite	ne
 80033b2:	2500      	movne	r5, #0
 80033b4:	6833      	ldreq	r3, [r6, #0]
 80033b6:	f04f 0600 	mov.w	r6, #0
 80033ba:	bf08      	it	eq
 80033bc:	68e5      	ldreq	r5, [r4, #12]
 80033be:	f104 041a 	add.w	r4, r4, #26
 80033c2:	bf08      	it	eq
 80033c4:	1aed      	subeq	r5, r5, r3
 80033c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80033ca:	bf08      	it	eq
 80033cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033d0:	4293      	cmp	r3, r2
 80033d2:	bfc4      	itt	gt
 80033d4:	1a9b      	subgt	r3, r3, r2
 80033d6:	18ed      	addgt	r5, r5, r3
 80033d8:	42b5      	cmp	r5, r6
 80033da:	d11a      	bne.n	8003412 <_printf_common+0xd2>
 80033dc:	2000      	movs	r0, #0
 80033de:	e008      	b.n	80033f2 <_printf_common+0xb2>
 80033e0:	2301      	movs	r3, #1
 80033e2:	4652      	mov	r2, sl
 80033e4:	4641      	mov	r1, r8
 80033e6:	4638      	mov	r0, r7
 80033e8:	47c8      	blx	r9
 80033ea:	3001      	adds	r0, #1
 80033ec:	d103      	bne.n	80033f6 <_printf_common+0xb6>
 80033ee:	f04f 30ff 	mov.w	r0, #4294967295
 80033f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033f6:	3501      	adds	r5, #1
 80033f8:	e7c1      	b.n	800337e <_printf_common+0x3e>
 80033fa:	2030      	movs	r0, #48	@ 0x30
 80033fc:	18e1      	adds	r1, r4, r3
 80033fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003408:	4422      	add	r2, r4
 800340a:	3302      	adds	r3, #2
 800340c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003410:	e7c2      	b.n	8003398 <_printf_common+0x58>
 8003412:	2301      	movs	r3, #1
 8003414:	4622      	mov	r2, r4
 8003416:	4641      	mov	r1, r8
 8003418:	4638      	mov	r0, r7
 800341a:	47c8      	blx	r9
 800341c:	3001      	adds	r0, #1
 800341e:	d0e6      	beq.n	80033ee <_printf_common+0xae>
 8003420:	3601      	adds	r6, #1
 8003422:	e7d9      	b.n	80033d8 <_printf_common+0x98>

08003424 <_printf_i>:
 8003424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003428:	7e0f      	ldrb	r7, [r1, #24]
 800342a:	4691      	mov	r9, r2
 800342c:	2f78      	cmp	r7, #120	@ 0x78
 800342e:	4680      	mov	r8, r0
 8003430:	460c      	mov	r4, r1
 8003432:	469a      	mov	sl, r3
 8003434:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003436:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800343a:	d807      	bhi.n	800344c <_printf_i+0x28>
 800343c:	2f62      	cmp	r7, #98	@ 0x62
 800343e:	d80a      	bhi.n	8003456 <_printf_i+0x32>
 8003440:	2f00      	cmp	r7, #0
 8003442:	f000 80d1 	beq.w	80035e8 <_printf_i+0x1c4>
 8003446:	2f58      	cmp	r7, #88	@ 0x58
 8003448:	f000 80b8 	beq.w	80035bc <_printf_i+0x198>
 800344c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003450:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003454:	e03a      	b.n	80034cc <_printf_i+0xa8>
 8003456:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800345a:	2b15      	cmp	r3, #21
 800345c:	d8f6      	bhi.n	800344c <_printf_i+0x28>
 800345e:	a101      	add	r1, pc, #4	@ (adr r1, 8003464 <_printf_i+0x40>)
 8003460:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003464:	080034bd 	.word	0x080034bd
 8003468:	080034d1 	.word	0x080034d1
 800346c:	0800344d 	.word	0x0800344d
 8003470:	0800344d 	.word	0x0800344d
 8003474:	0800344d 	.word	0x0800344d
 8003478:	0800344d 	.word	0x0800344d
 800347c:	080034d1 	.word	0x080034d1
 8003480:	0800344d 	.word	0x0800344d
 8003484:	0800344d 	.word	0x0800344d
 8003488:	0800344d 	.word	0x0800344d
 800348c:	0800344d 	.word	0x0800344d
 8003490:	080035cf 	.word	0x080035cf
 8003494:	080034fb 	.word	0x080034fb
 8003498:	08003589 	.word	0x08003589
 800349c:	0800344d 	.word	0x0800344d
 80034a0:	0800344d 	.word	0x0800344d
 80034a4:	080035f1 	.word	0x080035f1
 80034a8:	0800344d 	.word	0x0800344d
 80034ac:	080034fb 	.word	0x080034fb
 80034b0:	0800344d 	.word	0x0800344d
 80034b4:	0800344d 	.word	0x0800344d
 80034b8:	08003591 	.word	0x08003591
 80034bc:	6833      	ldr	r3, [r6, #0]
 80034be:	1d1a      	adds	r2, r3, #4
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6032      	str	r2, [r6, #0]
 80034c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80034c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80034cc:	2301      	movs	r3, #1
 80034ce:	e09c      	b.n	800360a <_printf_i+0x1e6>
 80034d0:	6833      	ldr	r3, [r6, #0]
 80034d2:	6820      	ldr	r0, [r4, #0]
 80034d4:	1d19      	adds	r1, r3, #4
 80034d6:	6031      	str	r1, [r6, #0]
 80034d8:	0606      	lsls	r6, r0, #24
 80034da:	d501      	bpl.n	80034e0 <_printf_i+0xbc>
 80034dc:	681d      	ldr	r5, [r3, #0]
 80034de:	e003      	b.n	80034e8 <_printf_i+0xc4>
 80034e0:	0645      	lsls	r5, r0, #25
 80034e2:	d5fb      	bpl.n	80034dc <_printf_i+0xb8>
 80034e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80034e8:	2d00      	cmp	r5, #0
 80034ea:	da03      	bge.n	80034f4 <_printf_i+0xd0>
 80034ec:	232d      	movs	r3, #45	@ 0x2d
 80034ee:	426d      	negs	r5, r5
 80034f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80034f4:	230a      	movs	r3, #10
 80034f6:	4858      	ldr	r0, [pc, #352]	@ (8003658 <_printf_i+0x234>)
 80034f8:	e011      	b.n	800351e <_printf_i+0xfa>
 80034fa:	6821      	ldr	r1, [r4, #0]
 80034fc:	6833      	ldr	r3, [r6, #0]
 80034fe:	0608      	lsls	r0, r1, #24
 8003500:	f853 5b04 	ldr.w	r5, [r3], #4
 8003504:	d402      	bmi.n	800350c <_printf_i+0xe8>
 8003506:	0649      	lsls	r1, r1, #25
 8003508:	bf48      	it	mi
 800350a:	b2ad      	uxthmi	r5, r5
 800350c:	2f6f      	cmp	r7, #111	@ 0x6f
 800350e:	6033      	str	r3, [r6, #0]
 8003510:	bf14      	ite	ne
 8003512:	230a      	movne	r3, #10
 8003514:	2308      	moveq	r3, #8
 8003516:	4850      	ldr	r0, [pc, #320]	@ (8003658 <_printf_i+0x234>)
 8003518:	2100      	movs	r1, #0
 800351a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800351e:	6866      	ldr	r6, [r4, #4]
 8003520:	2e00      	cmp	r6, #0
 8003522:	60a6      	str	r6, [r4, #8]
 8003524:	db05      	blt.n	8003532 <_printf_i+0x10e>
 8003526:	6821      	ldr	r1, [r4, #0]
 8003528:	432e      	orrs	r6, r5
 800352a:	f021 0104 	bic.w	r1, r1, #4
 800352e:	6021      	str	r1, [r4, #0]
 8003530:	d04b      	beq.n	80035ca <_printf_i+0x1a6>
 8003532:	4616      	mov	r6, r2
 8003534:	fbb5 f1f3 	udiv	r1, r5, r3
 8003538:	fb03 5711 	mls	r7, r3, r1, r5
 800353c:	5dc7      	ldrb	r7, [r0, r7]
 800353e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003542:	462f      	mov	r7, r5
 8003544:	42bb      	cmp	r3, r7
 8003546:	460d      	mov	r5, r1
 8003548:	d9f4      	bls.n	8003534 <_printf_i+0x110>
 800354a:	2b08      	cmp	r3, #8
 800354c:	d10b      	bne.n	8003566 <_printf_i+0x142>
 800354e:	6823      	ldr	r3, [r4, #0]
 8003550:	07df      	lsls	r7, r3, #31
 8003552:	d508      	bpl.n	8003566 <_printf_i+0x142>
 8003554:	6923      	ldr	r3, [r4, #16]
 8003556:	6861      	ldr	r1, [r4, #4]
 8003558:	4299      	cmp	r1, r3
 800355a:	bfde      	ittt	le
 800355c:	2330      	movle	r3, #48	@ 0x30
 800355e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003562:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003566:	1b92      	subs	r2, r2, r6
 8003568:	6122      	str	r2, [r4, #16]
 800356a:	464b      	mov	r3, r9
 800356c:	4621      	mov	r1, r4
 800356e:	4640      	mov	r0, r8
 8003570:	f8cd a000 	str.w	sl, [sp]
 8003574:	aa03      	add	r2, sp, #12
 8003576:	f7ff fee3 	bl	8003340 <_printf_common>
 800357a:	3001      	adds	r0, #1
 800357c:	d14a      	bne.n	8003614 <_printf_i+0x1f0>
 800357e:	f04f 30ff 	mov.w	r0, #4294967295
 8003582:	b004      	add	sp, #16
 8003584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003588:	6823      	ldr	r3, [r4, #0]
 800358a:	f043 0320 	orr.w	r3, r3, #32
 800358e:	6023      	str	r3, [r4, #0]
 8003590:	2778      	movs	r7, #120	@ 0x78
 8003592:	4832      	ldr	r0, [pc, #200]	@ (800365c <_printf_i+0x238>)
 8003594:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003598:	6823      	ldr	r3, [r4, #0]
 800359a:	6831      	ldr	r1, [r6, #0]
 800359c:	061f      	lsls	r7, r3, #24
 800359e:	f851 5b04 	ldr.w	r5, [r1], #4
 80035a2:	d402      	bmi.n	80035aa <_printf_i+0x186>
 80035a4:	065f      	lsls	r7, r3, #25
 80035a6:	bf48      	it	mi
 80035a8:	b2ad      	uxthmi	r5, r5
 80035aa:	6031      	str	r1, [r6, #0]
 80035ac:	07d9      	lsls	r1, r3, #31
 80035ae:	bf44      	itt	mi
 80035b0:	f043 0320 	orrmi.w	r3, r3, #32
 80035b4:	6023      	strmi	r3, [r4, #0]
 80035b6:	b11d      	cbz	r5, 80035c0 <_printf_i+0x19c>
 80035b8:	2310      	movs	r3, #16
 80035ba:	e7ad      	b.n	8003518 <_printf_i+0xf4>
 80035bc:	4826      	ldr	r0, [pc, #152]	@ (8003658 <_printf_i+0x234>)
 80035be:	e7e9      	b.n	8003594 <_printf_i+0x170>
 80035c0:	6823      	ldr	r3, [r4, #0]
 80035c2:	f023 0320 	bic.w	r3, r3, #32
 80035c6:	6023      	str	r3, [r4, #0]
 80035c8:	e7f6      	b.n	80035b8 <_printf_i+0x194>
 80035ca:	4616      	mov	r6, r2
 80035cc:	e7bd      	b.n	800354a <_printf_i+0x126>
 80035ce:	6833      	ldr	r3, [r6, #0]
 80035d0:	6825      	ldr	r5, [r4, #0]
 80035d2:	1d18      	adds	r0, r3, #4
 80035d4:	6961      	ldr	r1, [r4, #20]
 80035d6:	6030      	str	r0, [r6, #0]
 80035d8:	062e      	lsls	r6, r5, #24
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	d501      	bpl.n	80035e2 <_printf_i+0x1be>
 80035de:	6019      	str	r1, [r3, #0]
 80035e0:	e002      	b.n	80035e8 <_printf_i+0x1c4>
 80035e2:	0668      	lsls	r0, r5, #25
 80035e4:	d5fb      	bpl.n	80035de <_printf_i+0x1ba>
 80035e6:	8019      	strh	r1, [r3, #0]
 80035e8:	2300      	movs	r3, #0
 80035ea:	4616      	mov	r6, r2
 80035ec:	6123      	str	r3, [r4, #16]
 80035ee:	e7bc      	b.n	800356a <_printf_i+0x146>
 80035f0:	6833      	ldr	r3, [r6, #0]
 80035f2:	2100      	movs	r1, #0
 80035f4:	1d1a      	adds	r2, r3, #4
 80035f6:	6032      	str	r2, [r6, #0]
 80035f8:	681e      	ldr	r6, [r3, #0]
 80035fa:	6862      	ldr	r2, [r4, #4]
 80035fc:	4630      	mov	r0, r6
 80035fe:	f000 f8ed 	bl	80037dc <memchr>
 8003602:	b108      	cbz	r0, 8003608 <_printf_i+0x1e4>
 8003604:	1b80      	subs	r0, r0, r6
 8003606:	6060      	str	r0, [r4, #4]
 8003608:	6863      	ldr	r3, [r4, #4]
 800360a:	6123      	str	r3, [r4, #16]
 800360c:	2300      	movs	r3, #0
 800360e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003612:	e7aa      	b.n	800356a <_printf_i+0x146>
 8003614:	4632      	mov	r2, r6
 8003616:	4649      	mov	r1, r9
 8003618:	4640      	mov	r0, r8
 800361a:	6923      	ldr	r3, [r4, #16]
 800361c:	47d0      	blx	sl
 800361e:	3001      	adds	r0, #1
 8003620:	d0ad      	beq.n	800357e <_printf_i+0x15a>
 8003622:	6823      	ldr	r3, [r4, #0]
 8003624:	079b      	lsls	r3, r3, #30
 8003626:	d413      	bmi.n	8003650 <_printf_i+0x22c>
 8003628:	68e0      	ldr	r0, [r4, #12]
 800362a:	9b03      	ldr	r3, [sp, #12]
 800362c:	4298      	cmp	r0, r3
 800362e:	bfb8      	it	lt
 8003630:	4618      	movlt	r0, r3
 8003632:	e7a6      	b.n	8003582 <_printf_i+0x15e>
 8003634:	2301      	movs	r3, #1
 8003636:	4632      	mov	r2, r6
 8003638:	4649      	mov	r1, r9
 800363a:	4640      	mov	r0, r8
 800363c:	47d0      	blx	sl
 800363e:	3001      	adds	r0, #1
 8003640:	d09d      	beq.n	800357e <_printf_i+0x15a>
 8003642:	3501      	adds	r5, #1
 8003644:	68e3      	ldr	r3, [r4, #12]
 8003646:	9903      	ldr	r1, [sp, #12]
 8003648:	1a5b      	subs	r3, r3, r1
 800364a:	42ab      	cmp	r3, r5
 800364c:	dcf2      	bgt.n	8003634 <_printf_i+0x210>
 800364e:	e7eb      	b.n	8003628 <_printf_i+0x204>
 8003650:	2500      	movs	r5, #0
 8003652:	f104 0619 	add.w	r6, r4, #25
 8003656:	e7f5      	b.n	8003644 <_printf_i+0x220>
 8003658:	08003dab 	.word	0x08003dab
 800365c:	08003dbc 	.word	0x08003dbc

08003660 <__swbuf_r>:
 8003660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003662:	460e      	mov	r6, r1
 8003664:	4614      	mov	r4, r2
 8003666:	4605      	mov	r5, r0
 8003668:	b118      	cbz	r0, 8003672 <__swbuf_r+0x12>
 800366a:	6a03      	ldr	r3, [r0, #32]
 800366c:	b90b      	cbnz	r3, 8003672 <__swbuf_r+0x12>
 800366e:	f7ff f99b 	bl	80029a8 <__sinit>
 8003672:	69a3      	ldr	r3, [r4, #24]
 8003674:	60a3      	str	r3, [r4, #8]
 8003676:	89a3      	ldrh	r3, [r4, #12]
 8003678:	071a      	lsls	r2, r3, #28
 800367a:	d501      	bpl.n	8003680 <__swbuf_r+0x20>
 800367c:	6923      	ldr	r3, [r4, #16]
 800367e:	b943      	cbnz	r3, 8003692 <__swbuf_r+0x32>
 8003680:	4621      	mov	r1, r4
 8003682:	4628      	mov	r0, r5
 8003684:	f000 f82a 	bl	80036dc <__swsetup_r>
 8003688:	b118      	cbz	r0, 8003692 <__swbuf_r+0x32>
 800368a:	f04f 37ff 	mov.w	r7, #4294967295
 800368e:	4638      	mov	r0, r7
 8003690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003692:	6823      	ldr	r3, [r4, #0]
 8003694:	6922      	ldr	r2, [r4, #16]
 8003696:	b2f6      	uxtb	r6, r6
 8003698:	1a98      	subs	r0, r3, r2
 800369a:	6963      	ldr	r3, [r4, #20]
 800369c:	4637      	mov	r7, r6
 800369e:	4283      	cmp	r3, r0
 80036a0:	dc05      	bgt.n	80036ae <__swbuf_r+0x4e>
 80036a2:	4621      	mov	r1, r4
 80036a4:	4628      	mov	r0, r5
 80036a6:	f7ff f8b7 	bl	8002818 <_fflush_r>
 80036aa:	2800      	cmp	r0, #0
 80036ac:	d1ed      	bne.n	800368a <__swbuf_r+0x2a>
 80036ae:	68a3      	ldr	r3, [r4, #8]
 80036b0:	3b01      	subs	r3, #1
 80036b2:	60a3      	str	r3, [r4, #8]
 80036b4:	6823      	ldr	r3, [r4, #0]
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	6022      	str	r2, [r4, #0]
 80036ba:	701e      	strb	r6, [r3, #0]
 80036bc:	6962      	ldr	r2, [r4, #20]
 80036be:	1c43      	adds	r3, r0, #1
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d004      	beq.n	80036ce <__swbuf_r+0x6e>
 80036c4:	89a3      	ldrh	r3, [r4, #12]
 80036c6:	07db      	lsls	r3, r3, #31
 80036c8:	d5e1      	bpl.n	800368e <__swbuf_r+0x2e>
 80036ca:	2e0a      	cmp	r6, #10
 80036cc:	d1df      	bne.n	800368e <__swbuf_r+0x2e>
 80036ce:	4621      	mov	r1, r4
 80036d0:	4628      	mov	r0, r5
 80036d2:	f7ff f8a1 	bl	8002818 <_fflush_r>
 80036d6:	2800      	cmp	r0, #0
 80036d8:	d0d9      	beq.n	800368e <__swbuf_r+0x2e>
 80036da:	e7d6      	b.n	800368a <__swbuf_r+0x2a>

080036dc <__swsetup_r>:
 80036dc:	b538      	push	{r3, r4, r5, lr}
 80036de:	4b29      	ldr	r3, [pc, #164]	@ (8003784 <__swsetup_r+0xa8>)
 80036e0:	4605      	mov	r5, r0
 80036e2:	6818      	ldr	r0, [r3, #0]
 80036e4:	460c      	mov	r4, r1
 80036e6:	b118      	cbz	r0, 80036f0 <__swsetup_r+0x14>
 80036e8:	6a03      	ldr	r3, [r0, #32]
 80036ea:	b90b      	cbnz	r3, 80036f0 <__swsetup_r+0x14>
 80036ec:	f7ff f95c 	bl	80029a8 <__sinit>
 80036f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036f4:	0719      	lsls	r1, r3, #28
 80036f6:	d422      	bmi.n	800373e <__swsetup_r+0x62>
 80036f8:	06da      	lsls	r2, r3, #27
 80036fa:	d407      	bmi.n	800370c <__swsetup_r+0x30>
 80036fc:	2209      	movs	r2, #9
 80036fe:	602a      	str	r2, [r5, #0]
 8003700:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003704:	f04f 30ff 	mov.w	r0, #4294967295
 8003708:	81a3      	strh	r3, [r4, #12]
 800370a:	e033      	b.n	8003774 <__swsetup_r+0x98>
 800370c:	0758      	lsls	r0, r3, #29
 800370e:	d512      	bpl.n	8003736 <__swsetup_r+0x5a>
 8003710:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003712:	b141      	cbz	r1, 8003726 <__swsetup_r+0x4a>
 8003714:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003718:	4299      	cmp	r1, r3
 800371a:	d002      	beq.n	8003722 <__swsetup_r+0x46>
 800371c:	4628      	mov	r0, r5
 800371e:	f7ff fa81 	bl	8002c24 <_free_r>
 8003722:	2300      	movs	r3, #0
 8003724:	6363      	str	r3, [r4, #52]	@ 0x34
 8003726:	89a3      	ldrh	r3, [r4, #12]
 8003728:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800372c:	81a3      	strh	r3, [r4, #12]
 800372e:	2300      	movs	r3, #0
 8003730:	6063      	str	r3, [r4, #4]
 8003732:	6923      	ldr	r3, [r4, #16]
 8003734:	6023      	str	r3, [r4, #0]
 8003736:	89a3      	ldrh	r3, [r4, #12]
 8003738:	f043 0308 	orr.w	r3, r3, #8
 800373c:	81a3      	strh	r3, [r4, #12]
 800373e:	6923      	ldr	r3, [r4, #16]
 8003740:	b94b      	cbnz	r3, 8003756 <__swsetup_r+0x7a>
 8003742:	89a3      	ldrh	r3, [r4, #12]
 8003744:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003748:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800374c:	d003      	beq.n	8003756 <__swsetup_r+0x7a>
 800374e:	4621      	mov	r1, r4
 8003750:	4628      	mov	r0, r5
 8003752:	f000 f8b2 	bl	80038ba <__smakebuf_r>
 8003756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800375a:	f013 0201 	ands.w	r2, r3, #1
 800375e:	d00a      	beq.n	8003776 <__swsetup_r+0x9a>
 8003760:	2200      	movs	r2, #0
 8003762:	60a2      	str	r2, [r4, #8]
 8003764:	6962      	ldr	r2, [r4, #20]
 8003766:	4252      	negs	r2, r2
 8003768:	61a2      	str	r2, [r4, #24]
 800376a:	6922      	ldr	r2, [r4, #16]
 800376c:	b942      	cbnz	r2, 8003780 <__swsetup_r+0xa4>
 800376e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003772:	d1c5      	bne.n	8003700 <__swsetup_r+0x24>
 8003774:	bd38      	pop	{r3, r4, r5, pc}
 8003776:	0799      	lsls	r1, r3, #30
 8003778:	bf58      	it	pl
 800377a:	6962      	ldrpl	r2, [r4, #20]
 800377c:	60a2      	str	r2, [r4, #8]
 800377e:	e7f4      	b.n	800376a <__swsetup_r+0x8e>
 8003780:	2000      	movs	r0, #0
 8003782:	e7f7      	b.n	8003774 <__swsetup_r+0x98>
 8003784:	20000048 	.word	0x20000048

08003788 <memmove>:
 8003788:	4288      	cmp	r0, r1
 800378a:	b510      	push	{r4, lr}
 800378c:	eb01 0402 	add.w	r4, r1, r2
 8003790:	d902      	bls.n	8003798 <memmove+0x10>
 8003792:	4284      	cmp	r4, r0
 8003794:	4623      	mov	r3, r4
 8003796:	d807      	bhi.n	80037a8 <memmove+0x20>
 8003798:	1e43      	subs	r3, r0, #1
 800379a:	42a1      	cmp	r1, r4
 800379c:	d008      	beq.n	80037b0 <memmove+0x28>
 800379e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037a6:	e7f8      	b.n	800379a <memmove+0x12>
 80037a8:	4601      	mov	r1, r0
 80037aa:	4402      	add	r2, r0
 80037ac:	428a      	cmp	r2, r1
 80037ae:	d100      	bne.n	80037b2 <memmove+0x2a>
 80037b0:	bd10      	pop	{r4, pc}
 80037b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80037ba:	e7f7      	b.n	80037ac <memmove+0x24>

080037bc <_sbrk_r>:
 80037bc:	b538      	push	{r3, r4, r5, lr}
 80037be:	2300      	movs	r3, #0
 80037c0:	4d05      	ldr	r5, [pc, #20]	@ (80037d8 <_sbrk_r+0x1c>)
 80037c2:	4604      	mov	r4, r0
 80037c4:	4608      	mov	r0, r1
 80037c6:	602b      	str	r3, [r5, #0]
 80037c8:	f7fc fe4e 	bl	8000468 <_sbrk>
 80037cc:	1c43      	adds	r3, r0, #1
 80037ce:	d102      	bne.n	80037d6 <_sbrk_r+0x1a>
 80037d0:	682b      	ldr	r3, [r5, #0]
 80037d2:	b103      	cbz	r3, 80037d6 <_sbrk_r+0x1a>
 80037d4:	6023      	str	r3, [r4, #0]
 80037d6:	bd38      	pop	{r3, r4, r5, pc}
 80037d8:	2000038c 	.word	0x2000038c

080037dc <memchr>:
 80037dc:	4603      	mov	r3, r0
 80037de:	b510      	push	{r4, lr}
 80037e0:	b2c9      	uxtb	r1, r1
 80037e2:	4402      	add	r2, r0
 80037e4:	4293      	cmp	r3, r2
 80037e6:	4618      	mov	r0, r3
 80037e8:	d101      	bne.n	80037ee <memchr+0x12>
 80037ea:	2000      	movs	r0, #0
 80037ec:	e003      	b.n	80037f6 <memchr+0x1a>
 80037ee:	7804      	ldrb	r4, [r0, #0]
 80037f0:	3301      	adds	r3, #1
 80037f2:	428c      	cmp	r4, r1
 80037f4:	d1f6      	bne.n	80037e4 <memchr+0x8>
 80037f6:	bd10      	pop	{r4, pc}

080037f8 <memcpy>:
 80037f8:	440a      	add	r2, r1
 80037fa:	4291      	cmp	r1, r2
 80037fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003800:	d100      	bne.n	8003804 <memcpy+0xc>
 8003802:	4770      	bx	lr
 8003804:	b510      	push	{r4, lr}
 8003806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800380a:	4291      	cmp	r1, r2
 800380c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003810:	d1f9      	bne.n	8003806 <memcpy+0xe>
 8003812:	bd10      	pop	{r4, pc}

08003814 <_realloc_r>:
 8003814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003818:	4607      	mov	r7, r0
 800381a:	4614      	mov	r4, r2
 800381c:	460d      	mov	r5, r1
 800381e:	b921      	cbnz	r1, 800382a <_realloc_r+0x16>
 8003820:	4611      	mov	r1, r2
 8003822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003826:	f7ff ba67 	b.w	8002cf8 <_malloc_r>
 800382a:	b92a      	cbnz	r2, 8003838 <_realloc_r+0x24>
 800382c:	f7ff f9fa 	bl	8002c24 <_free_r>
 8003830:	4625      	mov	r5, r4
 8003832:	4628      	mov	r0, r5
 8003834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003838:	f000 f89e 	bl	8003978 <_malloc_usable_size_r>
 800383c:	4284      	cmp	r4, r0
 800383e:	4606      	mov	r6, r0
 8003840:	d802      	bhi.n	8003848 <_realloc_r+0x34>
 8003842:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003846:	d8f4      	bhi.n	8003832 <_realloc_r+0x1e>
 8003848:	4621      	mov	r1, r4
 800384a:	4638      	mov	r0, r7
 800384c:	f7ff fa54 	bl	8002cf8 <_malloc_r>
 8003850:	4680      	mov	r8, r0
 8003852:	b908      	cbnz	r0, 8003858 <_realloc_r+0x44>
 8003854:	4645      	mov	r5, r8
 8003856:	e7ec      	b.n	8003832 <_realloc_r+0x1e>
 8003858:	42b4      	cmp	r4, r6
 800385a:	4622      	mov	r2, r4
 800385c:	4629      	mov	r1, r5
 800385e:	bf28      	it	cs
 8003860:	4632      	movcs	r2, r6
 8003862:	f7ff ffc9 	bl	80037f8 <memcpy>
 8003866:	4629      	mov	r1, r5
 8003868:	4638      	mov	r0, r7
 800386a:	f7ff f9db 	bl	8002c24 <_free_r>
 800386e:	e7f1      	b.n	8003854 <_realloc_r+0x40>

08003870 <__swhatbuf_r>:
 8003870:	b570      	push	{r4, r5, r6, lr}
 8003872:	460c      	mov	r4, r1
 8003874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003878:	4615      	mov	r5, r2
 800387a:	2900      	cmp	r1, #0
 800387c:	461e      	mov	r6, r3
 800387e:	b096      	sub	sp, #88	@ 0x58
 8003880:	da0c      	bge.n	800389c <__swhatbuf_r+0x2c>
 8003882:	89a3      	ldrh	r3, [r4, #12]
 8003884:	2100      	movs	r1, #0
 8003886:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800388a:	bf14      	ite	ne
 800388c:	2340      	movne	r3, #64	@ 0x40
 800388e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003892:	2000      	movs	r0, #0
 8003894:	6031      	str	r1, [r6, #0]
 8003896:	602b      	str	r3, [r5, #0]
 8003898:	b016      	add	sp, #88	@ 0x58
 800389a:	bd70      	pop	{r4, r5, r6, pc}
 800389c:	466a      	mov	r2, sp
 800389e:	f000 f849 	bl	8003934 <_fstat_r>
 80038a2:	2800      	cmp	r0, #0
 80038a4:	dbed      	blt.n	8003882 <__swhatbuf_r+0x12>
 80038a6:	9901      	ldr	r1, [sp, #4]
 80038a8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80038ac:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80038b0:	4259      	negs	r1, r3
 80038b2:	4159      	adcs	r1, r3
 80038b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038b8:	e7eb      	b.n	8003892 <__swhatbuf_r+0x22>

080038ba <__smakebuf_r>:
 80038ba:	898b      	ldrh	r3, [r1, #12]
 80038bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038be:	079d      	lsls	r5, r3, #30
 80038c0:	4606      	mov	r6, r0
 80038c2:	460c      	mov	r4, r1
 80038c4:	d507      	bpl.n	80038d6 <__smakebuf_r+0x1c>
 80038c6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80038ca:	6023      	str	r3, [r4, #0]
 80038cc:	6123      	str	r3, [r4, #16]
 80038ce:	2301      	movs	r3, #1
 80038d0:	6163      	str	r3, [r4, #20]
 80038d2:	b003      	add	sp, #12
 80038d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038d6:	466a      	mov	r2, sp
 80038d8:	ab01      	add	r3, sp, #4
 80038da:	f7ff ffc9 	bl	8003870 <__swhatbuf_r>
 80038de:	9f00      	ldr	r7, [sp, #0]
 80038e0:	4605      	mov	r5, r0
 80038e2:	4639      	mov	r1, r7
 80038e4:	4630      	mov	r0, r6
 80038e6:	f7ff fa07 	bl	8002cf8 <_malloc_r>
 80038ea:	b948      	cbnz	r0, 8003900 <__smakebuf_r+0x46>
 80038ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038f0:	059a      	lsls	r2, r3, #22
 80038f2:	d4ee      	bmi.n	80038d2 <__smakebuf_r+0x18>
 80038f4:	f023 0303 	bic.w	r3, r3, #3
 80038f8:	f043 0302 	orr.w	r3, r3, #2
 80038fc:	81a3      	strh	r3, [r4, #12]
 80038fe:	e7e2      	b.n	80038c6 <__smakebuf_r+0xc>
 8003900:	89a3      	ldrh	r3, [r4, #12]
 8003902:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800390a:	81a3      	strh	r3, [r4, #12]
 800390c:	9b01      	ldr	r3, [sp, #4]
 800390e:	6020      	str	r0, [r4, #0]
 8003910:	b15b      	cbz	r3, 800392a <__smakebuf_r+0x70>
 8003912:	4630      	mov	r0, r6
 8003914:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003918:	f000 f81e 	bl	8003958 <_isatty_r>
 800391c:	b128      	cbz	r0, 800392a <__smakebuf_r+0x70>
 800391e:	89a3      	ldrh	r3, [r4, #12]
 8003920:	f023 0303 	bic.w	r3, r3, #3
 8003924:	f043 0301 	orr.w	r3, r3, #1
 8003928:	81a3      	strh	r3, [r4, #12]
 800392a:	89a3      	ldrh	r3, [r4, #12]
 800392c:	431d      	orrs	r5, r3
 800392e:	81a5      	strh	r5, [r4, #12]
 8003930:	e7cf      	b.n	80038d2 <__smakebuf_r+0x18>
	...

08003934 <_fstat_r>:
 8003934:	b538      	push	{r3, r4, r5, lr}
 8003936:	2300      	movs	r3, #0
 8003938:	4d06      	ldr	r5, [pc, #24]	@ (8003954 <_fstat_r+0x20>)
 800393a:	4604      	mov	r4, r0
 800393c:	4608      	mov	r0, r1
 800393e:	4611      	mov	r1, r2
 8003940:	602b      	str	r3, [r5, #0]
 8003942:	f7fe fd66 	bl	8002412 <_fstat>
 8003946:	1c43      	adds	r3, r0, #1
 8003948:	d102      	bne.n	8003950 <_fstat_r+0x1c>
 800394a:	682b      	ldr	r3, [r5, #0]
 800394c:	b103      	cbz	r3, 8003950 <_fstat_r+0x1c>
 800394e:	6023      	str	r3, [r4, #0]
 8003950:	bd38      	pop	{r3, r4, r5, pc}
 8003952:	bf00      	nop
 8003954:	2000038c 	.word	0x2000038c

08003958 <_isatty_r>:
 8003958:	b538      	push	{r3, r4, r5, lr}
 800395a:	2300      	movs	r3, #0
 800395c:	4d05      	ldr	r5, [pc, #20]	@ (8003974 <_isatty_r+0x1c>)
 800395e:	4604      	mov	r4, r0
 8003960:	4608      	mov	r0, r1
 8003962:	602b      	str	r3, [r5, #0]
 8003964:	f7fe feba 	bl	80026dc <_isatty>
 8003968:	1c43      	adds	r3, r0, #1
 800396a:	d102      	bne.n	8003972 <_isatty_r+0x1a>
 800396c:	682b      	ldr	r3, [r5, #0]
 800396e:	b103      	cbz	r3, 8003972 <_isatty_r+0x1a>
 8003970:	6023      	str	r3, [r4, #0]
 8003972:	bd38      	pop	{r3, r4, r5, pc}
 8003974:	2000038c 	.word	0x2000038c

08003978 <_malloc_usable_size_r>:
 8003978:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800397c:	1f18      	subs	r0, r3, #4
 800397e:	2b00      	cmp	r3, #0
 8003980:	bfbc      	itt	lt
 8003982:	580b      	ldrlt	r3, [r1, r0]
 8003984:	18c0      	addlt	r0, r0, r3
 8003986:	4770      	bx	lr

08003988 <_init>:
 8003988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398a:	bf00      	nop
 800398c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800398e:	bc08      	pop	{r3}
 8003990:	469e      	mov	lr, r3
 8003992:	4770      	bx	lr

08003994 <_fini>:
 8003994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003996:	bf00      	nop
 8003998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800399a:	bc08      	pop	{r3}
 800399c:	469e      	mov	lr, r3
 800399e:	4770      	bx	lr
